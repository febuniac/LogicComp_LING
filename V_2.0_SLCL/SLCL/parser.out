Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    KEYWORD
    NEWLINE

Grammar

Rule 0     S' -> statement_list
Rule 1     statement_list -> statement
Rule 2     statement_list -> statement_list statement
Rule 3     statement -> variable
Rule 4     statement -> expression
Rule 5     statement -> if_statement
Rule 6     statement -> BREAK SEMICOLON
Rule 7     statement -> PRINT COLON OPEN_PAREN arguments CLOSE_PAREN SEMICOLON
Rule 8     statement -> variable PLUS_EQ expression SEMICOLON
Rule 9     statement -> variable MINUS_EQ expression SEMICOLON
Rule 10    statement -> variable MULT_EQ expression SEMICOLON
Rule 11    statement -> WHILE COLON expression OPEN_KEY statement_list CLOSE_KEY
Rule 12    statement -> FOR COLON OPEN_KEY statement_list CLOSE_KEY
Rule 13    statement -> FUNCTION variable OPEN_PAREN arguments CLOSE_PAREN OPEN_KEY statement_list CLOSE_KEY
Rule 14    statement -> FUNCTION variable OPEN_KEY statement_list CLOSE_KEY
Rule 15    statement -> RETURN expression SEMICOLON
Rule 16    expression -> variable OPEN_PAREN arguments CLOSE_PAREN
Rule 17    statement -> variable OPEN_PAREN arguments CLOSE_PAREN SEMICOLON
Rule 18    variable -> VARIABLE
Rule 19    expression -> expression PLUS expression
Rule 20    expression -> expression MINUS expression
Rule 21    expression -> expression MULT expression
Rule 22    expression -> expression DIV expression
Rule 23    expression -> expression EXP expression
Rule 24    expression -> expression MOD expression
Rule 25    expression -> expression BIT_AND expression
Rule 26    expression -> expression BIT_OR expression
Rule 27    expression -> expression BIT_XOR expression
Rule 28    expression -> PLUS expression
Rule 29    expression -> MINUS expression
Rule 30    expression -> BIT_NEG expression
Rule 31    expression -> NOT expression
Rule 32    expression -> OPEN_PAREN expression CLOSE_PAREN
Rule 33    expression -> variable ASSIGN assignable SEMICOLON
Rule 34    if_statement -> IF COLON expression OPEN_KEY statement_list CLOSE_KEY
Rule 35    if_statement -> IF COLON expression OPEN_KEY statement_list CLOSE_KEY ELSE COLON OPEN_KEY statement_list CLOSE_KEY
Rule 36    if_statement -> IF COLON expression OPEN_KEY statement_list CLOSE_KEY ELSE COLON if_statement
Rule 37    primitive -> NUM_INT
Rule 38    primitive -> NUM_FLOAT
Rule 39    primitive -> STRING
Rule 40    primitive -> boolean
Rule 41    boolean -> TRUE
Rule 42    boolean -> FALSE
Rule 43    boolean -> expression EQUAL_TO expression
Rule 44    boolean -> expression DIFF expression
Rule 45    boolean -> expression GREATER_THAN expression
Rule 46    boolean -> expression GREATER_THAN_EQUAL expression
Rule 47    boolean -> expression LESS_THAN expression
Rule 48    boolean -> expression LESS_THAN_EQUAL expression
Rule 49    boolean -> expression AND expression
Rule 50    boolean -> expression OR expression
Rule 51    assignable -> primitive
Rule 52    assignable -> expression
Rule 53    arguments -> arguments COMMA expression
Rule 54    arguments -> expression
Rule 55    arguments -> <empty>
Rule 56    expression -> primitive
Rule 57    expression -> STRING
Rule 58    expression -> variable

Terminals, with rules where they appear

AND                  : 49
ASSIGN               : 33
BIT_AND              : 25
BIT_NEG              : 30
BIT_OR               : 26
BIT_XOR              : 27
BREAK                : 6
CLOSE_KEY            : 11 12 13 14 34 35 35 36
CLOSE_PAREN          : 7 13 16 17 32
COLON                : 7 11 12 34 35 35 36 36
COMMA                : 53
DIFF                 : 44
DIV                  : 22
ELSE                 : 35 36
EQUAL_TO             : 43
EXP                  : 23
FALSE                : 42
FOR                  : 12
FUNCTION             : 13 14
GREATER_THAN         : 45
GREATER_THAN_EQUAL   : 46
IF                   : 34 35 36
KEYWORD              : 
LESS_THAN            : 47
LESS_THAN_EQUAL      : 48
MINUS                : 20 29
MINUS_EQ             : 9
MOD                  : 24
MULT                 : 21
MULT_EQ              : 10
NEWLINE              : 
NOT                  : 31
NUM_FLOAT            : 38
NUM_INT              : 37
OPEN_KEY             : 11 12 13 14 34 35 35 36
OPEN_PAREN           : 7 13 16 17 32
OR                   : 50
PLUS                 : 19 28
PLUS_EQ              : 8
PRINT                : 7
RETURN               : 15
SEMICOLON            : 6 7 8 9 10 15 17 33
STRING               : 39 57
TRUE                 : 41
VARIABLE             : 18
WHILE                : 11
error                : 

Nonterminals, with rules where they appear

arguments            : 7 13 16 17 53
assignable           : 33
boolean              : 40
expression           : 4 8 9 10 11 15 19 19 20 20 21 21 22 22 23 23 24 24 25 25 26 26 27 27 28 29 30 31 32 34 35 36 43 43 44 44 45 45 46 46 47 47 48 48 49 49 50 50 52 53 54
if_statement         : 5 36
primitive            : 51 56
statement            : 1 2
statement_list       : 2 11 12 13 14 34 35 35 36 0
variable             : 3 8 9 10 13 14 16 17 33 58

Parsing method: LALR

state 0

    (0) S' -> . statement_list
    (1) statement_list -> . statement
    (2) statement_list -> . statement_list statement
    (3) statement -> . variable
    (4) statement -> . expression
    (5) statement -> . if_statement
    (6) statement -> . BREAK SEMICOLON
    (7) statement -> . PRINT COLON OPEN_PAREN arguments CLOSE_PAREN SEMICOLON
    (8) statement -> . variable PLUS_EQ expression SEMICOLON
    (9) statement -> . variable MINUS_EQ expression SEMICOLON
    (10) statement -> . variable MULT_EQ expression SEMICOLON
    (11) statement -> . WHILE COLON expression OPEN_KEY statement_list CLOSE_KEY
    (12) statement -> . FOR COLON OPEN_KEY statement_list CLOSE_KEY
    (13) statement -> . FUNCTION variable OPEN_PAREN arguments CLOSE_PAREN OPEN_KEY statement_list CLOSE_KEY
    (14) statement -> . FUNCTION variable OPEN_KEY statement_list CLOSE_KEY
    (15) statement -> . RETURN expression SEMICOLON
    (17) statement -> . variable OPEN_PAREN arguments CLOSE_PAREN SEMICOLON
    (18) variable -> . VARIABLE
    (16) expression -> . variable OPEN_PAREN arguments CLOSE_PAREN
    (19) expression -> . expression PLUS expression
    (20) expression -> . expression MINUS expression
    (21) expression -> . expression MULT expression
    (22) expression -> . expression DIV expression
    (23) expression -> . expression EXP expression
    (24) expression -> . expression MOD expression
    (25) expression -> . expression BIT_AND expression
    (26) expression -> . expression BIT_OR expression
    (27) expression -> . expression BIT_XOR expression
    (28) expression -> . PLUS expression
    (29) expression -> . MINUS expression
    (30) expression -> . BIT_NEG expression
    (31) expression -> . NOT expression
    (32) expression -> . OPEN_PAREN expression CLOSE_PAREN
    (33) expression -> . variable ASSIGN assignable SEMICOLON
    (56) expression -> . primitive
    (57) expression -> . STRING
    (58) expression -> . variable
    (34) if_statement -> . IF COLON expression OPEN_KEY statement_list CLOSE_KEY
    (35) if_statement -> . IF COLON expression OPEN_KEY statement_list CLOSE_KEY ELSE COLON OPEN_KEY statement_list CLOSE_KEY
    (36) if_statement -> . IF COLON expression OPEN_KEY statement_list CLOSE_KEY ELSE COLON if_statement
    (37) primitive -> . NUM_INT
    (38) primitive -> . NUM_FLOAT
    (39) primitive -> . STRING
    (40) primitive -> . boolean
    (41) boolean -> . TRUE
    (42) boolean -> . FALSE
    (43) boolean -> . expression EQUAL_TO expression
    (44) boolean -> . expression DIFF expression
    (45) boolean -> . expression GREATER_THAN expression
    (46) boolean -> . expression GREATER_THAN_EQUAL expression
    (47) boolean -> . expression LESS_THAN expression
    (48) boolean -> . expression LESS_THAN_EQUAL expression
    (49) boolean -> . expression AND expression
    (50) boolean -> . expression OR expression

    BREAK           shift and go to state 6
    PRINT           shift and go to state 7
    WHILE           shift and go to state 9
    FOR             shift and go to state 10
    FUNCTION        shift and go to state 11
    RETURN          shift and go to state 12
    VARIABLE        shift and go to state 13
    PLUS            shift and go to state 14
    MINUS           shift and go to state 15
    BIT_NEG         shift and go to state 16
    NOT             shift and go to state 17
    OPEN_PAREN      shift and go to state 8
    STRING          shift and go to state 19
    IF              shift and go to state 20
    NUM_INT         shift and go to state 21
    NUM_FLOAT       shift and go to state 22
    TRUE            shift and go to state 24
    FALSE           shift and go to state 25

    statement_list                 shift and go to state 1
    statement                      shift and go to state 2
    variable                       shift and go to state 3
    expression                     shift and go to state 4
    if_statement                   shift and go to state 5
    primitive                      shift and go to state 18
    boolean                        shift and go to state 23

state 1

    (0) S' -> statement_list .
    (2) statement_list -> statement_list . statement
    (3) statement -> . variable
    (4) statement -> . expression
    (5) statement -> . if_statement
    (6) statement -> . BREAK SEMICOLON
    (7) statement -> . PRINT COLON OPEN_PAREN arguments CLOSE_PAREN SEMICOLON
    (8) statement -> . variable PLUS_EQ expression SEMICOLON
    (9) statement -> . variable MINUS_EQ expression SEMICOLON
    (10) statement -> . variable MULT_EQ expression SEMICOLON
    (11) statement -> . WHILE COLON expression OPEN_KEY statement_list CLOSE_KEY
    (12) statement -> . FOR COLON OPEN_KEY statement_list CLOSE_KEY
    (13) statement -> . FUNCTION variable OPEN_PAREN arguments CLOSE_PAREN OPEN_KEY statement_list CLOSE_KEY
    (14) statement -> . FUNCTION variable OPEN_KEY statement_list CLOSE_KEY
    (15) statement -> . RETURN expression SEMICOLON
    (17) statement -> . variable OPEN_PAREN arguments CLOSE_PAREN SEMICOLON
    (18) variable -> . VARIABLE
    (16) expression -> . variable OPEN_PAREN arguments CLOSE_PAREN
    (19) expression -> . expression PLUS expression
    (20) expression -> . expression MINUS expression
    (21) expression -> . expression MULT expression
    (22) expression -> . expression DIV expression
    (23) expression -> . expression EXP expression
    (24) expression -> . expression MOD expression
    (25) expression -> . expression BIT_AND expression
    (26) expression -> . expression BIT_OR expression
    (27) expression -> . expression BIT_XOR expression
    (28) expression -> . PLUS expression
    (29) expression -> . MINUS expression
    (30) expression -> . BIT_NEG expression
    (31) expression -> . NOT expression
    (32) expression -> . OPEN_PAREN expression CLOSE_PAREN
    (33) expression -> . variable ASSIGN assignable SEMICOLON
    (56) expression -> . primitive
    (57) expression -> . STRING
    (58) expression -> . variable
    (34) if_statement -> . IF COLON expression OPEN_KEY statement_list CLOSE_KEY
    (35) if_statement -> . IF COLON expression OPEN_KEY statement_list CLOSE_KEY ELSE COLON OPEN_KEY statement_list CLOSE_KEY
    (36) if_statement -> . IF COLON expression OPEN_KEY statement_list CLOSE_KEY ELSE COLON if_statement
    (37) primitive -> . NUM_INT
    (38) primitive -> . NUM_FLOAT
    (39) primitive -> . STRING
    (40) primitive -> . boolean
    (41) boolean -> . TRUE
    (42) boolean -> . FALSE
    (43) boolean -> . expression EQUAL_TO expression
    (44) boolean -> . expression DIFF expression
    (45) boolean -> . expression GREATER_THAN expression
    (46) boolean -> . expression GREATER_THAN_EQUAL expression
    (47) boolean -> . expression LESS_THAN expression
    (48) boolean -> . expression LESS_THAN_EQUAL expression
    (49) boolean -> . expression AND expression
    (50) boolean -> . expression OR expression

    BREAK           shift and go to state 6
    PRINT           shift and go to state 7
    WHILE           shift and go to state 9
    FOR             shift and go to state 10
    FUNCTION        shift and go to state 11
    RETURN          shift and go to state 12
    VARIABLE        shift and go to state 13
    PLUS            shift and go to state 14
    MINUS           shift and go to state 15
    BIT_NEG         shift and go to state 16
    NOT             shift and go to state 17
    OPEN_PAREN      shift and go to state 8
    STRING          shift and go to state 19
    IF              shift and go to state 20
    NUM_INT         shift and go to state 21
    NUM_FLOAT       shift and go to state 22
    TRUE            shift and go to state 24
    FALSE           shift and go to state 25

    statement                      shift and go to state 26
    variable                       shift and go to state 3
    expression                     shift and go to state 4
    if_statement                   shift and go to state 5
    primitive                      shift and go to state 18
    boolean                        shift and go to state 23

state 2

    (1) statement_list -> statement .

    BREAK           reduce using rule 1 (statement_list -> statement .)
    PRINT           reduce using rule 1 (statement_list -> statement .)
    WHILE           reduce using rule 1 (statement_list -> statement .)
    FOR             reduce using rule 1 (statement_list -> statement .)
    FUNCTION        reduce using rule 1 (statement_list -> statement .)
    RETURN          reduce using rule 1 (statement_list -> statement .)
    VARIABLE        reduce using rule 1 (statement_list -> statement .)
    PLUS            reduce using rule 1 (statement_list -> statement .)
    MINUS           reduce using rule 1 (statement_list -> statement .)
    BIT_NEG         reduce using rule 1 (statement_list -> statement .)
    NOT             reduce using rule 1 (statement_list -> statement .)
    OPEN_PAREN      reduce using rule 1 (statement_list -> statement .)
    STRING          reduce using rule 1 (statement_list -> statement .)
    IF              reduce using rule 1 (statement_list -> statement .)
    NUM_INT         reduce using rule 1 (statement_list -> statement .)
    NUM_FLOAT       reduce using rule 1 (statement_list -> statement .)
    TRUE            reduce using rule 1 (statement_list -> statement .)
    FALSE           reduce using rule 1 (statement_list -> statement .)
    $end            reduce using rule 1 (statement_list -> statement .)
    CLOSE_KEY       reduce using rule 1 (statement_list -> statement .)


state 3

    (3) statement -> variable .
    (8) statement -> variable . PLUS_EQ expression SEMICOLON
    (9) statement -> variable . MINUS_EQ expression SEMICOLON
    (10) statement -> variable . MULT_EQ expression SEMICOLON
    (17) statement -> variable . OPEN_PAREN arguments CLOSE_PAREN SEMICOLON
    (16) expression -> variable . OPEN_PAREN arguments CLOSE_PAREN
    (33) expression -> variable . ASSIGN assignable SEMICOLON
    (58) expression -> variable .

  ! shift/reduce conflict for OPEN_PAREN resolved as shift
  ! reduce/reduce conflict for PLUS resolved using rule 3 (statement -> variable .)
  ! reduce/reduce conflict for MINUS resolved using rule 3 (statement -> variable .)
  ! reduce/reduce conflict for BREAK resolved using rule 3 (statement -> variable .)
  ! reduce/reduce conflict for PRINT resolved using rule 3 (statement -> variable .)
  ! reduce/reduce conflict for WHILE resolved using rule 3 (statement -> variable .)
  ! reduce/reduce conflict for FOR resolved using rule 3 (statement -> variable .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 3 (statement -> variable .)
  ! reduce/reduce conflict for RETURN resolved using rule 3 (statement -> variable .)
  ! reduce/reduce conflict for VARIABLE resolved using rule 3 (statement -> variable .)
  ! reduce/reduce conflict for BIT_NEG resolved using rule 3 (statement -> variable .)
  ! reduce/reduce conflict for NOT resolved using rule 3 (statement -> variable .)
  ! shift/reduce conflict for OPEN_PAREN resolved as shift
  ! reduce/reduce conflict for STRING resolved using rule 3 (statement -> variable .)
  ! reduce/reduce conflict for IF resolved using rule 3 (statement -> variable .)
  ! reduce/reduce conflict for NUM_INT resolved using rule 3 (statement -> variable .)
  ! reduce/reduce conflict for NUM_FLOAT resolved using rule 3 (statement -> variable .)
  ! reduce/reduce conflict for TRUE resolved using rule 3 (statement -> variable .)
  ! reduce/reduce conflict for FALSE resolved using rule 3 (statement -> variable .)
  ! reduce/reduce conflict for $end resolved using rule 3 (statement -> variable .)
  ! reduce/reduce conflict for CLOSE_KEY resolved using rule 3 (statement -> variable .)
    BREAK           reduce using rule 3 (statement -> variable .)
    PRINT           reduce using rule 3 (statement -> variable .)
    WHILE           reduce using rule 3 (statement -> variable .)
    FOR             reduce using rule 3 (statement -> variable .)
    FUNCTION        reduce using rule 3 (statement -> variable .)
    RETURN          reduce using rule 3 (statement -> variable .)
    VARIABLE        reduce using rule 3 (statement -> variable .)
    PLUS            reduce using rule 3 (statement -> variable .)
    MINUS           reduce using rule 3 (statement -> variable .)
    BIT_NEG         reduce using rule 3 (statement -> variable .)
    NOT             reduce using rule 3 (statement -> variable .)
    STRING          reduce using rule 3 (statement -> variable .)
    IF              reduce using rule 3 (statement -> variable .)
    NUM_INT         reduce using rule 3 (statement -> variable .)
    NUM_FLOAT       reduce using rule 3 (statement -> variable .)
    TRUE            reduce using rule 3 (statement -> variable .)
    FALSE           reduce using rule 3 (statement -> variable .)
    $end            reduce using rule 3 (statement -> variable .)
    CLOSE_KEY       reduce using rule 3 (statement -> variable .)
    PLUS_EQ         shift and go to state 27
    MINUS_EQ        shift and go to state 28
    MULT_EQ         shift and go to state 29
    OPEN_PAREN      shift and go to state 30
    ASSIGN          shift and go to state 31
    MULT            reduce using rule 58 (expression -> variable .)
    DIV             reduce using rule 58 (expression -> variable .)
    EXP             reduce using rule 58 (expression -> variable .)
    MOD             reduce using rule 58 (expression -> variable .)
    BIT_AND         reduce using rule 58 (expression -> variable .)
    BIT_OR          reduce using rule 58 (expression -> variable .)
    BIT_XOR         reduce using rule 58 (expression -> variable .)
    EQUAL_TO        reduce using rule 58 (expression -> variable .)
    DIFF            reduce using rule 58 (expression -> variable .)
    GREATER_THAN    reduce using rule 58 (expression -> variable .)
    GREATER_THAN_EQUAL reduce using rule 58 (expression -> variable .)
    LESS_THAN       reduce using rule 58 (expression -> variable .)
    LESS_THAN_EQUAL reduce using rule 58 (expression -> variable .)
    AND             reduce using rule 58 (expression -> variable .)
    OR              reduce using rule 58 (expression -> variable .)

  ! OPEN_PAREN      [ reduce using rule 3 (statement -> variable .) ]
  ! PLUS            [ reduce using rule 58 (expression -> variable .) ]
  ! MINUS           [ reduce using rule 58 (expression -> variable .) ]
  ! BREAK           [ reduce using rule 58 (expression -> variable .) ]
  ! PRINT           [ reduce using rule 58 (expression -> variable .) ]
  ! WHILE           [ reduce using rule 58 (expression -> variable .) ]
  ! FOR             [ reduce using rule 58 (expression -> variable .) ]
  ! FUNCTION        [ reduce using rule 58 (expression -> variable .) ]
  ! RETURN          [ reduce using rule 58 (expression -> variable .) ]
  ! VARIABLE        [ reduce using rule 58 (expression -> variable .) ]
  ! BIT_NEG         [ reduce using rule 58 (expression -> variable .) ]
  ! NOT             [ reduce using rule 58 (expression -> variable .) ]
  ! OPEN_PAREN      [ reduce using rule 58 (expression -> variable .) ]
  ! STRING          [ reduce using rule 58 (expression -> variable .) ]
  ! IF              [ reduce using rule 58 (expression -> variable .) ]
  ! NUM_INT         [ reduce using rule 58 (expression -> variable .) ]
  ! NUM_FLOAT       [ reduce using rule 58 (expression -> variable .) ]
  ! TRUE            [ reduce using rule 58 (expression -> variable .) ]
  ! FALSE           [ reduce using rule 58 (expression -> variable .) ]
  ! $end            [ reduce using rule 58 (expression -> variable .) ]
  ! CLOSE_KEY       [ reduce using rule 58 (expression -> variable .) ]


state 4

    (4) statement -> expression .
    (19) expression -> expression . PLUS expression
    (20) expression -> expression . MINUS expression
    (21) expression -> expression . MULT expression
    (22) expression -> expression . DIV expression
    (23) expression -> expression . EXP expression
    (24) expression -> expression . MOD expression
    (25) expression -> expression . BIT_AND expression
    (26) expression -> expression . BIT_OR expression
    (27) expression -> expression . BIT_XOR expression
    (43) boolean -> expression . EQUAL_TO expression
    (44) boolean -> expression . DIFF expression
    (45) boolean -> expression . GREATER_THAN expression
    (46) boolean -> expression . GREATER_THAN_EQUAL expression
    (47) boolean -> expression . LESS_THAN expression
    (48) boolean -> expression . LESS_THAN_EQUAL expression
    (49) boolean -> expression . AND expression
    (50) boolean -> expression . OR expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
    BREAK           reduce using rule 4 (statement -> expression .)
    PRINT           reduce using rule 4 (statement -> expression .)
    WHILE           reduce using rule 4 (statement -> expression .)
    FOR             reduce using rule 4 (statement -> expression .)
    FUNCTION        reduce using rule 4 (statement -> expression .)
    RETURN          reduce using rule 4 (statement -> expression .)
    VARIABLE        reduce using rule 4 (statement -> expression .)
    BIT_NEG         reduce using rule 4 (statement -> expression .)
    NOT             reduce using rule 4 (statement -> expression .)
    OPEN_PAREN      reduce using rule 4 (statement -> expression .)
    STRING          reduce using rule 4 (statement -> expression .)
    IF              reduce using rule 4 (statement -> expression .)
    NUM_INT         reduce using rule 4 (statement -> expression .)
    NUM_FLOAT       reduce using rule 4 (statement -> expression .)
    TRUE            reduce using rule 4 (statement -> expression .)
    FALSE           reduce using rule 4 (statement -> expression .)
    $end            reduce using rule 4 (statement -> expression .)
    CLOSE_KEY       reduce using rule 4 (statement -> expression .)
    PLUS            shift and go to state 32
    MINUS           shift and go to state 33
    MULT            shift and go to state 34
    DIV             shift and go to state 35
    EXP             shift and go to state 36
    MOD             shift and go to state 37
    BIT_AND         shift and go to state 38
    BIT_OR          shift and go to state 39
    BIT_XOR         shift and go to state 40
    EQUAL_TO        shift and go to state 41
    DIFF            shift and go to state 42
    GREATER_THAN    shift and go to state 43
    GREATER_THAN_EQUAL shift and go to state 44
    LESS_THAN       shift and go to state 45
    LESS_THAN_EQUAL shift and go to state 46
    AND             shift and go to state 47
    OR              shift and go to state 48

  ! PLUS            [ reduce using rule 4 (statement -> expression .) ]
  ! MINUS           [ reduce using rule 4 (statement -> expression .) ]


state 5

    (5) statement -> if_statement .

    BREAK           reduce using rule 5 (statement -> if_statement .)
    PRINT           reduce using rule 5 (statement -> if_statement .)
    WHILE           reduce using rule 5 (statement -> if_statement .)
    FOR             reduce using rule 5 (statement -> if_statement .)
    FUNCTION        reduce using rule 5 (statement -> if_statement .)
    RETURN          reduce using rule 5 (statement -> if_statement .)
    VARIABLE        reduce using rule 5 (statement -> if_statement .)
    PLUS            reduce using rule 5 (statement -> if_statement .)
    MINUS           reduce using rule 5 (statement -> if_statement .)
    BIT_NEG         reduce using rule 5 (statement -> if_statement .)
    NOT             reduce using rule 5 (statement -> if_statement .)
    OPEN_PAREN      reduce using rule 5 (statement -> if_statement .)
    STRING          reduce using rule 5 (statement -> if_statement .)
    IF              reduce using rule 5 (statement -> if_statement .)
    NUM_INT         reduce using rule 5 (statement -> if_statement .)
    NUM_FLOAT       reduce using rule 5 (statement -> if_statement .)
    TRUE            reduce using rule 5 (statement -> if_statement .)
    FALSE           reduce using rule 5 (statement -> if_statement .)
    $end            reduce using rule 5 (statement -> if_statement .)
    CLOSE_KEY       reduce using rule 5 (statement -> if_statement .)


state 6

    (6) statement -> BREAK . SEMICOLON

    SEMICOLON       shift and go to state 49


state 7

    (7) statement -> PRINT . COLON OPEN_PAREN arguments CLOSE_PAREN SEMICOLON

    COLON           shift and go to state 50


state 8

    (32) expression -> OPEN_PAREN . expression CLOSE_PAREN
    (16) expression -> . variable OPEN_PAREN arguments CLOSE_PAREN
    (19) expression -> . expression PLUS expression
    (20) expression -> . expression MINUS expression
    (21) expression -> . expression MULT expression
    (22) expression -> . expression DIV expression
    (23) expression -> . expression EXP expression
    (24) expression -> . expression MOD expression
    (25) expression -> . expression BIT_AND expression
    (26) expression -> . expression BIT_OR expression
    (27) expression -> . expression BIT_XOR expression
    (28) expression -> . PLUS expression
    (29) expression -> . MINUS expression
    (30) expression -> . BIT_NEG expression
    (31) expression -> . NOT expression
    (32) expression -> . OPEN_PAREN expression CLOSE_PAREN
    (33) expression -> . variable ASSIGN assignable SEMICOLON
    (56) expression -> . primitive
    (57) expression -> . STRING
    (58) expression -> . variable
    (18) variable -> . VARIABLE
    (37) primitive -> . NUM_INT
    (38) primitive -> . NUM_FLOAT
    (39) primitive -> . STRING
    (40) primitive -> . boolean
    (41) boolean -> . TRUE
    (42) boolean -> . FALSE
    (43) boolean -> . expression EQUAL_TO expression
    (44) boolean -> . expression DIFF expression
    (45) boolean -> . expression GREATER_THAN expression
    (46) boolean -> . expression GREATER_THAN_EQUAL expression
    (47) boolean -> . expression LESS_THAN expression
    (48) boolean -> . expression LESS_THAN_EQUAL expression
    (49) boolean -> . expression AND expression
    (50) boolean -> . expression OR expression

    PLUS            shift and go to state 14
    MINUS           shift and go to state 15
    BIT_NEG         shift and go to state 16
    NOT             shift and go to state 17
    OPEN_PAREN      shift and go to state 8
    STRING          shift and go to state 19
    VARIABLE        shift and go to state 13
    NUM_INT         shift and go to state 21
    NUM_FLOAT       shift and go to state 22
    TRUE            shift and go to state 24
    FALSE           shift and go to state 25

    expression                     shift and go to state 51
    variable                       shift and go to state 52
    primitive                      shift and go to state 18
    boolean                        shift and go to state 23

state 9

    (11) statement -> WHILE . COLON expression OPEN_KEY statement_list CLOSE_KEY

    COLON           shift and go to state 53


state 10

    (12) statement -> FOR . COLON OPEN_KEY statement_list CLOSE_KEY

    COLON           shift and go to state 54


state 11

    (13) statement -> FUNCTION . variable OPEN_PAREN arguments CLOSE_PAREN OPEN_KEY statement_list CLOSE_KEY
    (14) statement -> FUNCTION . variable OPEN_KEY statement_list CLOSE_KEY
    (18) variable -> . VARIABLE

    VARIABLE        shift and go to state 13

    variable                       shift and go to state 55

state 12

    (15) statement -> RETURN . expression SEMICOLON
    (16) expression -> . variable OPEN_PAREN arguments CLOSE_PAREN
    (19) expression -> . expression PLUS expression
    (20) expression -> . expression MINUS expression
    (21) expression -> . expression MULT expression
    (22) expression -> . expression DIV expression
    (23) expression -> . expression EXP expression
    (24) expression -> . expression MOD expression
    (25) expression -> . expression BIT_AND expression
    (26) expression -> . expression BIT_OR expression
    (27) expression -> . expression BIT_XOR expression
    (28) expression -> . PLUS expression
    (29) expression -> . MINUS expression
    (30) expression -> . BIT_NEG expression
    (31) expression -> . NOT expression
    (32) expression -> . OPEN_PAREN expression CLOSE_PAREN
    (33) expression -> . variable ASSIGN assignable SEMICOLON
    (56) expression -> . primitive
    (57) expression -> . STRING
    (58) expression -> . variable
    (18) variable -> . VARIABLE
    (37) primitive -> . NUM_INT
    (38) primitive -> . NUM_FLOAT
    (39) primitive -> . STRING
    (40) primitive -> . boolean
    (41) boolean -> . TRUE
    (42) boolean -> . FALSE
    (43) boolean -> . expression EQUAL_TO expression
    (44) boolean -> . expression DIFF expression
    (45) boolean -> . expression GREATER_THAN expression
    (46) boolean -> . expression GREATER_THAN_EQUAL expression
    (47) boolean -> . expression LESS_THAN expression
    (48) boolean -> . expression LESS_THAN_EQUAL expression
    (49) boolean -> . expression AND expression
    (50) boolean -> . expression OR expression

    PLUS            shift and go to state 14
    MINUS           shift and go to state 15
    BIT_NEG         shift and go to state 16
    NOT             shift and go to state 17
    OPEN_PAREN      shift and go to state 8
    STRING          shift and go to state 19
    VARIABLE        shift and go to state 13
    NUM_INT         shift and go to state 21
    NUM_FLOAT       shift and go to state 22
    TRUE            shift and go to state 24
    FALSE           shift and go to state 25

    expression                     shift and go to state 56
    variable                       shift and go to state 52
    primitive                      shift and go to state 18
    boolean                        shift and go to state 23

state 13

    (18) variable -> VARIABLE .

    PLUS_EQ         reduce using rule 18 (variable -> VARIABLE .)
    MINUS_EQ        reduce using rule 18 (variable -> VARIABLE .)
    MULT_EQ         reduce using rule 18 (variable -> VARIABLE .)
    OPEN_PAREN      reduce using rule 18 (variable -> VARIABLE .)
    ASSIGN          reduce using rule 18 (variable -> VARIABLE .)
    BREAK           reduce using rule 18 (variable -> VARIABLE .)
    PRINT           reduce using rule 18 (variable -> VARIABLE .)
    WHILE           reduce using rule 18 (variable -> VARIABLE .)
    FOR             reduce using rule 18 (variable -> VARIABLE .)
    FUNCTION        reduce using rule 18 (variable -> VARIABLE .)
    RETURN          reduce using rule 18 (variable -> VARIABLE .)
    VARIABLE        reduce using rule 18 (variable -> VARIABLE .)
    PLUS            reduce using rule 18 (variable -> VARIABLE .)
    MINUS           reduce using rule 18 (variable -> VARIABLE .)
    BIT_NEG         reduce using rule 18 (variable -> VARIABLE .)
    NOT             reduce using rule 18 (variable -> VARIABLE .)
    STRING          reduce using rule 18 (variable -> VARIABLE .)
    IF              reduce using rule 18 (variable -> VARIABLE .)
    NUM_INT         reduce using rule 18 (variable -> VARIABLE .)
    NUM_FLOAT       reduce using rule 18 (variable -> VARIABLE .)
    TRUE            reduce using rule 18 (variable -> VARIABLE .)
    FALSE           reduce using rule 18 (variable -> VARIABLE .)
    $end            reduce using rule 18 (variable -> VARIABLE .)
    MULT            reduce using rule 18 (variable -> VARIABLE .)
    DIV             reduce using rule 18 (variable -> VARIABLE .)
    EXP             reduce using rule 18 (variable -> VARIABLE .)
    MOD             reduce using rule 18 (variable -> VARIABLE .)
    BIT_AND         reduce using rule 18 (variable -> VARIABLE .)
    BIT_OR          reduce using rule 18 (variable -> VARIABLE .)
    BIT_XOR         reduce using rule 18 (variable -> VARIABLE .)
    EQUAL_TO        reduce using rule 18 (variable -> VARIABLE .)
    DIFF            reduce using rule 18 (variable -> VARIABLE .)
    GREATER_THAN    reduce using rule 18 (variable -> VARIABLE .)
    GREATER_THAN_EQUAL reduce using rule 18 (variable -> VARIABLE .)
    LESS_THAN       reduce using rule 18 (variable -> VARIABLE .)
    LESS_THAN_EQUAL reduce using rule 18 (variable -> VARIABLE .)
    AND             reduce using rule 18 (variable -> VARIABLE .)
    OR              reduce using rule 18 (variable -> VARIABLE .)
    CLOSE_PAREN     reduce using rule 18 (variable -> VARIABLE .)
    OPEN_KEY        reduce using rule 18 (variable -> VARIABLE .)
    SEMICOLON       reduce using rule 18 (variable -> VARIABLE .)
    COMMA           reduce using rule 18 (variable -> VARIABLE .)
    CLOSE_KEY       reduce using rule 18 (variable -> VARIABLE .)


state 14

    (28) expression -> PLUS . expression
    (16) expression -> . variable OPEN_PAREN arguments CLOSE_PAREN
    (19) expression -> . expression PLUS expression
    (20) expression -> . expression MINUS expression
    (21) expression -> . expression MULT expression
    (22) expression -> . expression DIV expression
    (23) expression -> . expression EXP expression
    (24) expression -> . expression MOD expression
    (25) expression -> . expression BIT_AND expression
    (26) expression -> . expression BIT_OR expression
    (27) expression -> . expression BIT_XOR expression
    (28) expression -> . PLUS expression
    (29) expression -> . MINUS expression
    (30) expression -> . BIT_NEG expression
    (31) expression -> . NOT expression
    (32) expression -> . OPEN_PAREN expression CLOSE_PAREN
    (33) expression -> . variable ASSIGN assignable SEMICOLON
    (56) expression -> . primitive
    (57) expression -> . STRING
    (58) expression -> . variable
    (18) variable -> . VARIABLE
    (37) primitive -> . NUM_INT
    (38) primitive -> . NUM_FLOAT
    (39) primitive -> . STRING
    (40) primitive -> . boolean
    (41) boolean -> . TRUE
    (42) boolean -> . FALSE
    (43) boolean -> . expression EQUAL_TO expression
    (44) boolean -> . expression DIFF expression
    (45) boolean -> . expression GREATER_THAN expression
    (46) boolean -> . expression GREATER_THAN_EQUAL expression
    (47) boolean -> . expression LESS_THAN expression
    (48) boolean -> . expression LESS_THAN_EQUAL expression
    (49) boolean -> . expression AND expression
    (50) boolean -> . expression OR expression

    PLUS            shift and go to state 14
    MINUS           shift and go to state 15
    BIT_NEG         shift and go to state 16
    NOT             shift and go to state 17
    OPEN_PAREN      shift and go to state 8
    STRING          shift and go to state 19
    VARIABLE        shift and go to state 13
    NUM_INT         shift and go to state 21
    NUM_FLOAT       shift and go to state 22
    TRUE            shift and go to state 24
    FALSE           shift and go to state 25

    expression                     shift and go to state 57
    variable                       shift and go to state 52
    primitive                      shift and go to state 18
    boolean                        shift and go to state 23

state 15

    (29) expression -> MINUS . expression
    (16) expression -> . variable OPEN_PAREN arguments CLOSE_PAREN
    (19) expression -> . expression PLUS expression
    (20) expression -> . expression MINUS expression
    (21) expression -> . expression MULT expression
    (22) expression -> . expression DIV expression
    (23) expression -> . expression EXP expression
    (24) expression -> . expression MOD expression
    (25) expression -> . expression BIT_AND expression
    (26) expression -> . expression BIT_OR expression
    (27) expression -> . expression BIT_XOR expression
    (28) expression -> . PLUS expression
    (29) expression -> . MINUS expression
    (30) expression -> . BIT_NEG expression
    (31) expression -> . NOT expression
    (32) expression -> . OPEN_PAREN expression CLOSE_PAREN
    (33) expression -> . variable ASSIGN assignable SEMICOLON
    (56) expression -> . primitive
    (57) expression -> . STRING
    (58) expression -> . variable
    (18) variable -> . VARIABLE
    (37) primitive -> . NUM_INT
    (38) primitive -> . NUM_FLOAT
    (39) primitive -> . STRING
    (40) primitive -> . boolean
    (41) boolean -> . TRUE
    (42) boolean -> . FALSE
    (43) boolean -> . expression EQUAL_TO expression
    (44) boolean -> . expression DIFF expression
    (45) boolean -> . expression GREATER_THAN expression
    (46) boolean -> . expression GREATER_THAN_EQUAL expression
    (47) boolean -> . expression LESS_THAN expression
    (48) boolean -> . expression LESS_THAN_EQUAL expression
    (49) boolean -> . expression AND expression
    (50) boolean -> . expression OR expression

    PLUS            shift and go to state 14
    MINUS           shift and go to state 15
    BIT_NEG         shift and go to state 16
    NOT             shift and go to state 17
    OPEN_PAREN      shift and go to state 8
    STRING          shift and go to state 19
    VARIABLE        shift and go to state 13
    NUM_INT         shift and go to state 21
    NUM_FLOAT       shift and go to state 22
    TRUE            shift and go to state 24
    FALSE           shift and go to state 25

    expression                     shift and go to state 58
    variable                       shift and go to state 52
    primitive                      shift and go to state 18
    boolean                        shift and go to state 23

state 16

    (30) expression -> BIT_NEG . expression
    (16) expression -> . variable OPEN_PAREN arguments CLOSE_PAREN
    (19) expression -> . expression PLUS expression
    (20) expression -> . expression MINUS expression
    (21) expression -> . expression MULT expression
    (22) expression -> . expression DIV expression
    (23) expression -> . expression EXP expression
    (24) expression -> . expression MOD expression
    (25) expression -> . expression BIT_AND expression
    (26) expression -> . expression BIT_OR expression
    (27) expression -> . expression BIT_XOR expression
    (28) expression -> . PLUS expression
    (29) expression -> . MINUS expression
    (30) expression -> . BIT_NEG expression
    (31) expression -> . NOT expression
    (32) expression -> . OPEN_PAREN expression CLOSE_PAREN
    (33) expression -> . variable ASSIGN assignable SEMICOLON
    (56) expression -> . primitive
    (57) expression -> . STRING
    (58) expression -> . variable
    (18) variable -> . VARIABLE
    (37) primitive -> . NUM_INT
    (38) primitive -> . NUM_FLOAT
    (39) primitive -> . STRING
    (40) primitive -> . boolean
    (41) boolean -> . TRUE
    (42) boolean -> . FALSE
    (43) boolean -> . expression EQUAL_TO expression
    (44) boolean -> . expression DIFF expression
    (45) boolean -> . expression GREATER_THAN expression
    (46) boolean -> . expression GREATER_THAN_EQUAL expression
    (47) boolean -> . expression LESS_THAN expression
    (48) boolean -> . expression LESS_THAN_EQUAL expression
    (49) boolean -> . expression AND expression
    (50) boolean -> . expression OR expression

    PLUS            shift and go to state 14
    MINUS           shift and go to state 15
    BIT_NEG         shift and go to state 16
    NOT             shift and go to state 17
    OPEN_PAREN      shift and go to state 8
    STRING          shift and go to state 19
    VARIABLE        shift and go to state 13
    NUM_INT         shift and go to state 21
    NUM_FLOAT       shift and go to state 22
    TRUE            shift and go to state 24
    FALSE           shift and go to state 25

    expression                     shift and go to state 59
    variable                       shift and go to state 52
    primitive                      shift and go to state 18
    boolean                        shift and go to state 23

state 17

    (31) expression -> NOT . expression
    (16) expression -> . variable OPEN_PAREN arguments CLOSE_PAREN
    (19) expression -> . expression PLUS expression
    (20) expression -> . expression MINUS expression
    (21) expression -> . expression MULT expression
    (22) expression -> . expression DIV expression
    (23) expression -> . expression EXP expression
    (24) expression -> . expression MOD expression
    (25) expression -> . expression BIT_AND expression
    (26) expression -> . expression BIT_OR expression
    (27) expression -> . expression BIT_XOR expression
    (28) expression -> . PLUS expression
    (29) expression -> . MINUS expression
    (30) expression -> . BIT_NEG expression
    (31) expression -> . NOT expression
    (32) expression -> . OPEN_PAREN expression CLOSE_PAREN
    (33) expression -> . variable ASSIGN assignable SEMICOLON
    (56) expression -> . primitive
    (57) expression -> . STRING
    (58) expression -> . variable
    (18) variable -> . VARIABLE
    (37) primitive -> . NUM_INT
    (38) primitive -> . NUM_FLOAT
    (39) primitive -> . STRING
    (40) primitive -> . boolean
    (41) boolean -> . TRUE
    (42) boolean -> . FALSE
    (43) boolean -> . expression EQUAL_TO expression
    (44) boolean -> . expression DIFF expression
    (45) boolean -> . expression GREATER_THAN expression
    (46) boolean -> . expression GREATER_THAN_EQUAL expression
    (47) boolean -> . expression LESS_THAN expression
    (48) boolean -> . expression LESS_THAN_EQUAL expression
    (49) boolean -> . expression AND expression
    (50) boolean -> . expression OR expression

    PLUS            shift and go to state 14
    MINUS           shift and go to state 15
    BIT_NEG         shift and go to state 16
    NOT             shift and go to state 17
    OPEN_PAREN      shift and go to state 8
    STRING          shift and go to state 19
    VARIABLE        shift and go to state 13
    NUM_INT         shift and go to state 21
    NUM_FLOAT       shift and go to state 22
    TRUE            shift and go to state 24
    FALSE           shift and go to state 25

    expression                     shift and go to state 60
    variable                       shift and go to state 52
    primitive                      shift and go to state 18
    boolean                        shift and go to state 23

state 18

    (56) expression -> primitive .

    PLUS            reduce using rule 56 (expression -> primitive .)
    MINUS           reduce using rule 56 (expression -> primitive .)
    MULT            reduce using rule 56 (expression -> primitive .)
    DIV             reduce using rule 56 (expression -> primitive .)
    EXP             reduce using rule 56 (expression -> primitive .)
    MOD             reduce using rule 56 (expression -> primitive .)
    BIT_AND         reduce using rule 56 (expression -> primitive .)
    BIT_OR          reduce using rule 56 (expression -> primitive .)
    BIT_XOR         reduce using rule 56 (expression -> primitive .)
    EQUAL_TO        reduce using rule 56 (expression -> primitive .)
    DIFF            reduce using rule 56 (expression -> primitive .)
    GREATER_THAN    reduce using rule 56 (expression -> primitive .)
    GREATER_THAN_EQUAL reduce using rule 56 (expression -> primitive .)
    LESS_THAN       reduce using rule 56 (expression -> primitive .)
    LESS_THAN_EQUAL reduce using rule 56 (expression -> primitive .)
    AND             reduce using rule 56 (expression -> primitive .)
    OR              reduce using rule 56 (expression -> primitive .)
    BREAK           reduce using rule 56 (expression -> primitive .)
    PRINT           reduce using rule 56 (expression -> primitive .)
    WHILE           reduce using rule 56 (expression -> primitive .)
    FOR             reduce using rule 56 (expression -> primitive .)
    FUNCTION        reduce using rule 56 (expression -> primitive .)
    RETURN          reduce using rule 56 (expression -> primitive .)
    VARIABLE        reduce using rule 56 (expression -> primitive .)
    BIT_NEG         reduce using rule 56 (expression -> primitive .)
    NOT             reduce using rule 56 (expression -> primitive .)
    OPEN_PAREN      reduce using rule 56 (expression -> primitive .)
    STRING          reduce using rule 56 (expression -> primitive .)
    IF              reduce using rule 56 (expression -> primitive .)
    NUM_INT         reduce using rule 56 (expression -> primitive .)
    NUM_FLOAT       reduce using rule 56 (expression -> primitive .)
    TRUE            reduce using rule 56 (expression -> primitive .)
    FALSE           reduce using rule 56 (expression -> primitive .)
    $end            reduce using rule 56 (expression -> primitive .)
    CLOSE_PAREN     reduce using rule 56 (expression -> primitive .)
    SEMICOLON       reduce using rule 56 (expression -> primitive .)
    COMMA           reduce using rule 56 (expression -> primitive .)
    OPEN_KEY        reduce using rule 56 (expression -> primitive .)
    CLOSE_KEY       reduce using rule 56 (expression -> primitive .)


state 19

    (57) expression -> STRING .
    (39) primitive -> STRING .

  ! reduce/reduce conflict for PLUS resolved using rule 39 (primitive -> STRING .)
  ! reduce/reduce conflict for MINUS resolved using rule 39 (primitive -> STRING .)
  ! reduce/reduce conflict for MULT resolved using rule 39 (primitive -> STRING .)
  ! reduce/reduce conflict for DIV resolved using rule 39 (primitive -> STRING .)
  ! reduce/reduce conflict for EXP resolved using rule 39 (primitive -> STRING .)
  ! reduce/reduce conflict for MOD resolved using rule 39 (primitive -> STRING .)
  ! reduce/reduce conflict for BIT_AND resolved using rule 39 (primitive -> STRING .)
  ! reduce/reduce conflict for BIT_OR resolved using rule 39 (primitive -> STRING .)
  ! reduce/reduce conflict for BIT_XOR resolved using rule 39 (primitive -> STRING .)
  ! reduce/reduce conflict for EQUAL_TO resolved using rule 39 (primitive -> STRING .)
  ! reduce/reduce conflict for DIFF resolved using rule 39 (primitive -> STRING .)
  ! reduce/reduce conflict for GREATER_THAN resolved using rule 39 (primitive -> STRING .)
  ! reduce/reduce conflict for GREATER_THAN_EQUAL resolved using rule 39 (primitive -> STRING .)
  ! reduce/reduce conflict for LESS_THAN resolved using rule 39 (primitive -> STRING .)
  ! reduce/reduce conflict for LESS_THAN_EQUAL resolved using rule 39 (primitive -> STRING .)
  ! reduce/reduce conflict for AND resolved using rule 39 (primitive -> STRING .)
  ! reduce/reduce conflict for OR resolved using rule 39 (primitive -> STRING .)
  ! reduce/reduce conflict for BREAK resolved using rule 39 (primitive -> STRING .)
  ! reduce/reduce conflict for PRINT resolved using rule 39 (primitive -> STRING .)
  ! reduce/reduce conflict for WHILE resolved using rule 39 (primitive -> STRING .)
  ! reduce/reduce conflict for FOR resolved using rule 39 (primitive -> STRING .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 39 (primitive -> STRING .)
  ! reduce/reduce conflict for RETURN resolved using rule 39 (primitive -> STRING .)
  ! reduce/reduce conflict for VARIABLE resolved using rule 39 (primitive -> STRING .)
  ! reduce/reduce conflict for BIT_NEG resolved using rule 39 (primitive -> STRING .)
  ! reduce/reduce conflict for NOT resolved using rule 39 (primitive -> STRING .)
  ! reduce/reduce conflict for OPEN_PAREN resolved using rule 39 (primitive -> STRING .)
  ! reduce/reduce conflict for STRING resolved using rule 39 (primitive -> STRING .)
  ! reduce/reduce conflict for IF resolved using rule 39 (primitive -> STRING .)
  ! reduce/reduce conflict for NUM_INT resolved using rule 39 (primitive -> STRING .)
  ! reduce/reduce conflict for NUM_FLOAT resolved using rule 39 (primitive -> STRING .)
  ! reduce/reduce conflict for TRUE resolved using rule 39 (primitive -> STRING .)
  ! reduce/reduce conflict for FALSE resolved using rule 39 (primitive -> STRING .)
  ! reduce/reduce conflict for $end resolved using rule 39 (primitive -> STRING .)
  ! reduce/reduce conflict for CLOSE_PAREN resolved using rule 39 (primitive -> STRING .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 39 (primitive -> STRING .)
  ! reduce/reduce conflict for COMMA resolved using rule 39 (primitive -> STRING .)
  ! reduce/reduce conflict for OPEN_KEY resolved using rule 39 (primitive -> STRING .)
  ! reduce/reduce conflict for CLOSE_KEY resolved using rule 39 (primitive -> STRING .)
    PLUS            reduce using rule 39 (primitive -> STRING .)
    MINUS           reduce using rule 39 (primitive -> STRING .)
    MULT            reduce using rule 39 (primitive -> STRING .)
    DIV             reduce using rule 39 (primitive -> STRING .)
    EXP             reduce using rule 39 (primitive -> STRING .)
    MOD             reduce using rule 39 (primitive -> STRING .)
    BIT_AND         reduce using rule 39 (primitive -> STRING .)
    BIT_OR          reduce using rule 39 (primitive -> STRING .)
    BIT_XOR         reduce using rule 39 (primitive -> STRING .)
    EQUAL_TO        reduce using rule 39 (primitive -> STRING .)
    DIFF            reduce using rule 39 (primitive -> STRING .)
    GREATER_THAN    reduce using rule 39 (primitive -> STRING .)
    GREATER_THAN_EQUAL reduce using rule 39 (primitive -> STRING .)
    LESS_THAN       reduce using rule 39 (primitive -> STRING .)
    LESS_THAN_EQUAL reduce using rule 39 (primitive -> STRING .)
    AND             reduce using rule 39 (primitive -> STRING .)
    OR              reduce using rule 39 (primitive -> STRING .)
    BREAK           reduce using rule 39 (primitive -> STRING .)
    PRINT           reduce using rule 39 (primitive -> STRING .)
    WHILE           reduce using rule 39 (primitive -> STRING .)
    FOR             reduce using rule 39 (primitive -> STRING .)
    FUNCTION        reduce using rule 39 (primitive -> STRING .)
    RETURN          reduce using rule 39 (primitive -> STRING .)
    VARIABLE        reduce using rule 39 (primitive -> STRING .)
    BIT_NEG         reduce using rule 39 (primitive -> STRING .)
    NOT             reduce using rule 39 (primitive -> STRING .)
    OPEN_PAREN      reduce using rule 39 (primitive -> STRING .)
    STRING          reduce using rule 39 (primitive -> STRING .)
    IF              reduce using rule 39 (primitive -> STRING .)
    NUM_INT         reduce using rule 39 (primitive -> STRING .)
    NUM_FLOAT       reduce using rule 39 (primitive -> STRING .)
    TRUE            reduce using rule 39 (primitive -> STRING .)
    FALSE           reduce using rule 39 (primitive -> STRING .)
    $end            reduce using rule 39 (primitive -> STRING .)
    CLOSE_PAREN     reduce using rule 39 (primitive -> STRING .)
    SEMICOLON       reduce using rule 39 (primitive -> STRING .)
    COMMA           reduce using rule 39 (primitive -> STRING .)
    OPEN_KEY        reduce using rule 39 (primitive -> STRING .)
    CLOSE_KEY       reduce using rule 39 (primitive -> STRING .)

  ! PLUS            [ reduce using rule 57 (expression -> STRING .) ]
  ! MINUS           [ reduce using rule 57 (expression -> STRING .) ]
  ! MULT            [ reduce using rule 57 (expression -> STRING .) ]
  ! DIV             [ reduce using rule 57 (expression -> STRING .) ]
  ! EXP             [ reduce using rule 57 (expression -> STRING .) ]
  ! MOD             [ reduce using rule 57 (expression -> STRING .) ]
  ! BIT_AND         [ reduce using rule 57 (expression -> STRING .) ]
  ! BIT_OR          [ reduce using rule 57 (expression -> STRING .) ]
  ! BIT_XOR         [ reduce using rule 57 (expression -> STRING .) ]
  ! EQUAL_TO        [ reduce using rule 57 (expression -> STRING .) ]
  ! DIFF            [ reduce using rule 57 (expression -> STRING .) ]
  ! GREATER_THAN    [ reduce using rule 57 (expression -> STRING .) ]
  ! GREATER_THAN_EQUAL [ reduce using rule 57 (expression -> STRING .) ]
  ! LESS_THAN       [ reduce using rule 57 (expression -> STRING .) ]
  ! LESS_THAN_EQUAL [ reduce using rule 57 (expression -> STRING .) ]
  ! AND             [ reduce using rule 57 (expression -> STRING .) ]
  ! OR              [ reduce using rule 57 (expression -> STRING .) ]
  ! BREAK           [ reduce using rule 57 (expression -> STRING .) ]
  ! PRINT           [ reduce using rule 57 (expression -> STRING .) ]
  ! WHILE           [ reduce using rule 57 (expression -> STRING .) ]
  ! FOR             [ reduce using rule 57 (expression -> STRING .) ]
  ! FUNCTION        [ reduce using rule 57 (expression -> STRING .) ]
  ! RETURN          [ reduce using rule 57 (expression -> STRING .) ]
  ! VARIABLE        [ reduce using rule 57 (expression -> STRING .) ]
  ! BIT_NEG         [ reduce using rule 57 (expression -> STRING .) ]
  ! NOT             [ reduce using rule 57 (expression -> STRING .) ]
  ! OPEN_PAREN      [ reduce using rule 57 (expression -> STRING .) ]
  ! STRING          [ reduce using rule 57 (expression -> STRING .) ]
  ! IF              [ reduce using rule 57 (expression -> STRING .) ]
  ! NUM_INT         [ reduce using rule 57 (expression -> STRING .) ]
  ! NUM_FLOAT       [ reduce using rule 57 (expression -> STRING .) ]
  ! TRUE            [ reduce using rule 57 (expression -> STRING .) ]
  ! FALSE           [ reduce using rule 57 (expression -> STRING .) ]
  ! $end            [ reduce using rule 57 (expression -> STRING .) ]
  ! CLOSE_PAREN     [ reduce using rule 57 (expression -> STRING .) ]
  ! SEMICOLON       [ reduce using rule 57 (expression -> STRING .) ]
  ! COMMA           [ reduce using rule 57 (expression -> STRING .) ]
  ! OPEN_KEY        [ reduce using rule 57 (expression -> STRING .) ]
  ! CLOSE_KEY       [ reduce using rule 57 (expression -> STRING .) ]


state 20

    (34) if_statement -> IF . COLON expression OPEN_KEY statement_list CLOSE_KEY
    (35) if_statement -> IF . COLON expression OPEN_KEY statement_list CLOSE_KEY ELSE COLON OPEN_KEY statement_list CLOSE_KEY
    (36) if_statement -> IF . COLON expression OPEN_KEY statement_list CLOSE_KEY ELSE COLON if_statement

    COLON           shift and go to state 61


state 21

    (37) primitive -> NUM_INT .

    PLUS            reduce using rule 37 (primitive -> NUM_INT .)
    MINUS           reduce using rule 37 (primitive -> NUM_INT .)
    MULT            reduce using rule 37 (primitive -> NUM_INT .)
    DIV             reduce using rule 37 (primitive -> NUM_INT .)
    EXP             reduce using rule 37 (primitive -> NUM_INT .)
    MOD             reduce using rule 37 (primitive -> NUM_INT .)
    BIT_AND         reduce using rule 37 (primitive -> NUM_INT .)
    BIT_OR          reduce using rule 37 (primitive -> NUM_INT .)
    BIT_XOR         reduce using rule 37 (primitive -> NUM_INT .)
    EQUAL_TO        reduce using rule 37 (primitive -> NUM_INT .)
    DIFF            reduce using rule 37 (primitive -> NUM_INT .)
    GREATER_THAN    reduce using rule 37 (primitive -> NUM_INT .)
    GREATER_THAN_EQUAL reduce using rule 37 (primitive -> NUM_INT .)
    LESS_THAN       reduce using rule 37 (primitive -> NUM_INT .)
    LESS_THAN_EQUAL reduce using rule 37 (primitive -> NUM_INT .)
    AND             reduce using rule 37 (primitive -> NUM_INT .)
    OR              reduce using rule 37 (primitive -> NUM_INT .)
    BREAK           reduce using rule 37 (primitive -> NUM_INT .)
    PRINT           reduce using rule 37 (primitive -> NUM_INT .)
    WHILE           reduce using rule 37 (primitive -> NUM_INT .)
    FOR             reduce using rule 37 (primitive -> NUM_INT .)
    FUNCTION        reduce using rule 37 (primitive -> NUM_INT .)
    RETURN          reduce using rule 37 (primitive -> NUM_INT .)
    VARIABLE        reduce using rule 37 (primitive -> NUM_INT .)
    BIT_NEG         reduce using rule 37 (primitive -> NUM_INT .)
    NOT             reduce using rule 37 (primitive -> NUM_INT .)
    OPEN_PAREN      reduce using rule 37 (primitive -> NUM_INT .)
    STRING          reduce using rule 37 (primitive -> NUM_INT .)
    IF              reduce using rule 37 (primitive -> NUM_INT .)
    NUM_INT         reduce using rule 37 (primitive -> NUM_INT .)
    NUM_FLOAT       reduce using rule 37 (primitive -> NUM_INT .)
    TRUE            reduce using rule 37 (primitive -> NUM_INT .)
    FALSE           reduce using rule 37 (primitive -> NUM_INT .)
    $end            reduce using rule 37 (primitive -> NUM_INT .)
    CLOSE_PAREN     reduce using rule 37 (primitive -> NUM_INT .)
    SEMICOLON       reduce using rule 37 (primitive -> NUM_INT .)
    COMMA           reduce using rule 37 (primitive -> NUM_INT .)
    OPEN_KEY        reduce using rule 37 (primitive -> NUM_INT .)
    CLOSE_KEY       reduce using rule 37 (primitive -> NUM_INT .)


state 22

    (38) primitive -> NUM_FLOAT .

    PLUS            reduce using rule 38 (primitive -> NUM_FLOAT .)
    MINUS           reduce using rule 38 (primitive -> NUM_FLOAT .)
    MULT            reduce using rule 38 (primitive -> NUM_FLOAT .)
    DIV             reduce using rule 38 (primitive -> NUM_FLOAT .)
    EXP             reduce using rule 38 (primitive -> NUM_FLOAT .)
    MOD             reduce using rule 38 (primitive -> NUM_FLOAT .)
    BIT_AND         reduce using rule 38 (primitive -> NUM_FLOAT .)
    BIT_OR          reduce using rule 38 (primitive -> NUM_FLOAT .)
    BIT_XOR         reduce using rule 38 (primitive -> NUM_FLOAT .)
    EQUAL_TO        reduce using rule 38 (primitive -> NUM_FLOAT .)
    DIFF            reduce using rule 38 (primitive -> NUM_FLOAT .)
    GREATER_THAN    reduce using rule 38 (primitive -> NUM_FLOAT .)
    GREATER_THAN_EQUAL reduce using rule 38 (primitive -> NUM_FLOAT .)
    LESS_THAN       reduce using rule 38 (primitive -> NUM_FLOAT .)
    LESS_THAN_EQUAL reduce using rule 38 (primitive -> NUM_FLOAT .)
    AND             reduce using rule 38 (primitive -> NUM_FLOAT .)
    OR              reduce using rule 38 (primitive -> NUM_FLOAT .)
    BREAK           reduce using rule 38 (primitive -> NUM_FLOAT .)
    PRINT           reduce using rule 38 (primitive -> NUM_FLOAT .)
    WHILE           reduce using rule 38 (primitive -> NUM_FLOAT .)
    FOR             reduce using rule 38 (primitive -> NUM_FLOAT .)
    FUNCTION        reduce using rule 38 (primitive -> NUM_FLOAT .)
    RETURN          reduce using rule 38 (primitive -> NUM_FLOAT .)
    VARIABLE        reduce using rule 38 (primitive -> NUM_FLOAT .)
    BIT_NEG         reduce using rule 38 (primitive -> NUM_FLOAT .)
    NOT             reduce using rule 38 (primitive -> NUM_FLOAT .)
    OPEN_PAREN      reduce using rule 38 (primitive -> NUM_FLOAT .)
    STRING          reduce using rule 38 (primitive -> NUM_FLOAT .)
    IF              reduce using rule 38 (primitive -> NUM_FLOAT .)
    NUM_INT         reduce using rule 38 (primitive -> NUM_FLOAT .)
    NUM_FLOAT       reduce using rule 38 (primitive -> NUM_FLOAT .)
    TRUE            reduce using rule 38 (primitive -> NUM_FLOAT .)
    FALSE           reduce using rule 38 (primitive -> NUM_FLOAT .)
    $end            reduce using rule 38 (primitive -> NUM_FLOAT .)
    CLOSE_PAREN     reduce using rule 38 (primitive -> NUM_FLOAT .)
    SEMICOLON       reduce using rule 38 (primitive -> NUM_FLOAT .)
    COMMA           reduce using rule 38 (primitive -> NUM_FLOAT .)
    OPEN_KEY        reduce using rule 38 (primitive -> NUM_FLOAT .)
    CLOSE_KEY       reduce using rule 38 (primitive -> NUM_FLOAT .)


state 23

    (40) primitive -> boolean .

    PLUS            reduce using rule 40 (primitive -> boolean .)
    MINUS           reduce using rule 40 (primitive -> boolean .)
    MULT            reduce using rule 40 (primitive -> boolean .)
    DIV             reduce using rule 40 (primitive -> boolean .)
    EXP             reduce using rule 40 (primitive -> boolean .)
    MOD             reduce using rule 40 (primitive -> boolean .)
    BIT_AND         reduce using rule 40 (primitive -> boolean .)
    BIT_OR          reduce using rule 40 (primitive -> boolean .)
    BIT_XOR         reduce using rule 40 (primitive -> boolean .)
    EQUAL_TO        reduce using rule 40 (primitive -> boolean .)
    DIFF            reduce using rule 40 (primitive -> boolean .)
    GREATER_THAN    reduce using rule 40 (primitive -> boolean .)
    GREATER_THAN_EQUAL reduce using rule 40 (primitive -> boolean .)
    LESS_THAN       reduce using rule 40 (primitive -> boolean .)
    LESS_THAN_EQUAL reduce using rule 40 (primitive -> boolean .)
    AND             reduce using rule 40 (primitive -> boolean .)
    OR              reduce using rule 40 (primitive -> boolean .)
    BREAK           reduce using rule 40 (primitive -> boolean .)
    PRINT           reduce using rule 40 (primitive -> boolean .)
    WHILE           reduce using rule 40 (primitive -> boolean .)
    FOR             reduce using rule 40 (primitive -> boolean .)
    FUNCTION        reduce using rule 40 (primitive -> boolean .)
    RETURN          reduce using rule 40 (primitive -> boolean .)
    VARIABLE        reduce using rule 40 (primitive -> boolean .)
    BIT_NEG         reduce using rule 40 (primitive -> boolean .)
    NOT             reduce using rule 40 (primitive -> boolean .)
    OPEN_PAREN      reduce using rule 40 (primitive -> boolean .)
    STRING          reduce using rule 40 (primitive -> boolean .)
    IF              reduce using rule 40 (primitive -> boolean .)
    NUM_INT         reduce using rule 40 (primitive -> boolean .)
    NUM_FLOAT       reduce using rule 40 (primitive -> boolean .)
    TRUE            reduce using rule 40 (primitive -> boolean .)
    FALSE           reduce using rule 40 (primitive -> boolean .)
    $end            reduce using rule 40 (primitive -> boolean .)
    CLOSE_PAREN     reduce using rule 40 (primitive -> boolean .)
    SEMICOLON       reduce using rule 40 (primitive -> boolean .)
    COMMA           reduce using rule 40 (primitive -> boolean .)
    OPEN_KEY        reduce using rule 40 (primitive -> boolean .)
    CLOSE_KEY       reduce using rule 40 (primitive -> boolean .)


state 24

    (41) boolean -> TRUE .

    PLUS            reduce using rule 41 (boolean -> TRUE .)
    MINUS           reduce using rule 41 (boolean -> TRUE .)
    MULT            reduce using rule 41 (boolean -> TRUE .)
    DIV             reduce using rule 41 (boolean -> TRUE .)
    EXP             reduce using rule 41 (boolean -> TRUE .)
    MOD             reduce using rule 41 (boolean -> TRUE .)
    BIT_AND         reduce using rule 41 (boolean -> TRUE .)
    BIT_OR          reduce using rule 41 (boolean -> TRUE .)
    BIT_XOR         reduce using rule 41 (boolean -> TRUE .)
    EQUAL_TO        reduce using rule 41 (boolean -> TRUE .)
    DIFF            reduce using rule 41 (boolean -> TRUE .)
    GREATER_THAN    reduce using rule 41 (boolean -> TRUE .)
    GREATER_THAN_EQUAL reduce using rule 41 (boolean -> TRUE .)
    LESS_THAN       reduce using rule 41 (boolean -> TRUE .)
    LESS_THAN_EQUAL reduce using rule 41 (boolean -> TRUE .)
    AND             reduce using rule 41 (boolean -> TRUE .)
    OR              reduce using rule 41 (boolean -> TRUE .)
    BREAK           reduce using rule 41 (boolean -> TRUE .)
    PRINT           reduce using rule 41 (boolean -> TRUE .)
    WHILE           reduce using rule 41 (boolean -> TRUE .)
    FOR             reduce using rule 41 (boolean -> TRUE .)
    FUNCTION        reduce using rule 41 (boolean -> TRUE .)
    RETURN          reduce using rule 41 (boolean -> TRUE .)
    VARIABLE        reduce using rule 41 (boolean -> TRUE .)
    BIT_NEG         reduce using rule 41 (boolean -> TRUE .)
    NOT             reduce using rule 41 (boolean -> TRUE .)
    OPEN_PAREN      reduce using rule 41 (boolean -> TRUE .)
    STRING          reduce using rule 41 (boolean -> TRUE .)
    IF              reduce using rule 41 (boolean -> TRUE .)
    NUM_INT         reduce using rule 41 (boolean -> TRUE .)
    NUM_FLOAT       reduce using rule 41 (boolean -> TRUE .)
    TRUE            reduce using rule 41 (boolean -> TRUE .)
    FALSE           reduce using rule 41 (boolean -> TRUE .)
    $end            reduce using rule 41 (boolean -> TRUE .)
    CLOSE_PAREN     reduce using rule 41 (boolean -> TRUE .)
    SEMICOLON       reduce using rule 41 (boolean -> TRUE .)
    COMMA           reduce using rule 41 (boolean -> TRUE .)
    OPEN_KEY        reduce using rule 41 (boolean -> TRUE .)
    CLOSE_KEY       reduce using rule 41 (boolean -> TRUE .)


state 25

    (42) boolean -> FALSE .

    PLUS            reduce using rule 42 (boolean -> FALSE .)
    MINUS           reduce using rule 42 (boolean -> FALSE .)
    MULT            reduce using rule 42 (boolean -> FALSE .)
    DIV             reduce using rule 42 (boolean -> FALSE .)
    EXP             reduce using rule 42 (boolean -> FALSE .)
    MOD             reduce using rule 42 (boolean -> FALSE .)
    BIT_AND         reduce using rule 42 (boolean -> FALSE .)
    BIT_OR          reduce using rule 42 (boolean -> FALSE .)
    BIT_XOR         reduce using rule 42 (boolean -> FALSE .)
    EQUAL_TO        reduce using rule 42 (boolean -> FALSE .)
    DIFF            reduce using rule 42 (boolean -> FALSE .)
    GREATER_THAN    reduce using rule 42 (boolean -> FALSE .)
    GREATER_THAN_EQUAL reduce using rule 42 (boolean -> FALSE .)
    LESS_THAN       reduce using rule 42 (boolean -> FALSE .)
    LESS_THAN_EQUAL reduce using rule 42 (boolean -> FALSE .)
    AND             reduce using rule 42 (boolean -> FALSE .)
    OR              reduce using rule 42 (boolean -> FALSE .)
    BREAK           reduce using rule 42 (boolean -> FALSE .)
    PRINT           reduce using rule 42 (boolean -> FALSE .)
    WHILE           reduce using rule 42 (boolean -> FALSE .)
    FOR             reduce using rule 42 (boolean -> FALSE .)
    FUNCTION        reduce using rule 42 (boolean -> FALSE .)
    RETURN          reduce using rule 42 (boolean -> FALSE .)
    VARIABLE        reduce using rule 42 (boolean -> FALSE .)
    BIT_NEG         reduce using rule 42 (boolean -> FALSE .)
    NOT             reduce using rule 42 (boolean -> FALSE .)
    OPEN_PAREN      reduce using rule 42 (boolean -> FALSE .)
    STRING          reduce using rule 42 (boolean -> FALSE .)
    IF              reduce using rule 42 (boolean -> FALSE .)
    NUM_INT         reduce using rule 42 (boolean -> FALSE .)
    NUM_FLOAT       reduce using rule 42 (boolean -> FALSE .)
    TRUE            reduce using rule 42 (boolean -> FALSE .)
    FALSE           reduce using rule 42 (boolean -> FALSE .)
    $end            reduce using rule 42 (boolean -> FALSE .)
    CLOSE_PAREN     reduce using rule 42 (boolean -> FALSE .)
    SEMICOLON       reduce using rule 42 (boolean -> FALSE .)
    COMMA           reduce using rule 42 (boolean -> FALSE .)
    OPEN_KEY        reduce using rule 42 (boolean -> FALSE .)
    CLOSE_KEY       reduce using rule 42 (boolean -> FALSE .)


state 26

    (2) statement_list -> statement_list statement .

    BREAK           reduce using rule 2 (statement_list -> statement_list statement .)
    PRINT           reduce using rule 2 (statement_list -> statement_list statement .)
    WHILE           reduce using rule 2 (statement_list -> statement_list statement .)
    FOR             reduce using rule 2 (statement_list -> statement_list statement .)
    FUNCTION        reduce using rule 2 (statement_list -> statement_list statement .)
    RETURN          reduce using rule 2 (statement_list -> statement_list statement .)
    VARIABLE        reduce using rule 2 (statement_list -> statement_list statement .)
    PLUS            reduce using rule 2 (statement_list -> statement_list statement .)
    MINUS           reduce using rule 2 (statement_list -> statement_list statement .)
    BIT_NEG         reduce using rule 2 (statement_list -> statement_list statement .)
    NOT             reduce using rule 2 (statement_list -> statement_list statement .)
    OPEN_PAREN      reduce using rule 2 (statement_list -> statement_list statement .)
    STRING          reduce using rule 2 (statement_list -> statement_list statement .)
    IF              reduce using rule 2 (statement_list -> statement_list statement .)
    NUM_INT         reduce using rule 2 (statement_list -> statement_list statement .)
    NUM_FLOAT       reduce using rule 2 (statement_list -> statement_list statement .)
    TRUE            reduce using rule 2 (statement_list -> statement_list statement .)
    FALSE           reduce using rule 2 (statement_list -> statement_list statement .)
    $end            reduce using rule 2 (statement_list -> statement_list statement .)
    CLOSE_KEY       reduce using rule 2 (statement_list -> statement_list statement .)


state 27

    (8) statement -> variable PLUS_EQ . expression SEMICOLON
    (16) expression -> . variable OPEN_PAREN arguments CLOSE_PAREN
    (19) expression -> . expression PLUS expression
    (20) expression -> . expression MINUS expression
    (21) expression -> . expression MULT expression
    (22) expression -> . expression DIV expression
    (23) expression -> . expression EXP expression
    (24) expression -> . expression MOD expression
    (25) expression -> . expression BIT_AND expression
    (26) expression -> . expression BIT_OR expression
    (27) expression -> . expression BIT_XOR expression
    (28) expression -> . PLUS expression
    (29) expression -> . MINUS expression
    (30) expression -> . BIT_NEG expression
    (31) expression -> . NOT expression
    (32) expression -> . OPEN_PAREN expression CLOSE_PAREN
    (33) expression -> . variable ASSIGN assignable SEMICOLON
    (56) expression -> . primitive
    (57) expression -> . STRING
    (58) expression -> . variable
    (18) variable -> . VARIABLE
    (37) primitive -> . NUM_INT
    (38) primitive -> . NUM_FLOAT
    (39) primitive -> . STRING
    (40) primitive -> . boolean
    (41) boolean -> . TRUE
    (42) boolean -> . FALSE
    (43) boolean -> . expression EQUAL_TO expression
    (44) boolean -> . expression DIFF expression
    (45) boolean -> . expression GREATER_THAN expression
    (46) boolean -> . expression GREATER_THAN_EQUAL expression
    (47) boolean -> . expression LESS_THAN expression
    (48) boolean -> . expression LESS_THAN_EQUAL expression
    (49) boolean -> . expression AND expression
    (50) boolean -> . expression OR expression

    PLUS            shift and go to state 14
    MINUS           shift and go to state 15
    BIT_NEG         shift and go to state 16
    NOT             shift and go to state 17
    OPEN_PAREN      shift and go to state 8
    STRING          shift and go to state 19
    VARIABLE        shift and go to state 13
    NUM_INT         shift and go to state 21
    NUM_FLOAT       shift and go to state 22
    TRUE            shift and go to state 24
    FALSE           shift and go to state 25

    variable                       shift and go to state 52
    expression                     shift and go to state 62
    primitive                      shift and go to state 18
    boolean                        shift and go to state 23

state 28

    (9) statement -> variable MINUS_EQ . expression SEMICOLON
    (16) expression -> . variable OPEN_PAREN arguments CLOSE_PAREN
    (19) expression -> . expression PLUS expression
    (20) expression -> . expression MINUS expression
    (21) expression -> . expression MULT expression
    (22) expression -> . expression DIV expression
    (23) expression -> . expression EXP expression
    (24) expression -> . expression MOD expression
    (25) expression -> . expression BIT_AND expression
    (26) expression -> . expression BIT_OR expression
    (27) expression -> . expression BIT_XOR expression
    (28) expression -> . PLUS expression
    (29) expression -> . MINUS expression
    (30) expression -> . BIT_NEG expression
    (31) expression -> . NOT expression
    (32) expression -> . OPEN_PAREN expression CLOSE_PAREN
    (33) expression -> . variable ASSIGN assignable SEMICOLON
    (56) expression -> . primitive
    (57) expression -> . STRING
    (58) expression -> . variable
    (18) variable -> . VARIABLE
    (37) primitive -> . NUM_INT
    (38) primitive -> . NUM_FLOAT
    (39) primitive -> . STRING
    (40) primitive -> . boolean
    (41) boolean -> . TRUE
    (42) boolean -> . FALSE
    (43) boolean -> . expression EQUAL_TO expression
    (44) boolean -> . expression DIFF expression
    (45) boolean -> . expression GREATER_THAN expression
    (46) boolean -> . expression GREATER_THAN_EQUAL expression
    (47) boolean -> . expression LESS_THAN expression
    (48) boolean -> . expression LESS_THAN_EQUAL expression
    (49) boolean -> . expression AND expression
    (50) boolean -> . expression OR expression

    PLUS            shift and go to state 14
    MINUS           shift and go to state 15
    BIT_NEG         shift and go to state 16
    NOT             shift and go to state 17
    OPEN_PAREN      shift and go to state 8
    STRING          shift and go to state 19
    VARIABLE        shift and go to state 13
    NUM_INT         shift and go to state 21
    NUM_FLOAT       shift and go to state 22
    TRUE            shift and go to state 24
    FALSE           shift and go to state 25

    variable                       shift and go to state 52
    expression                     shift and go to state 63
    primitive                      shift and go to state 18
    boolean                        shift and go to state 23

state 29

    (10) statement -> variable MULT_EQ . expression SEMICOLON
    (16) expression -> . variable OPEN_PAREN arguments CLOSE_PAREN
    (19) expression -> . expression PLUS expression
    (20) expression -> . expression MINUS expression
    (21) expression -> . expression MULT expression
    (22) expression -> . expression DIV expression
    (23) expression -> . expression EXP expression
    (24) expression -> . expression MOD expression
    (25) expression -> . expression BIT_AND expression
    (26) expression -> . expression BIT_OR expression
    (27) expression -> . expression BIT_XOR expression
    (28) expression -> . PLUS expression
    (29) expression -> . MINUS expression
    (30) expression -> . BIT_NEG expression
    (31) expression -> . NOT expression
    (32) expression -> . OPEN_PAREN expression CLOSE_PAREN
    (33) expression -> . variable ASSIGN assignable SEMICOLON
    (56) expression -> . primitive
    (57) expression -> . STRING
    (58) expression -> . variable
    (18) variable -> . VARIABLE
    (37) primitive -> . NUM_INT
    (38) primitive -> . NUM_FLOAT
    (39) primitive -> . STRING
    (40) primitive -> . boolean
    (41) boolean -> . TRUE
    (42) boolean -> . FALSE
    (43) boolean -> . expression EQUAL_TO expression
    (44) boolean -> . expression DIFF expression
    (45) boolean -> . expression GREATER_THAN expression
    (46) boolean -> . expression GREATER_THAN_EQUAL expression
    (47) boolean -> . expression LESS_THAN expression
    (48) boolean -> . expression LESS_THAN_EQUAL expression
    (49) boolean -> . expression AND expression
    (50) boolean -> . expression OR expression

    PLUS            shift and go to state 14
    MINUS           shift and go to state 15
    BIT_NEG         shift and go to state 16
    NOT             shift and go to state 17
    OPEN_PAREN      shift and go to state 8
    STRING          shift and go to state 19
    VARIABLE        shift and go to state 13
    NUM_INT         shift and go to state 21
    NUM_FLOAT       shift and go to state 22
    TRUE            shift and go to state 24
    FALSE           shift and go to state 25

    variable                       shift and go to state 52
    expression                     shift and go to state 64
    primitive                      shift and go to state 18
    boolean                        shift and go to state 23

state 30

    (17) statement -> variable OPEN_PAREN . arguments CLOSE_PAREN SEMICOLON
    (16) expression -> variable OPEN_PAREN . arguments CLOSE_PAREN
    (53) arguments -> . arguments COMMA expression
    (54) arguments -> . expression
    (55) arguments -> .
    (16) expression -> . variable OPEN_PAREN arguments CLOSE_PAREN
    (19) expression -> . expression PLUS expression
    (20) expression -> . expression MINUS expression
    (21) expression -> . expression MULT expression
    (22) expression -> . expression DIV expression
    (23) expression -> . expression EXP expression
    (24) expression -> . expression MOD expression
    (25) expression -> . expression BIT_AND expression
    (26) expression -> . expression BIT_OR expression
    (27) expression -> . expression BIT_XOR expression
    (28) expression -> . PLUS expression
    (29) expression -> . MINUS expression
    (30) expression -> . BIT_NEG expression
    (31) expression -> . NOT expression
    (32) expression -> . OPEN_PAREN expression CLOSE_PAREN
    (33) expression -> . variable ASSIGN assignable SEMICOLON
    (56) expression -> . primitive
    (57) expression -> . STRING
    (58) expression -> . variable
    (18) variable -> . VARIABLE
    (37) primitive -> . NUM_INT
    (38) primitive -> . NUM_FLOAT
    (39) primitive -> . STRING
    (40) primitive -> . boolean
    (41) boolean -> . TRUE
    (42) boolean -> . FALSE
    (43) boolean -> . expression EQUAL_TO expression
    (44) boolean -> . expression DIFF expression
    (45) boolean -> . expression GREATER_THAN expression
    (46) boolean -> . expression GREATER_THAN_EQUAL expression
    (47) boolean -> . expression LESS_THAN expression
    (48) boolean -> . expression LESS_THAN_EQUAL expression
    (49) boolean -> . expression AND expression
    (50) boolean -> . expression OR expression

    CLOSE_PAREN     reduce using rule 55 (arguments -> .)
    COMMA           reduce using rule 55 (arguments -> .)
    PLUS            shift and go to state 14
    MINUS           shift and go to state 15
    BIT_NEG         shift and go to state 16
    NOT             shift and go to state 17
    OPEN_PAREN      shift and go to state 8
    STRING          shift and go to state 19
    VARIABLE        shift and go to state 13
    NUM_INT         shift and go to state 21
    NUM_FLOAT       shift and go to state 22
    TRUE            shift and go to state 24
    FALSE           shift and go to state 25

    variable                       shift and go to state 52
    arguments                      shift and go to state 65
    expression                     shift and go to state 66
    primitive                      shift and go to state 18
    boolean                        shift and go to state 23

state 31

    (33) expression -> variable ASSIGN . assignable SEMICOLON
    (51) assignable -> . primitive
    (52) assignable -> . expression
    (37) primitive -> . NUM_INT
    (38) primitive -> . NUM_FLOAT
    (39) primitive -> . STRING
    (40) primitive -> . boolean
    (16) expression -> . variable OPEN_PAREN arguments CLOSE_PAREN
    (19) expression -> . expression PLUS expression
    (20) expression -> . expression MINUS expression
    (21) expression -> . expression MULT expression
    (22) expression -> . expression DIV expression
    (23) expression -> . expression EXP expression
    (24) expression -> . expression MOD expression
    (25) expression -> . expression BIT_AND expression
    (26) expression -> . expression BIT_OR expression
    (27) expression -> . expression BIT_XOR expression
    (28) expression -> . PLUS expression
    (29) expression -> . MINUS expression
    (30) expression -> . BIT_NEG expression
    (31) expression -> . NOT expression
    (32) expression -> . OPEN_PAREN expression CLOSE_PAREN
    (33) expression -> . variable ASSIGN assignable SEMICOLON
    (56) expression -> . primitive
    (57) expression -> . STRING
    (58) expression -> . variable
    (41) boolean -> . TRUE
    (42) boolean -> . FALSE
    (43) boolean -> . expression EQUAL_TO expression
    (44) boolean -> . expression DIFF expression
    (45) boolean -> . expression GREATER_THAN expression
    (46) boolean -> . expression GREATER_THAN_EQUAL expression
    (47) boolean -> . expression LESS_THAN expression
    (48) boolean -> . expression LESS_THAN_EQUAL expression
    (49) boolean -> . expression AND expression
    (50) boolean -> . expression OR expression
    (18) variable -> . VARIABLE

    NUM_INT         shift and go to state 21
    NUM_FLOAT       shift and go to state 22
    STRING          shift and go to state 70
    PLUS            shift and go to state 14
    MINUS           shift and go to state 15
    BIT_NEG         shift and go to state 16
    NOT             shift and go to state 17
    OPEN_PAREN      shift and go to state 8
    TRUE            shift and go to state 24
    FALSE           shift and go to state 25
    VARIABLE        shift and go to state 13

    variable                       shift and go to state 52
    assignable                     shift and go to state 67
    primitive                      shift and go to state 68
    expression                     shift and go to state 69
    boolean                        shift and go to state 23

state 32

    (19) expression -> expression PLUS . expression
    (16) expression -> . variable OPEN_PAREN arguments CLOSE_PAREN
    (19) expression -> . expression PLUS expression
    (20) expression -> . expression MINUS expression
    (21) expression -> . expression MULT expression
    (22) expression -> . expression DIV expression
    (23) expression -> . expression EXP expression
    (24) expression -> . expression MOD expression
    (25) expression -> . expression BIT_AND expression
    (26) expression -> . expression BIT_OR expression
    (27) expression -> . expression BIT_XOR expression
    (28) expression -> . PLUS expression
    (29) expression -> . MINUS expression
    (30) expression -> . BIT_NEG expression
    (31) expression -> . NOT expression
    (32) expression -> . OPEN_PAREN expression CLOSE_PAREN
    (33) expression -> . variable ASSIGN assignable SEMICOLON
    (56) expression -> . primitive
    (57) expression -> . STRING
    (58) expression -> . variable
    (18) variable -> . VARIABLE
    (37) primitive -> . NUM_INT
    (38) primitive -> . NUM_FLOAT
    (39) primitive -> . STRING
    (40) primitive -> . boolean
    (41) boolean -> . TRUE
    (42) boolean -> . FALSE
    (43) boolean -> . expression EQUAL_TO expression
    (44) boolean -> . expression DIFF expression
    (45) boolean -> . expression GREATER_THAN expression
    (46) boolean -> . expression GREATER_THAN_EQUAL expression
    (47) boolean -> . expression LESS_THAN expression
    (48) boolean -> . expression LESS_THAN_EQUAL expression
    (49) boolean -> . expression AND expression
    (50) boolean -> . expression OR expression

    PLUS            shift and go to state 14
    MINUS           shift and go to state 15
    BIT_NEG         shift and go to state 16
    NOT             shift and go to state 17
    OPEN_PAREN      shift and go to state 8
    STRING          shift and go to state 19
    VARIABLE        shift and go to state 13
    NUM_INT         shift and go to state 21
    NUM_FLOAT       shift and go to state 22
    TRUE            shift and go to state 24
    FALSE           shift and go to state 25

    expression                     shift and go to state 71
    variable                       shift and go to state 52
    primitive                      shift and go to state 18
    boolean                        shift and go to state 23

state 33

    (20) expression -> expression MINUS . expression
    (16) expression -> . variable OPEN_PAREN arguments CLOSE_PAREN
    (19) expression -> . expression PLUS expression
    (20) expression -> . expression MINUS expression
    (21) expression -> . expression MULT expression
    (22) expression -> . expression DIV expression
    (23) expression -> . expression EXP expression
    (24) expression -> . expression MOD expression
    (25) expression -> . expression BIT_AND expression
    (26) expression -> . expression BIT_OR expression
    (27) expression -> . expression BIT_XOR expression
    (28) expression -> . PLUS expression
    (29) expression -> . MINUS expression
    (30) expression -> . BIT_NEG expression
    (31) expression -> . NOT expression
    (32) expression -> . OPEN_PAREN expression CLOSE_PAREN
    (33) expression -> . variable ASSIGN assignable SEMICOLON
    (56) expression -> . primitive
    (57) expression -> . STRING
    (58) expression -> . variable
    (18) variable -> . VARIABLE
    (37) primitive -> . NUM_INT
    (38) primitive -> . NUM_FLOAT
    (39) primitive -> . STRING
    (40) primitive -> . boolean
    (41) boolean -> . TRUE
    (42) boolean -> . FALSE
    (43) boolean -> . expression EQUAL_TO expression
    (44) boolean -> . expression DIFF expression
    (45) boolean -> . expression GREATER_THAN expression
    (46) boolean -> . expression GREATER_THAN_EQUAL expression
    (47) boolean -> . expression LESS_THAN expression
    (48) boolean -> . expression LESS_THAN_EQUAL expression
    (49) boolean -> . expression AND expression
    (50) boolean -> . expression OR expression

    PLUS            shift and go to state 14
    MINUS           shift and go to state 15
    BIT_NEG         shift and go to state 16
    NOT             shift and go to state 17
    OPEN_PAREN      shift and go to state 8
    STRING          shift and go to state 19
    VARIABLE        shift and go to state 13
    NUM_INT         shift and go to state 21
    NUM_FLOAT       shift and go to state 22
    TRUE            shift and go to state 24
    FALSE           shift and go to state 25

    expression                     shift and go to state 72
    variable                       shift and go to state 52
    primitive                      shift and go to state 18
    boolean                        shift and go to state 23

state 34

    (21) expression -> expression MULT . expression
    (16) expression -> . variable OPEN_PAREN arguments CLOSE_PAREN
    (19) expression -> . expression PLUS expression
    (20) expression -> . expression MINUS expression
    (21) expression -> . expression MULT expression
    (22) expression -> . expression DIV expression
    (23) expression -> . expression EXP expression
    (24) expression -> . expression MOD expression
    (25) expression -> . expression BIT_AND expression
    (26) expression -> . expression BIT_OR expression
    (27) expression -> . expression BIT_XOR expression
    (28) expression -> . PLUS expression
    (29) expression -> . MINUS expression
    (30) expression -> . BIT_NEG expression
    (31) expression -> . NOT expression
    (32) expression -> . OPEN_PAREN expression CLOSE_PAREN
    (33) expression -> . variable ASSIGN assignable SEMICOLON
    (56) expression -> . primitive
    (57) expression -> . STRING
    (58) expression -> . variable
    (18) variable -> . VARIABLE
    (37) primitive -> . NUM_INT
    (38) primitive -> . NUM_FLOAT
    (39) primitive -> . STRING
    (40) primitive -> . boolean
    (41) boolean -> . TRUE
    (42) boolean -> . FALSE
    (43) boolean -> . expression EQUAL_TO expression
    (44) boolean -> . expression DIFF expression
    (45) boolean -> . expression GREATER_THAN expression
    (46) boolean -> . expression GREATER_THAN_EQUAL expression
    (47) boolean -> . expression LESS_THAN expression
    (48) boolean -> . expression LESS_THAN_EQUAL expression
    (49) boolean -> . expression AND expression
    (50) boolean -> . expression OR expression

    PLUS            shift and go to state 14
    MINUS           shift and go to state 15
    BIT_NEG         shift and go to state 16
    NOT             shift and go to state 17
    OPEN_PAREN      shift and go to state 8
    STRING          shift and go to state 19
    VARIABLE        shift and go to state 13
    NUM_INT         shift and go to state 21
    NUM_FLOAT       shift and go to state 22
    TRUE            shift and go to state 24
    FALSE           shift and go to state 25

    expression                     shift and go to state 73
    variable                       shift and go to state 52
    primitive                      shift and go to state 18
    boolean                        shift and go to state 23

state 35

    (22) expression -> expression DIV . expression
    (16) expression -> . variable OPEN_PAREN arguments CLOSE_PAREN
    (19) expression -> . expression PLUS expression
    (20) expression -> . expression MINUS expression
    (21) expression -> . expression MULT expression
    (22) expression -> . expression DIV expression
    (23) expression -> . expression EXP expression
    (24) expression -> . expression MOD expression
    (25) expression -> . expression BIT_AND expression
    (26) expression -> . expression BIT_OR expression
    (27) expression -> . expression BIT_XOR expression
    (28) expression -> . PLUS expression
    (29) expression -> . MINUS expression
    (30) expression -> . BIT_NEG expression
    (31) expression -> . NOT expression
    (32) expression -> . OPEN_PAREN expression CLOSE_PAREN
    (33) expression -> . variable ASSIGN assignable SEMICOLON
    (56) expression -> . primitive
    (57) expression -> . STRING
    (58) expression -> . variable
    (18) variable -> . VARIABLE
    (37) primitive -> . NUM_INT
    (38) primitive -> . NUM_FLOAT
    (39) primitive -> . STRING
    (40) primitive -> . boolean
    (41) boolean -> . TRUE
    (42) boolean -> . FALSE
    (43) boolean -> . expression EQUAL_TO expression
    (44) boolean -> . expression DIFF expression
    (45) boolean -> . expression GREATER_THAN expression
    (46) boolean -> . expression GREATER_THAN_EQUAL expression
    (47) boolean -> . expression LESS_THAN expression
    (48) boolean -> . expression LESS_THAN_EQUAL expression
    (49) boolean -> . expression AND expression
    (50) boolean -> . expression OR expression

    PLUS            shift and go to state 14
    MINUS           shift and go to state 15
    BIT_NEG         shift and go to state 16
    NOT             shift and go to state 17
    OPEN_PAREN      shift and go to state 8
    STRING          shift and go to state 19
    VARIABLE        shift and go to state 13
    NUM_INT         shift and go to state 21
    NUM_FLOAT       shift and go to state 22
    TRUE            shift and go to state 24
    FALSE           shift and go to state 25

    expression                     shift and go to state 74
    variable                       shift and go to state 52
    primitive                      shift and go to state 18
    boolean                        shift and go to state 23

state 36

    (23) expression -> expression EXP . expression
    (16) expression -> . variable OPEN_PAREN arguments CLOSE_PAREN
    (19) expression -> . expression PLUS expression
    (20) expression -> . expression MINUS expression
    (21) expression -> . expression MULT expression
    (22) expression -> . expression DIV expression
    (23) expression -> . expression EXP expression
    (24) expression -> . expression MOD expression
    (25) expression -> . expression BIT_AND expression
    (26) expression -> . expression BIT_OR expression
    (27) expression -> . expression BIT_XOR expression
    (28) expression -> . PLUS expression
    (29) expression -> . MINUS expression
    (30) expression -> . BIT_NEG expression
    (31) expression -> . NOT expression
    (32) expression -> . OPEN_PAREN expression CLOSE_PAREN
    (33) expression -> . variable ASSIGN assignable SEMICOLON
    (56) expression -> . primitive
    (57) expression -> . STRING
    (58) expression -> . variable
    (18) variable -> . VARIABLE
    (37) primitive -> . NUM_INT
    (38) primitive -> . NUM_FLOAT
    (39) primitive -> . STRING
    (40) primitive -> . boolean
    (41) boolean -> . TRUE
    (42) boolean -> . FALSE
    (43) boolean -> . expression EQUAL_TO expression
    (44) boolean -> . expression DIFF expression
    (45) boolean -> . expression GREATER_THAN expression
    (46) boolean -> . expression GREATER_THAN_EQUAL expression
    (47) boolean -> . expression LESS_THAN expression
    (48) boolean -> . expression LESS_THAN_EQUAL expression
    (49) boolean -> . expression AND expression
    (50) boolean -> . expression OR expression

    PLUS            shift and go to state 14
    MINUS           shift and go to state 15
    BIT_NEG         shift and go to state 16
    NOT             shift and go to state 17
    OPEN_PAREN      shift and go to state 8
    STRING          shift and go to state 19
    VARIABLE        shift and go to state 13
    NUM_INT         shift and go to state 21
    NUM_FLOAT       shift and go to state 22
    TRUE            shift and go to state 24
    FALSE           shift and go to state 25

    expression                     shift and go to state 75
    variable                       shift and go to state 52
    primitive                      shift and go to state 18
    boolean                        shift and go to state 23

state 37

    (24) expression -> expression MOD . expression
    (16) expression -> . variable OPEN_PAREN arguments CLOSE_PAREN
    (19) expression -> . expression PLUS expression
    (20) expression -> . expression MINUS expression
    (21) expression -> . expression MULT expression
    (22) expression -> . expression DIV expression
    (23) expression -> . expression EXP expression
    (24) expression -> . expression MOD expression
    (25) expression -> . expression BIT_AND expression
    (26) expression -> . expression BIT_OR expression
    (27) expression -> . expression BIT_XOR expression
    (28) expression -> . PLUS expression
    (29) expression -> . MINUS expression
    (30) expression -> . BIT_NEG expression
    (31) expression -> . NOT expression
    (32) expression -> . OPEN_PAREN expression CLOSE_PAREN
    (33) expression -> . variable ASSIGN assignable SEMICOLON
    (56) expression -> . primitive
    (57) expression -> . STRING
    (58) expression -> . variable
    (18) variable -> . VARIABLE
    (37) primitive -> . NUM_INT
    (38) primitive -> . NUM_FLOAT
    (39) primitive -> . STRING
    (40) primitive -> . boolean
    (41) boolean -> . TRUE
    (42) boolean -> . FALSE
    (43) boolean -> . expression EQUAL_TO expression
    (44) boolean -> . expression DIFF expression
    (45) boolean -> . expression GREATER_THAN expression
    (46) boolean -> . expression GREATER_THAN_EQUAL expression
    (47) boolean -> . expression LESS_THAN expression
    (48) boolean -> . expression LESS_THAN_EQUAL expression
    (49) boolean -> . expression AND expression
    (50) boolean -> . expression OR expression

    PLUS            shift and go to state 14
    MINUS           shift and go to state 15
    BIT_NEG         shift and go to state 16
    NOT             shift and go to state 17
    OPEN_PAREN      shift and go to state 8
    STRING          shift and go to state 19
    VARIABLE        shift and go to state 13
    NUM_INT         shift and go to state 21
    NUM_FLOAT       shift and go to state 22
    TRUE            shift and go to state 24
    FALSE           shift and go to state 25

    expression                     shift and go to state 76
    variable                       shift and go to state 52
    primitive                      shift and go to state 18
    boolean                        shift and go to state 23

state 38

    (25) expression -> expression BIT_AND . expression
    (16) expression -> . variable OPEN_PAREN arguments CLOSE_PAREN
    (19) expression -> . expression PLUS expression
    (20) expression -> . expression MINUS expression
    (21) expression -> . expression MULT expression
    (22) expression -> . expression DIV expression
    (23) expression -> . expression EXP expression
    (24) expression -> . expression MOD expression
    (25) expression -> . expression BIT_AND expression
    (26) expression -> . expression BIT_OR expression
    (27) expression -> . expression BIT_XOR expression
    (28) expression -> . PLUS expression
    (29) expression -> . MINUS expression
    (30) expression -> . BIT_NEG expression
    (31) expression -> . NOT expression
    (32) expression -> . OPEN_PAREN expression CLOSE_PAREN
    (33) expression -> . variable ASSIGN assignable SEMICOLON
    (56) expression -> . primitive
    (57) expression -> . STRING
    (58) expression -> . variable
    (18) variable -> . VARIABLE
    (37) primitive -> . NUM_INT
    (38) primitive -> . NUM_FLOAT
    (39) primitive -> . STRING
    (40) primitive -> . boolean
    (41) boolean -> . TRUE
    (42) boolean -> . FALSE
    (43) boolean -> . expression EQUAL_TO expression
    (44) boolean -> . expression DIFF expression
    (45) boolean -> . expression GREATER_THAN expression
    (46) boolean -> . expression GREATER_THAN_EQUAL expression
    (47) boolean -> . expression LESS_THAN expression
    (48) boolean -> . expression LESS_THAN_EQUAL expression
    (49) boolean -> . expression AND expression
    (50) boolean -> . expression OR expression

    PLUS            shift and go to state 14
    MINUS           shift and go to state 15
    BIT_NEG         shift and go to state 16
    NOT             shift and go to state 17
    OPEN_PAREN      shift and go to state 8
    STRING          shift and go to state 19
    VARIABLE        shift and go to state 13
    NUM_INT         shift and go to state 21
    NUM_FLOAT       shift and go to state 22
    TRUE            shift and go to state 24
    FALSE           shift and go to state 25

    expression                     shift and go to state 77
    variable                       shift and go to state 52
    primitive                      shift and go to state 18
    boolean                        shift and go to state 23

state 39

    (26) expression -> expression BIT_OR . expression
    (16) expression -> . variable OPEN_PAREN arguments CLOSE_PAREN
    (19) expression -> . expression PLUS expression
    (20) expression -> . expression MINUS expression
    (21) expression -> . expression MULT expression
    (22) expression -> . expression DIV expression
    (23) expression -> . expression EXP expression
    (24) expression -> . expression MOD expression
    (25) expression -> . expression BIT_AND expression
    (26) expression -> . expression BIT_OR expression
    (27) expression -> . expression BIT_XOR expression
    (28) expression -> . PLUS expression
    (29) expression -> . MINUS expression
    (30) expression -> . BIT_NEG expression
    (31) expression -> . NOT expression
    (32) expression -> . OPEN_PAREN expression CLOSE_PAREN
    (33) expression -> . variable ASSIGN assignable SEMICOLON
    (56) expression -> . primitive
    (57) expression -> . STRING
    (58) expression -> . variable
    (18) variable -> . VARIABLE
    (37) primitive -> . NUM_INT
    (38) primitive -> . NUM_FLOAT
    (39) primitive -> . STRING
    (40) primitive -> . boolean
    (41) boolean -> . TRUE
    (42) boolean -> . FALSE
    (43) boolean -> . expression EQUAL_TO expression
    (44) boolean -> . expression DIFF expression
    (45) boolean -> . expression GREATER_THAN expression
    (46) boolean -> . expression GREATER_THAN_EQUAL expression
    (47) boolean -> . expression LESS_THAN expression
    (48) boolean -> . expression LESS_THAN_EQUAL expression
    (49) boolean -> . expression AND expression
    (50) boolean -> . expression OR expression

    PLUS            shift and go to state 14
    MINUS           shift and go to state 15
    BIT_NEG         shift and go to state 16
    NOT             shift and go to state 17
    OPEN_PAREN      shift and go to state 8
    STRING          shift and go to state 19
    VARIABLE        shift and go to state 13
    NUM_INT         shift and go to state 21
    NUM_FLOAT       shift and go to state 22
    TRUE            shift and go to state 24
    FALSE           shift and go to state 25

    expression                     shift and go to state 78
    variable                       shift and go to state 52
    primitive                      shift and go to state 18
    boolean                        shift and go to state 23

state 40

    (27) expression -> expression BIT_XOR . expression
    (16) expression -> . variable OPEN_PAREN arguments CLOSE_PAREN
    (19) expression -> . expression PLUS expression
    (20) expression -> . expression MINUS expression
    (21) expression -> . expression MULT expression
    (22) expression -> . expression DIV expression
    (23) expression -> . expression EXP expression
    (24) expression -> . expression MOD expression
    (25) expression -> . expression BIT_AND expression
    (26) expression -> . expression BIT_OR expression
    (27) expression -> . expression BIT_XOR expression
    (28) expression -> . PLUS expression
    (29) expression -> . MINUS expression
    (30) expression -> . BIT_NEG expression
    (31) expression -> . NOT expression
    (32) expression -> . OPEN_PAREN expression CLOSE_PAREN
    (33) expression -> . variable ASSIGN assignable SEMICOLON
    (56) expression -> . primitive
    (57) expression -> . STRING
    (58) expression -> . variable
    (18) variable -> . VARIABLE
    (37) primitive -> . NUM_INT
    (38) primitive -> . NUM_FLOAT
    (39) primitive -> . STRING
    (40) primitive -> . boolean
    (41) boolean -> . TRUE
    (42) boolean -> . FALSE
    (43) boolean -> . expression EQUAL_TO expression
    (44) boolean -> . expression DIFF expression
    (45) boolean -> . expression GREATER_THAN expression
    (46) boolean -> . expression GREATER_THAN_EQUAL expression
    (47) boolean -> . expression LESS_THAN expression
    (48) boolean -> . expression LESS_THAN_EQUAL expression
    (49) boolean -> . expression AND expression
    (50) boolean -> . expression OR expression

    PLUS            shift and go to state 14
    MINUS           shift and go to state 15
    BIT_NEG         shift and go to state 16
    NOT             shift and go to state 17
    OPEN_PAREN      shift and go to state 8
    STRING          shift and go to state 19
    VARIABLE        shift and go to state 13
    NUM_INT         shift and go to state 21
    NUM_FLOAT       shift and go to state 22
    TRUE            shift and go to state 24
    FALSE           shift and go to state 25

    expression                     shift and go to state 79
    variable                       shift and go to state 52
    primitive                      shift and go to state 18
    boolean                        shift and go to state 23

state 41

    (43) boolean -> expression EQUAL_TO . expression
    (16) expression -> . variable OPEN_PAREN arguments CLOSE_PAREN
    (19) expression -> . expression PLUS expression
    (20) expression -> . expression MINUS expression
    (21) expression -> . expression MULT expression
    (22) expression -> . expression DIV expression
    (23) expression -> . expression EXP expression
    (24) expression -> . expression MOD expression
    (25) expression -> . expression BIT_AND expression
    (26) expression -> . expression BIT_OR expression
    (27) expression -> . expression BIT_XOR expression
    (28) expression -> . PLUS expression
    (29) expression -> . MINUS expression
    (30) expression -> . BIT_NEG expression
    (31) expression -> . NOT expression
    (32) expression -> . OPEN_PAREN expression CLOSE_PAREN
    (33) expression -> . variable ASSIGN assignable SEMICOLON
    (56) expression -> . primitive
    (57) expression -> . STRING
    (58) expression -> . variable
    (18) variable -> . VARIABLE
    (37) primitive -> . NUM_INT
    (38) primitive -> . NUM_FLOAT
    (39) primitive -> . STRING
    (40) primitive -> . boolean
    (41) boolean -> . TRUE
    (42) boolean -> . FALSE
    (43) boolean -> . expression EQUAL_TO expression
    (44) boolean -> . expression DIFF expression
    (45) boolean -> . expression GREATER_THAN expression
    (46) boolean -> . expression GREATER_THAN_EQUAL expression
    (47) boolean -> . expression LESS_THAN expression
    (48) boolean -> . expression LESS_THAN_EQUAL expression
    (49) boolean -> . expression AND expression
    (50) boolean -> . expression OR expression

    PLUS            shift and go to state 14
    MINUS           shift and go to state 15
    BIT_NEG         shift and go to state 16
    NOT             shift and go to state 17
    OPEN_PAREN      shift and go to state 8
    STRING          shift and go to state 19
    VARIABLE        shift and go to state 13
    NUM_INT         shift and go to state 21
    NUM_FLOAT       shift and go to state 22
    TRUE            shift and go to state 24
    FALSE           shift and go to state 25

    expression                     shift and go to state 80
    variable                       shift and go to state 52
    primitive                      shift and go to state 18
    boolean                        shift and go to state 23

state 42

    (44) boolean -> expression DIFF . expression
    (16) expression -> . variable OPEN_PAREN arguments CLOSE_PAREN
    (19) expression -> . expression PLUS expression
    (20) expression -> . expression MINUS expression
    (21) expression -> . expression MULT expression
    (22) expression -> . expression DIV expression
    (23) expression -> . expression EXP expression
    (24) expression -> . expression MOD expression
    (25) expression -> . expression BIT_AND expression
    (26) expression -> . expression BIT_OR expression
    (27) expression -> . expression BIT_XOR expression
    (28) expression -> . PLUS expression
    (29) expression -> . MINUS expression
    (30) expression -> . BIT_NEG expression
    (31) expression -> . NOT expression
    (32) expression -> . OPEN_PAREN expression CLOSE_PAREN
    (33) expression -> . variable ASSIGN assignable SEMICOLON
    (56) expression -> . primitive
    (57) expression -> . STRING
    (58) expression -> . variable
    (18) variable -> . VARIABLE
    (37) primitive -> . NUM_INT
    (38) primitive -> . NUM_FLOAT
    (39) primitive -> . STRING
    (40) primitive -> . boolean
    (41) boolean -> . TRUE
    (42) boolean -> . FALSE
    (43) boolean -> . expression EQUAL_TO expression
    (44) boolean -> . expression DIFF expression
    (45) boolean -> . expression GREATER_THAN expression
    (46) boolean -> . expression GREATER_THAN_EQUAL expression
    (47) boolean -> . expression LESS_THAN expression
    (48) boolean -> . expression LESS_THAN_EQUAL expression
    (49) boolean -> . expression AND expression
    (50) boolean -> . expression OR expression

    PLUS            shift and go to state 14
    MINUS           shift and go to state 15
    BIT_NEG         shift and go to state 16
    NOT             shift and go to state 17
    OPEN_PAREN      shift and go to state 8
    STRING          shift and go to state 19
    VARIABLE        shift and go to state 13
    NUM_INT         shift and go to state 21
    NUM_FLOAT       shift and go to state 22
    TRUE            shift and go to state 24
    FALSE           shift and go to state 25

    expression                     shift and go to state 81
    variable                       shift and go to state 52
    primitive                      shift and go to state 18
    boolean                        shift and go to state 23

state 43

    (45) boolean -> expression GREATER_THAN . expression
    (16) expression -> . variable OPEN_PAREN arguments CLOSE_PAREN
    (19) expression -> . expression PLUS expression
    (20) expression -> . expression MINUS expression
    (21) expression -> . expression MULT expression
    (22) expression -> . expression DIV expression
    (23) expression -> . expression EXP expression
    (24) expression -> . expression MOD expression
    (25) expression -> . expression BIT_AND expression
    (26) expression -> . expression BIT_OR expression
    (27) expression -> . expression BIT_XOR expression
    (28) expression -> . PLUS expression
    (29) expression -> . MINUS expression
    (30) expression -> . BIT_NEG expression
    (31) expression -> . NOT expression
    (32) expression -> . OPEN_PAREN expression CLOSE_PAREN
    (33) expression -> . variable ASSIGN assignable SEMICOLON
    (56) expression -> . primitive
    (57) expression -> . STRING
    (58) expression -> . variable
    (18) variable -> . VARIABLE
    (37) primitive -> . NUM_INT
    (38) primitive -> . NUM_FLOAT
    (39) primitive -> . STRING
    (40) primitive -> . boolean
    (41) boolean -> . TRUE
    (42) boolean -> . FALSE
    (43) boolean -> . expression EQUAL_TO expression
    (44) boolean -> . expression DIFF expression
    (45) boolean -> . expression GREATER_THAN expression
    (46) boolean -> . expression GREATER_THAN_EQUAL expression
    (47) boolean -> . expression LESS_THAN expression
    (48) boolean -> . expression LESS_THAN_EQUAL expression
    (49) boolean -> . expression AND expression
    (50) boolean -> . expression OR expression

    PLUS            shift and go to state 14
    MINUS           shift and go to state 15
    BIT_NEG         shift and go to state 16
    NOT             shift and go to state 17
    OPEN_PAREN      shift and go to state 8
    STRING          shift and go to state 19
    VARIABLE        shift and go to state 13
    NUM_INT         shift and go to state 21
    NUM_FLOAT       shift and go to state 22
    TRUE            shift and go to state 24
    FALSE           shift and go to state 25

    expression                     shift and go to state 82
    variable                       shift and go to state 52
    primitive                      shift and go to state 18
    boolean                        shift and go to state 23

state 44

    (46) boolean -> expression GREATER_THAN_EQUAL . expression
    (16) expression -> . variable OPEN_PAREN arguments CLOSE_PAREN
    (19) expression -> . expression PLUS expression
    (20) expression -> . expression MINUS expression
    (21) expression -> . expression MULT expression
    (22) expression -> . expression DIV expression
    (23) expression -> . expression EXP expression
    (24) expression -> . expression MOD expression
    (25) expression -> . expression BIT_AND expression
    (26) expression -> . expression BIT_OR expression
    (27) expression -> . expression BIT_XOR expression
    (28) expression -> . PLUS expression
    (29) expression -> . MINUS expression
    (30) expression -> . BIT_NEG expression
    (31) expression -> . NOT expression
    (32) expression -> . OPEN_PAREN expression CLOSE_PAREN
    (33) expression -> . variable ASSIGN assignable SEMICOLON
    (56) expression -> . primitive
    (57) expression -> . STRING
    (58) expression -> . variable
    (18) variable -> . VARIABLE
    (37) primitive -> . NUM_INT
    (38) primitive -> . NUM_FLOAT
    (39) primitive -> . STRING
    (40) primitive -> . boolean
    (41) boolean -> . TRUE
    (42) boolean -> . FALSE
    (43) boolean -> . expression EQUAL_TO expression
    (44) boolean -> . expression DIFF expression
    (45) boolean -> . expression GREATER_THAN expression
    (46) boolean -> . expression GREATER_THAN_EQUAL expression
    (47) boolean -> . expression LESS_THAN expression
    (48) boolean -> . expression LESS_THAN_EQUAL expression
    (49) boolean -> . expression AND expression
    (50) boolean -> . expression OR expression

    PLUS            shift and go to state 14
    MINUS           shift and go to state 15
    BIT_NEG         shift and go to state 16
    NOT             shift and go to state 17
    OPEN_PAREN      shift and go to state 8
    STRING          shift and go to state 19
    VARIABLE        shift and go to state 13
    NUM_INT         shift and go to state 21
    NUM_FLOAT       shift and go to state 22
    TRUE            shift and go to state 24
    FALSE           shift and go to state 25

    expression                     shift and go to state 83
    variable                       shift and go to state 52
    primitive                      shift and go to state 18
    boolean                        shift and go to state 23

state 45

    (47) boolean -> expression LESS_THAN . expression
    (16) expression -> . variable OPEN_PAREN arguments CLOSE_PAREN
    (19) expression -> . expression PLUS expression
    (20) expression -> . expression MINUS expression
    (21) expression -> . expression MULT expression
    (22) expression -> . expression DIV expression
    (23) expression -> . expression EXP expression
    (24) expression -> . expression MOD expression
    (25) expression -> . expression BIT_AND expression
    (26) expression -> . expression BIT_OR expression
    (27) expression -> . expression BIT_XOR expression
    (28) expression -> . PLUS expression
    (29) expression -> . MINUS expression
    (30) expression -> . BIT_NEG expression
    (31) expression -> . NOT expression
    (32) expression -> . OPEN_PAREN expression CLOSE_PAREN
    (33) expression -> . variable ASSIGN assignable SEMICOLON
    (56) expression -> . primitive
    (57) expression -> . STRING
    (58) expression -> . variable
    (18) variable -> . VARIABLE
    (37) primitive -> . NUM_INT
    (38) primitive -> . NUM_FLOAT
    (39) primitive -> . STRING
    (40) primitive -> . boolean
    (41) boolean -> . TRUE
    (42) boolean -> . FALSE
    (43) boolean -> . expression EQUAL_TO expression
    (44) boolean -> . expression DIFF expression
    (45) boolean -> . expression GREATER_THAN expression
    (46) boolean -> . expression GREATER_THAN_EQUAL expression
    (47) boolean -> . expression LESS_THAN expression
    (48) boolean -> . expression LESS_THAN_EQUAL expression
    (49) boolean -> . expression AND expression
    (50) boolean -> . expression OR expression

    PLUS            shift and go to state 14
    MINUS           shift and go to state 15
    BIT_NEG         shift and go to state 16
    NOT             shift and go to state 17
    OPEN_PAREN      shift and go to state 8
    STRING          shift and go to state 19
    VARIABLE        shift and go to state 13
    NUM_INT         shift and go to state 21
    NUM_FLOAT       shift and go to state 22
    TRUE            shift and go to state 24
    FALSE           shift and go to state 25

    expression                     shift and go to state 84
    variable                       shift and go to state 52
    primitive                      shift and go to state 18
    boolean                        shift and go to state 23

state 46

    (48) boolean -> expression LESS_THAN_EQUAL . expression
    (16) expression -> . variable OPEN_PAREN arguments CLOSE_PAREN
    (19) expression -> . expression PLUS expression
    (20) expression -> . expression MINUS expression
    (21) expression -> . expression MULT expression
    (22) expression -> . expression DIV expression
    (23) expression -> . expression EXP expression
    (24) expression -> . expression MOD expression
    (25) expression -> . expression BIT_AND expression
    (26) expression -> . expression BIT_OR expression
    (27) expression -> . expression BIT_XOR expression
    (28) expression -> . PLUS expression
    (29) expression -> . MINUS expression
    (30) expression -> . BIT_NEG expression
    (31) expression -> . NOT expression
    (32) expression -> . OPEN_PAREN expression CLOSE_PAREN
    (33) expression -> . variable ASSIGN assignable SEMICOLON
    (56) expression -> . primitive
    (57) expression -> . STRING
    (58) expression -> . variable
    (18) variable -> . VARIABLE
    (37) primitive -> . NUM_INT
    (38) primitive -> . NUM_FLOAT
    (39) primitive -> . STRING
    (40) primitive -> . boolean
    (41) boolean -> . TRUE
    (42) boolean -> . FALSE
    (43) boolean -> . expression EQUAL_TO expression
    (44) boolean -> . expression DIFF expression
    (45) boolean -> . expression GREATER_THAN expression
    (46) boolean -> . expression GREATER_THAN_EQUAL expression
    (47) boolean -> . expression LESS_THAN expression
    (48) boolean -> . expression LESS_THAN_EQUAL expression
    (49) boolean -> . expression AND expression
    (50) boolean -> . expression OR expression

    PLUS            shift and go to state 14
    MINUS           shift and go to state 15
    BIT_NEG         shift and go to state 16
    NOT             shift and go to state 17
    OPEN_PAREN      shift and go to state 8
    STRING          shift and go to state 19
    VARIABLE        shift and go to state 13
    NUM_INT         shift and go to state 21
    NUM_FLOAT       shift and go to state 22
    TRUE            shift and go to state 24
    FALSE           shift and go to state 25

    expression                     shift and go to state 85
    variable                       shift and go to state 52
    primitive                      shift and go to state 18
    boolean                        shift and go to state 23

state 47

    (49) boolean -> expression AND . expression
    (16) expression -> . variable OPEN_PAREN arguments CLOSE_PAREN
    (19) expression -> . expression PLUS expression
    (20) expression -> . expression MINUS expression
    (21) expression -> . expression MULT expression
    (22) expression -> . expression DIV expression
    (23) expression -> . expression EXP expression
    (24) expression -> . expression MOD expression
    (25) expression -> . expression BIT_AND expression
    (26) expression -> . expression BIT_OR expression
    (27) expression -> . expression BIT_XOR expression
    (28) expression -> . PLUS expression
    (29) expression -> . MINUS expression
    (30) expression -> . BIT_NEG expression
    (31) expression -> . NOT expression
    (32) expression -> . OPEN_PAREN expression CLOSE_PAREN
    (33) expression -> . variable ASSIGN assignable SEMICOLON
    (56) expression -> . primitive
    (57) expression -> . STRING
    (58) expression -> . variable
    (18) variable -> . VARIABLE
    (37) primitive -> . NUM_INT
    (38) primitive -> . NUM_FLOAT
    (39) primitive -> . STRING
    (40) primitive -> . boolean
    (41) boolean -> . TRUE
    (42) boolean -> . FALSE
    (43) boolean -> . expression EQUAL_TO expression
    (44) boolean -> . expression DIFF expression
    (45) boolean -> . expression GREATER_THAN expression
    (46) boolean -> . expression GREATER_THAN_EQUAL expression
    (47) boolean -> . expression LESS_THAN expression
    (48) boolean -> . expression LESS_THAN_EQUAL expression
    (49) boolean -> . expression AND expression
    (50) boolean -> . expression OR expression

    PLUS            shift and go to state 14
    MINUS           shift and go to state 15
    BIT_NEG         shift and go to state 16
    NOT             shift and go to state 17
    OPEN_PAREN      shift and go to state 8
    STRING          shift and go to state 19
    VARIABLE        shift and go to state 13
    NUM_INT         shift and go to state 21
    NUM_FLOAT       shift and go to state 22
    TRUE            shift and go to state 24
    FALSE           shift and go to state 25

    expression                     shift and go to state 86
    variable                       shift and go to state 52
    primitive                      shift and go to state 18
    boolean                        shift and go to state 23

state 48

    (50) boolean -> expression OR . expression
    (16) expression -> . variable OPEN_PAREN arguments CLOSE_PAREN
    (19) expression -> . expression PLUS expression
    (20) expression -> . expression MINUS expression
    (21) expression -> . expression MULT expression
    (22) expression -> . expression DIV expression
    (23) expression -> . expression EXP expression
    (24) expression -> . expression MOD expression
    (25) expression -> . expression BIT_AND expression
    (26) expression -> . expression BIT_OR expression
    (27) expression -> . expression BIT_XOR expression
    (28) expression -> . PLUS expression
    (29) expression -> . MINUS expression
    (30) expression -> . BIT_NEG expression
    (31) expression -> . NOT expression
    (32) expression -> . OPEN_PAREN expression CLOSE_PAREN
    (33) expression -> . variable ASSIGN assignable SEMICOLON
    (56) expression -> . primitive
    (57) expression -> . STRING
    (58) expression -> . variable
    (18) variable -> . VARIABLE
    (37) primitive -> . NUM_INT
    (38) primitive -> . NUM_FLOAT
    (39) primitive -> . STRING
    (40) primitive -> . boolean
    (41) boolean -> . TRUE
    (42) boolean -> . FALSE
    (43) boolean -> . expression EQUAL_TO expression
    (44) boolean -> . expression DIFF expression
    (45) boolean -> . expression GREATER_THAN expression
    (46) boolean -> . expression GREATER_THAN_EQUAL expression
    (47) boolean -> . expression LESS_THAN expression
    (48) boolean -> . expression LESS_THAN_EQUAL expression
    (49) boolean -> . expression AND expression
    (50) boolean -> . expression OR expression

    PLUS            shift and go to state 14
    MINUS           shift and go to state 15
    BIT_NEG         shift and go to state 16
    NOT             shift and go to state 17
    OPEN_PAREN      shift and go to state 8
    STRING          shift and go to state 19
    VARIABLE        shift and go to state 13
    NUM_INT         shift and go to state 21
    NUM_FLOAT       shift and go to state 22
    TRUE            shift and go to state 24
    FALSE           shift and go to state 25

    expression                     shift and go to state 87
    variable                       shift and go to state 52
    primitive                      shift and go to state 18
    boolean                        shift and go to state 23

state 49

    (6) statement -> BREAK SEMICOLON .

    BREAK           reduce using rule 6 (statement -> BREAK SEMICOLON .)
    PRINT           reduce using rule 6 (statement -> BREAK SEMICOLON .)
    WHILE           reduce using rule 6 (statement -> BREAK SEMICOLON .)
    FOR             reduce using rule 6 (statement -> BREAK SEMICOLON .)
    FUNCTION        reduce using rule 6 (statement -> BREAK SEMICOLON .)
    RETURN          reduce using rule 6 (statement -> BREAK SEMICOLON .)
    VARIABLE        reduce using rule 6 (statement -> BREAK SEMICOLON .)
    PLUS            reduce using rule 6 (statement -> BREAK SEMICOLON .)
    MINUS           reduce using rule 6 (statement -> BREAK SEMICOLON .)
    BIT_NEG         reduce using rule 6 (statement -> BREAK SEMICOLON .)
    NOT             reduce using rule 6 (statement -> BREAK SEMICOLON .)
    OPEN_PAREN      reduce using rule 6 (statement -> BREAK SEMICOLON .)
    STRING          reduce using rule 6 (statement -> BREAK SEMICOLON .)
    IF              reduce using rule 6 (statement -> BREAK SEMICOLON .)
    NUM_INT         reduce using rule 6 (statement -> BREAK SEMICOLON .)
    NUM_FLOAT       reduce using rule 6 (statement -> BREAK SEMICOLON .)
    TRUE            reduce using rule 6 (statement -> BREAK SEMICOLON .)
    FALSE           reduce using rule 6 (statement -> BREAK SEMICOLON .)
    $end            reduce using rule 6 (statement -> BREAK SEMICOLON .)
    CLOSE_KEY       reduce using rule 6 (statement -> BREAK SEMICOLON .)


state 50

    (7) statement -> PRINT COLON . OPEN_PAREN arguments CLOSE_PAREN SEMICOLON

    OPEN_PAREN      shift and go to state 88


state 51

    (32) expression -> OPEN_PAREN expression . CLOSE_PAREN
    (19) expression -> expression . PLUS expression
    (20) expression -> expression . MINUS expression
    (21) expression -> expression . MULT expression
    (22) expression -> expression . DIV expression
    (23) expression -> expression . EXP expression
    (24) expression -> expression . MOD expression
    (25) expression -> expression . BIT_AND expression
    (26) expression -> expression . BIT_OR expression
    (27) expression -> expression . BIT_XOR expression
    (43) boolean -> expression . EQUAL_TO expression
    (44) boolean -> expression . DIFF expression
    (45) boolean -> expression . GREATER_THAN expression
    (46) boolean -> expression . GREATER_THAN_EQUAL expression
    (47) boolean -> expression . LESS_THAN expression
    (48) boolean -> expression . LESS_THAN_EQUAL expression
    (49) boolean -> expression . AND expression
    (50) boolean -> expression . OR expression

    CLOSE_PAREN     shift and go to state 89
    PLUS            shift and go to state 32
    MINUS           shift and go to state 33
    MULT            shift and go to state 34
    DIV             shift and go to state 35
    EXP             shift and go to state 36
    MOD             shift and go to state 37
    BIT_AND         shift and go to state 38
    BIT_OR          shift and go to state 39
    BIT_XOR         shift and go to state 40
    EQUAL_TO        shift and go to state 41
    DIFF            shift and go to state 42
    GREATER_THAN    shift and go to state 43
    GREATER_THAN_EQUAL shift and go to state 44
    LESS_THAN       shift and go to state 45
    LESS_THAN_EQUAL shift and go to state 46
    AND             shift and go to state 47
    OR              shift and go to state 48


state 52

    (16) expression -> variable . OPEN_PAREN arguments CLOSE_PAREN
    (33) expression -> variable . ASSIGN assignable SEMICOLON
    (58) expression -> variable .

  ! shift/reduce conflict for OPEN_PAREN resolved as shift
    OPEN_PAREN      shift and go to state 90
    ASSIGN          shift and go to state 31
    CLOSE_PAREN     reduce using rule 58 (expression -> variable .)
    PLUS            reduce using rule 58 (expression -> variable .)
    MINUS           reduce using rule 58 (expression -> variable .)
    MULT            reduce using rule 58 (expression -> variable .)
    DIV             reduce using rule 58 (expression -> variable .)
    EXP             reduce using rule 58 (expression -> variable .)
    MOD             reduce using rule 58 (expression -> variable .)
    BIT_AND         reduce using rule 58 (expression -> variable .)
    BIT_OR          reduce using rule 58 (expression -> variable .)
    BIT_XOR         reduce using rule 58 (expression -> variable .)
    EQUAL_TO        reduce using rule 58 (expression -> variable .)
    DIFF            reduce using rule 58 (expression -> variable .)
    GREATER_THAN    reduce using rule 58 (expression -> variable .)
    GREATER_THAN_EQUAL reduce using rule 58 (expression -> variable .)
    LESS_THAN       reduce using rule 58 (expression -> variable .)
    LESS_THAN_EQUAL reduce using rule 58 (expression -> variable .)
    AND             reduce using rule 58 (expression -> variable .)
    OR              reduce using rule 58 (expression -> variable .)
    SEMICOLON       reduce using rule 58 (expression -> variable .)
    BREAK           reduce using rule 58 (expression -> variable .)
    PRINT           reduce using rule 58 (expression -> variable .)
    WHILE           reduce using rule 58 (expression -> variable .)
    FOR             reduce using rule 58 (expression -> variable .)
    FUNCTION        reduce using rule 58 (expression -> variable .)
    RETURN          reduce using rule 58 (expression -> variable .)
    VARIABLE        reduce using rule 58 (expression -> variable .)
    BIT_NEG         reduce using rule 58 (expression -> variable .)
    NOT             reduce using rule 58 (expression -> variable .)
    STRING          reduce using rule 58 (expression -> variable .)
    IF              reduce using rule 58 (expression -> variable .)
    NUM_INT         reduce using rule 58 (expression -> variable .)
    NUM_FLOAT       reduce using rule 58 (expression -> variable .)
    TRUE            reduce using rule 58 (expression -> variable .)
    FALSE           reduce using rule 58 (expression -> variable .)
    $end            reduce using rule 58 (expression -> variable .)
    COMMA           reduce using rule 58 (expression -> variable .)
    OPEN_KEY        reduce using rule 58 (expression -> variable .)
    CLOSE_KEY       reduce using rule 58 (expression -> variable .)

  ! OPEN_PAREN      [ reduce using rule 58 (expression -> variable .) ]


state 53

    (11) statement -> WHILE COLON . expression OPEN_KEY statement_list CLOSE_KEY
    (16) expression -> . variable OPEN_PAREN arguments CLOSE_PAREN
    (19) expression -> . expression PLUS expression
    (20) expression -> . expression MINUS expression
    (21) expression -> . expression MULT expression
    (22) expression -> . expression DIV expression
    (23) expression -> . expression EXP expression
    (24) expression -> . expression MOD expression
    (25) expression -> . expression BIT_AND expression
    (26) expression -> . expression BIT_OR expression
    (27) expression -> . expression BIT_XOR expression
    (28) expression -> . PLUS expression
    (29) expression -> . MINUS expression
    (30) expression -> . BIT_NEG expression
    (31) expression -> . NOT expression
    (32) expression -> . OPEN_PAREN expression CLOSE_PAREN
    (33) expression -> . variable ASSIGN assignable SEMICOLON
    (56) expression -> . primitive
    (57) expression -> . STRING
    (58) expression -> . variable
    (18) variable -> . VARIABLE
    (37) primitive -> . NUM_INT
    (38) primitive -> . NUM_FLOAT
    (39) primitive -> . STRING
    (40) primitive -> . boolean
    (41) boolean -> . TRUE
    (42) boolean -> . FALSE
    (43) boolean -> . expression EQUAL_TO expression
    (44) boolean -> . expression DIFF expression
    (45) boolean -> . expression GREATER_THAN expression
    (46) boolean -> . expression GREATER_THAN_EQUAL expression
    (47) boolean -> . expression LESS_THAN expression
    (48) boolean -> . expression LESS_THAN_EQUAL expression
    (49) boolean -> . expression AND expression
    (50) boolean -> . expression OR expression

    PLUS            shift and go to state 14
    MINUS           shift and go to state 15
    BIT_NEG         shift and go to state 16
    NOT             shift and go to state 17
    OPEN_PAREN      shift and go to state 8
    STRING          shift and go to state 19
    VARIABLE        shift and go to state 13
    NUM_INT         shift and go to state 21
    NUM_FLOAT       shift and go to state 22
    TRUE            shift and go to state 24
    FALSE           shift and go to state 25

    expression                     shift and go to state 91
    variable                       shift and go to state 52
    primitive                      shift and go to state 18
    boolean                        shift and go to state 23

state 54

    (12) statement -> FOR COLON . OPEN_KEY statement_list CLOSE_KEY

    OPEN_KEY        shift and go to state 92


state 55

    (13) statement -> FUNCTION variable . OPEN_PAREN arguments CLOSE_PAREN OPEN_KEY statement_list CLOSE_KEY
    (14) statement -> FUNCTION variable . OPEN_KEY statement_list CLOSE_KEY

    OPEN_PAREN      shift and go to state 93
    OPEN_KEY        shift and go to state 94


state 56

    (15) statement -> RETURN expression . SEMICOLON
    (19) expression -> expression . PLUS expression
    (20) expression -> expression . MINUS expression
    (21) expression -> expression . MULT expression
    (22) expression -> expression . DIV expression
    (23) expression -> expression . EXP expression
    (24) expression -> expression . MOD expression
    (25) expression -> expression . BIT_AND expression
    (26) expression -> expression . BIT_OR expression
    (27) expression -> expression . BIT_XOR expression
    (43) boolean -> expression . EQUAL_TO expression
    (44) boolean -> expression . DIFF expression
    (45) boolean -> expression . GREATER_THAN expression
    (46) boolean -> expression . GREATER_THAN_EQUAL expression
    (47) boolean -> expression . LESS_THAN expression
    (48) boolean -> expression . LESS_THAN_EQUAL expression
    (49) boolean -> expression . AND expression
    (50) boolean -> expression . OR expression

    SEMICOLON       shift and go to state 95
    PLUS            shift and go to state 32
    MINUS           shift and go to state 33
    MULT            shift and go to state 34
    DIV             shift and go to state 35
    EXP             shift and go to state 36
    MOD             shift and go to state 37
    BIT_AND         shift and go to state 38
    BIT_OR          shift and go to state 39
    BIT_XOR         shift and go to state 40
    EQUAL_TO        shift and go to state 41
    DIFF            shift and go to state 42
    GREATER_THAN    shift and go to state 43
    GREATER_THAN_EQUAL shift and go to state 44
    LESS_THAN       shift and go to state 45
    LESS_THAN_EQUAL shift and go to state 46
    AND             shift and go to state 47
    OR              shift and go to state 48


state 57

    (28) expression -> PLUS expression .
    (19) expression -> expression . PLUS expression
    (20) expression -> expression . MINUS expression
    (21) expression -> expression . MULT expression
    (22) expression -> expression . DIV expression
    (23) expression -> expression . EXP expression
    (24) expression -> expression . MOD expression
    (25) expression -> expression . BIT_AND expression
    (26) expression -> expression . BIT_OR expression
    (27) expression -> expression . BIT_XOR expression
    (43) boolean -> expression . EQUAL_TO expression
    (44) boolean -> expression . DIFF expression
    (45) boolean -> expression . GREATER_THAN expression
    (46) boolean -> expression . GREATER_THAN_EQUAL expression
    (47) boolean -> expression . LESS_THAN expression
    (48) boolean -> expression . LESS_THAN_EQUAL expression
    (49) boolean -> expression . AND expression
    (50) boolean -> expression . OR expression

    PLUS            reduce using rule 28 (expression -> PLUS expression .)
    MINUS           reduce using rule 28 (expression -> PLUS expression .)
    MULT            reduce using rule 28 (expression -> PLUS expression .)
    DIV             reduce using rule 28 (expression -> PLUS expression .)
    EXP             reduce using rule 28 (expression -> PLUS expression .)
    MOD             reduce using rule 28 (expression -> PLUS expression .)
    BIT_AND         reduce using rule 28 (expression -> PLUS expression .)
    BIT_OR          reduce using rule 28 (expression -> PLUS expression .)
    BIT_XOR         reduce using rule 28 (expression -> PLUS expression .)
    EQUAL_TO        reduce using rule 28 (expression -> PLUS expression .)
    DIFF            reduce using rule 28 (expression -> PLUS expression .)
    GREATER_THAN    reduce using rule 28 (expression -> PLUS expression .)
    GREATER_THAN_EQUAL reduce using rule 28 (expression -> PLUS expression .)
    LESS_THAN       reduce using rule 28 (expression -> PLUS expression .)
    LESS_THAN_EQUAL reduce using rule 28 (expression -> PLUS expression .)
    AND             reduce using rule 28 (expression -> PLUS expression .)
    OR              reduce using rule 28 (expression -> PLUS expression .)
    BREAK           reduce using rule 28 (expression -> PLUS expression .)
    PRINT           reduce using rule 28 (expression -> PLUS expression .)
    WHILE           reduce using rule 28 (expression -> PLUS expression .)
    FOR             reduce using rule 28 (expression -> PLUS expression .)
    FUNCTION        reduce using rule 28 (expression -> PLUS expression .)
    RETURN          reduce using rule 28 (expression -> PLUS expression .)
    VARIABLE        reduce using rule 28 (expression -> PLUS expression .)
    BIT_NEG         reduce using rule 28 (expression -> PLUS expression .)
    NOT             reduce using rule 28 (expression -> PLUS expression .)
    OPEN_PAREN      reduce using rule 28 (expression -> PLUS expression .)
    STRING          reduce using rule 28 (expression -> PLUS expression .)
    IF              reduce using rule 28 (expression -> PLUS expression .)
    NUM_INT         reduce using rule 28 (expression -> PLUS expression .)
    NUM_FLOAT       reduce using rule 28 (expression -> PLUS expression .)
    TRUE            reduce using rule 28 (expression -> PLUS expression .)
    FALSE           reduce using rule 28 (expression -> PLUS expression .)
    $end            reduce using rule 28 (expression -> PLUS expression .)
    CLOSE_PAREN     reduce using rule 28 (expression -> PLUS expression .)
    SEMICOLON       reduce using rule 28 (expression -> PLUS expression .)
    COMMA           reduce using rule 28 (expression -> PLUS expression .)
    OPEN_KEY        reduce using rule 28 (expression -> PLUS expression .)
    CLOSE_KEY       reduce using rule 28 (expression -> PLUS expression .)

  ! PLUS            [ shift and go to state 32 ]
  ! MINUS           [ shift and go to state 33 ]
  ! MULT            [ shift and go to state 34 ]
  ! DIV             [ shift and go to state 35 ]
  ! EXP             [ shift and go to state 36 ]
  ! MOD             [ shift and go to state 37 ]
  ! BIT_AND         [ shift and go to state 38 ]
  ! BIT_OR          [ shift and go to state 39 ]
  ! BIT_XOR         [ shift and go to state 40 ]
  ! EQUAL_TO        [ shift and go to state 41 ]
  ! DIFF            [ shift and go to state 42 ]
  ! GREATER_THAN    [ shift and go to state 43 ]
  ! GREATER_THAN_EQUAL [ shift and go to state 44 ]
  ! LESS_THAN       [ shift and go to state 45 ]
  ! LESS_THAN_EQUAL [ shift and go to state 46 ]
  ! AND             [ shift and go to state 47 ]
  ! OR              [ shift and go to state 48 ]


state 58

    (29) expression -> MINUS expression .
    (19) expression -> expression . PLUS expression
    (20) expression -> expression . MINUS expression
    (21) expression -> expression . MULT expression
    (22) expression -> expression . DIV expression
    (23) expression -> expression . EXP expression
    (24) expression -> expression . MOD expression
    (25) expression -> expression . BIT_AND expression
    (26) expression -> expression . BIT_OR expression
    (27) expression -> expression . BIT_XOR expression
    (43) boolean -> expression . EQUAL_TO expression
    (44) boolean -> expression . DIFF expression
    (45) boolean -> expression . GREATER_THAN expression
    (46) boolean -> expression . GREATER_THAN_EQUAL expression
    (47) boolean -> expression . LESS_THAN expression
    (48) boolean -> expression . LESS_THAN_EQUAL expression
    (49) boolean -> expression . AND expression
    (50) boolean -> expression . OR expression

    PLUS            reduce using rule 29 (expression -> MINUS expression .)
    MINUS           reduce using rule 29 (expression -> MINUS expression .)
    MULT            reduce using rule 29 (expression -> MINUS expression .)
    DIV             reduce using rule 29 (expression -> MINUS expression .)
    EXP             reduce using rule 29 (expression -> MINUS expression .)
    MOD             reduce using rule 29 (expression -> MINUS expression .)
    BIT_AND         reduce using rule 29 (expression -> MINUS expression .)
    BIT_OR          reduce using rule 29 (expression -> MINUS expression .)
    BIT_XOR         reduce using rule 29 (expression -> MINUS expression .)
    EQUAL_TO        reduce using rule 29 (expression -> MINUS expression .)
    DIFF            reduce using rule 29 (expression -> MINUS expression .)
    GREATER_THAN    reduce using rule 29 (expression -> MINUS expression .)
    GREATER_THAN_EQUAL reduce using rule 29 (expression -> MINUS expression .)
    LESS_THAN       reduce using rule 29 (expression -> MINUS expression .)
    LESS_THAN_EQUAL reduce using rule 29 (expression -> MINUS expression .)
    AND             reduce using rule 29 (expression -> MINUS expression .)
    OR              reduce using rule 29 (expression -> MINUS expression .)
    BREAK           reduce using rule 29 (expression -> MINUS expression .)
    PRINT           reduce using rule 29 (expression -> MINUS expression .)
    WHILE           reduce using rule 29 (expression -> MINUS expression .)
    FOR             reduce using rule 29 (expression -> MINUS expression .)
    FUNCTION        reduce using rule 29 (expression -> MINUS expression .)
    RETURN          reduce using rule 29 (expression -> MINUS expression .)
    VARIABLE        reduce using rule 29 (expression -> MINUS expression .)
    BIT_NEG         reduce using rule 29 (expression -> MINUS expression .)
    NOT             reduce using rule 29 (expression -> MINUS expression .)
    OPEN_PAREN      reduce using rule 29 (expression -> MINUS expression .)
    STRING          reduce using rule 29 (expression -> MINUS expression .)
    IF              reduce using rule 29 (expression -> MINUS expression .)
    NUM_INT         reduce using rule 29 (expression -> MINUS expression .)
    NUM_FLOAT       reduce using rule 29 (expression -> MINUS expression .)
    TRUE            reduce using rule 29 (expression -> MINUS expression .)
    FALSE           reduce using rule 29 (expression -> MINUS expression .)
    $end            reduce using rule 29 (expression -> MINUS expression .)
    CLOSE_PAREN     reduce using rule 29 (expression -> MINUS expression .)
    SEMICOLON       reduce using rule 29 (expression -> MINUS expression .)
    COMMA           reduce using rule 29 (expression -> MINUS expression .)
    OPEN_KEY        reduce using rule 29 (expression -> MINUS expression .)
    CLOSE_KEY       reduce using rule 29 (expression -> MINUS expression .)

  ! PLUS            [ shift and go to state 32 ]
  ! MINUS           [ shift and go to state 33 ]
  ! MULT            [ shift and go to state 34 ]
  ! DIV             [ shift and go to state 35 ]
  ! EXP             [ shift and go to state 36 ]
  ! MOD             [ shift and go to state 37 ]
  ! BIT_AND         [ shift and go to state 38 ]
  ! BIT_OR          [ shift and go to state 39 ]
  ! BIT_XOR         [ shift and go to state 40 ]
  ! EQUAL_TO        [ shift and go to state 41 ]
  ! DIFF            [ shift and go to state 42 ]
  ! GREATER_THAN    [ shift and go to state 43 ]
  ! GREATER_THAN_EQUAL [ shift and go to state 44 ]
  ! LESS_THAN       [ shift and go to state 45 ]
  ! LESS_THAN_EQUAL [ shift and go to state 46 ]
  ! AND             [ shift and go to state 47 ]
  ! OR              [ shift and go to state 48 ]


state 59

    (30) expression -> BIT_NEG expression .
    (19) expression -> expression . PLUS expression
    (20) expression -> expression . MINUS expression
    (21) expression -> expression . MULT expression
    (22) expression -> expression . DIV expression
    (23) expression -> expression . EXP expression
    (24) expression -> expression . MOD expression
    (25) expression -> expression . BIT_AND expression
    (26) expression -> expression . BIT_OR expression
    (27) expression -> expression . BIT_XOR expression
    (43) boolean -> expression . EQUAL_TO expression
    (44) boolean -> expression . DIFF expression
    (45) boolean -> expression . GREATER_THAN expression
    (46) boolean -> expression . GREATER_THAN_EQUAL expression
    (47) boolean -> expression . LESS_THAN expression
    (48) boolean -> expression . LESS_THAN_EQUAL expression
    (49) boolean -> expression . AND expression
    (50) boolean -> expression . OR expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULT resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for EXP resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for BIT_AND resolved as shift
  ! shift/reduce conflict for BIT_OR resolved as shift
  ! shift/reduce conflict for BIT_XOR resolved as shift
  ! shift/reduce conflict for EQUAL_TO resolved as shift
  ! shift/reduce conflict for DIFF resolved as shift
  ! shift/reduce conflict for GREATER_THAN resolved as shift
  ! shift/reduce conflict for GREATER_THAN_EQUAL resolved as shift
  ! shift/reduce conflict for LESS_THAN resolved as shift
  ! shift/reduce conflict for LESS_THAN_EQUAL resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    BREAK           reduce using rule 30 (expression -> BIT_NEG expression .)
    PRINT           reduce using rule 30 (expression -> BIT_NEG expression .)
    WHILE           reduce using rule 30 (expression -> BIT_NEG expression .)
    FOR             reduce using rule 30 (expression -> BIT_NEG expression .)
    FUNCTION        reduce using rule 30 (expression -> BIT_NEG expression .)
    RETURN          reduce using rule 30 (expression -> BIT_NEG expression .)
    VARIABLE        reduce using rule 30 (expression -> BIT_NEG expression .)
    BIT_NEG         reduce using rule 30 (expression -> BIT_NEG expression .)
    NOT             reduce using rule 30 (expression -> BIT_NEG expression .)
    OPEN_PAREN      reduce using rule 30 (expression -> BIT_NEG expression .)
    STRING          reduce using rule 30 (expression -> BIT_NEG expression .)
    IF              reduce using rule 30 (expression -> BIT_NEG expression .)
    NUM_INT         reduce using rule 30 (expression -> BIT_NEG expression .)
    NUM_FLOAT       reduce using rule 30 (expression -> BIT_NEG expression .)
    TRUE            reduce using rule 30 (expression -> BIT_NEG expression .)
    FALSE           reduce using rule 30 (expression -> BIT_NEG expression .)
    $end            reduce using rule 30 (expression -> BIT_NEG expression .)
    CLOSE_PAREN     reduce using rule 30 (expression -> BIT_NEG expression .)
    SEMICOLON       reduce using rule 30 (expression -> BIT_NEG expression .)
    COMMA           reduce using rule 30 (expression -> BIT_NEG expression .)
    OPEN_KEY        reduce using rule 30 (expression -> BIT_NEG expression .)
    CLOSE_KEY       reduce using rule 30 (expression -> BIT_NEG expression .)
    PLUS            shift and go to state 32
    MINUS           shift and go to state 33
    MULT            shift and go to state 34
    DIV             shift and go to state 35
    EXP             shift and go to state 36
    MOD             shift and go to state 37
    BIT_AND         shift and go to state 38
    BIT_OR          shift and go to state 39
    BIT_XOR         shift and go to state 40
    EQUAL_TO        shift and go to state 41
    DIFF            shift and go to state 42
    GREATER_THAN    shift and go to state 43
    GREATER_THAN_EQUAL shift and go to state 44
    LESS_THAN       shift and go to state 45
    LESS_THAN_EQUAL shift and go to state 46
    AND             shift and go to state 47
    OR              shift and go to state 48

  ! PLUS            [ reduce using rule 30 (expression -> BIT_NEG expression .) ]
  ! MINUS           [ reduce using rule 30 (expression -> BIT_NEG expression .) ]
  ! MULT            [ reduce using rule 30 (expression -> BIT_NEG expression .) ]
  ! DIV             [ reduce using rule 30 (expression -> BIT_NEG expression .) ]
  ! EXP             [ reduce using rule 30 (expression -> BIT_NEG expression .) ]
  ! MOD             [ reduce using rule 30 (expression -> BIT_NEG expression .) ]
  ! BIT_AND         [ reduce using rule 30 (expression -> BIT_NEG expression .) ]
  ! BIT_OR          [ reduce using rule 30 (expression -> BIT_NEG expression .) ]
  ! BIT_XOR         [ reduce using rule 30 (expression -> BIT_NEG expression .) ]
  ! EQUAL_TO        [ reduce using rule 30 (expression -> BIT_NEG expression .) ]
  ! DIFF            [ reduce using rule 30 (expression -> BIT_NEG expression .) ]
  ! GREATER_THAN    [ reduce using rule 30 (expression -> BIT_NEG expression .) ]
  ! GREATER_THAN_EQUAL [ reduce using rule 30 (expression -> BIT_NEG expression .) ]
  ! LESS_THAN       [ reduce using rule 30 (expression -> BIT_NEG expression .) ]
  ! LESS_THAN_EQUAL [ reduce using rule 30 (expression -> BIT_NEG expression .) ]
  ! AND             [ reduce using rule 30 (expression -> BIT_NEG expression .) ]
  ! OR              [ reduce using rule 30 (expression -> BIT_NEG expression .) ]


state 60

    (31) expression -> NOT expression .
    (19) expression -> expression . PLUS expression
    (20) expression -> expression . MINUS expression
    (21) expression -> expression . MULT expression
    (22) expression -> expression . DIV expression
    (23) expression -> expression . EXP expression
    (24) expression -> expression . MOD expression
    (25) expression -> expression . BIT_AND expression
    (26) expression -> expression . BIT_OR expression
    (27) expression -> expression . BIT_XOR expression
    (43) boolean -> expression . EQUAL_TO expression
    (44) boolean -> expression . DIFF expression
    (45) boolean -> expression . GREATER_THAN expression
    (46) boolean -> expression . GREATER_THAN_EQUAL expression
    (47) boolean -> expression . LESS_THAN expression
    (48) boolean -> expression . LESS_THAN_EQUAL expression
    (49) boolean -> expression . AND expression
    (50) boolean -> expression . OR expression

    BIT_AND         reduce using rule 31 (expression -> NOT expression .)
    BIT_OR          reduce using rule 31 (expression -> NOT expression .)
    BIT_XOR         reduce using rule 31 (expression -> NOT expression .)
    EQUAL_TO        reduce using rule 31 (expression -> NOT expression .)
    DIFF            reduce using rule 31 (expression -> NOT expression .)
    GREATER_THAN    reduce using rule 31 (expression -> NOT expression .)
    GREATER_THAN_EQUAL reduce using rule 31 (expression -> NOT expression .)
    LESS_THAN       reduce using rule 31 (expression -> NOT expression .)
    LESS_THAN_EQUAL reduce using rule 31 (expression -> NOT expression .)
    AND             reduce using rule 31 (expression -> NOT expression .)
    OR              reduce using rule 31 (expression -> NOT expression .)
    BREAK           reduce using rule 31 (expression -> NOT expression .)
    PRINT           reduce using rule 31 (expression -> NOT expression .)
    WHILE           reduce using rule 31 (expression -> NOT expression .)
    FOR             reduce using rule 31 (expression -> NOT expression .)
    FUNCTION        reduce using rule 31 (expression -> NOT expression .)
    RETURN          reduce using rule 31 (expression -> NOT expression .)
    VARIABLE        reduce using rule 31 (expression -> NOT expression .)
    BIT_NEG         reduce using rule 31 (expression -> NOT expression .)
    NOT             reduce using rule 31 (expression -> NOT expression .)
    OPEN_PAREN      reduce using rule 31 (expression -> NOT expression .)
    STRING          reduce using rule 31 (expression -> NOT expression .)
    IF              reduce using rule 31 (expression -> NOT expression .)
    NUM_INT         reduce using rule 31 (expression -> NOT expression .)
    NUM_FLOAT       reduce using rule 31 (expression -> NOT expression .)
    TRUE            reduce using rule 31 (expression -> NOT expression .)
    FALSE           reduce using rule 31 (expression -> NOT expression .)
    $end            reduce using rule 31 (expression -> NOT expression .)
    CLOSE_PAREN     reduce using rule 31 (expression -> NOT expression .)
    SEMICOLON       reduce using rule 31 (expression -> NOT expression .)
    COMMA           reduce using rule 31 (expression -> NOT expression .)
    OPEN_KEY        reduce using rule 31 (expression -> NOT expression .)
    CLOSE_KEY       reduce using rule 31 (expression -> NOT expression .)
    PLUS            shift and go to state 32
    MINUS           shift and go to state 33
    MULT            shift and go to state 34
    DIV             shift and go to state 35
    EXP             shift and go to state 36
    MOD             shift and go to state 37

  ! PLUS            [ reduce using rule 31 (expression -> NOT expression .) ]
  ! MINUS           [ reduce using rule 31 (expression -> NOT expression .) ]
  ! MULT            [ reduce using rule 31 (expression -> NOT expression .) ]
  ! DIV             [ reduce using rule 31 (expression -> NOT expression .) ]
  ! EXP             [ reduce using rule 31 (expression -> NOT expression .) ]
  ! MOD             [ reduce using rule 31 (expression -> NOT expression .) ]
  ! BIT_AND         [ shift and go to state 38 ]
  ! BIT_OR          [ shift and go to state 39 ]
  ! BIT_XOR         [ shift and go to state 40 ]
  ! EQUAL_TO        [ shift and go to state 41 ]
  ! DIFF            [ shift and go to state 42 ]
  ! GREATER_THAN    [ shift and go to state 43 ]
  ! GREATER_THAN_EQUAL [ shift and go to state 44 ]
  ! LESS_THAN       [ shift and go to state 45 ]
  ! LESS_THAN_EQUAL [ shift and go to state 46 ]
  ! AND             [ shift and go to state 47 ]
  ! OR              [ shift and go to state 48 ]


state 61

    (34) if_statement -> IF COLON . expression OPEN_KEY statement_list CLOSE_KEY
    (35) if_statement -> IF COLON . expression OPEN_KEY statement_list CLOSE_KEY ELSE COLON OPEN_KEY statement_list CLOSE_KEY
    (36) if_statement -> IF COLON . expression OPEN_KEY statement_list CLOSE_KEY ELSE COLON if_statement
    (16) expression -> . variable OPEN_PAREN arguments CLOSE_PAREN
    (19) expression -> . expression PLUS expression
    (20) expression -> . expression MINUS expression
    (21) expression -> . expression MULT expression
    (22) expression -> . expression DIV expression
    (23) expression -> . expression EXP expression
    (24) expression -> . expression MOD expression
    (25) expression -> . expression BIT_AND expression
    (26) expression -> . expression BIT_OR expression
    (27) expression -> . expression BIT_XOR expression
    (28) expression -> . PLUS expression
    (29) expression -> . MINUS expression
    (30) expression -> . BIT_NEG expression
    (31) expression -> . NOT expression
    (32) expression -> . OPEN_PAREN expression CLOSE_PAREN
    (33) expression -> . variable ASSIGN assignable SEMICOLON
    (56) expression -> . primitive
    (57) expression -> . STRING
    (58) expression -> . variable
    (18) variable -> . VARIABLE
    (37) primitive -> . NUM_INT
    (38) primitive -> . NUM_FLOAT
    (39) primitive -> . STRING
    (40) primitive -> . boolean
    (41) boolean -> . TRUE
    (42) boolean -> . FALSE
    (43) boolean -> . expression EQUAL_TO expression
    (44) boolean -> . expression DIFF expression
    (45) boolean -> . expression GREATER_THAN expression
    (46) boolean -> . expression GREATER_THAN_EQUAL expression
    (47) boolean -> . expression LESS_THAN expression
    (48) boolean -> . expression LESS_THAN_EQUAL expression
    (49) boolean -> . expression AND expression
    (50) boolean -> . expression OR expression

    PLUS            shift and go to state 14
    MINUS           shift and go to state 15
    BIT_NEG         shift and go to state 16
    NOT             shift and go to state 17
    OPEN_PAREN      shift and go to state 8
    STRING          shift and go to state 19
    VARIABLE        shift and go to state 13
    NUM_INT         shift and go to state 21
    NUM_FLOAT       shift and go to state 22
    TRUE            shift and go to state 24
    FALSE           shift and go to state 25

    expression                     shift and go to state 96
    variable                       shift and go to state 52
    primitive                      shift and go to state 18
    boolean                        shift and go to state 23

state 62

    (8) statement -> variable PLUS_EQ expression . SEMICOLON
    (19) expression -> expression . PLUS expression
    (20) expression -> expression . MINUS expression
    (21) expression -> expression . MULT expression
    (22) expression -> expression . DIV expression
    (23) expression -> expression . EXP expression
    (24) expression -> expression . MOD expression
    (25) expression -> expression . BIT_AND expression
    (26) expression -> expression . BIT_OR expression
    (27) expression -> expression . BIT_XOR expression
    (43) boolean -> expression . EQUAL_TO expression
    (44) boolean -> expression . DIFF expression
    (45) boolean -> expression . GREATER_THAN expression
    (46) boolean -> expression . GREATER_THAN_EQUAL expression
    (47) boolean -> expression . LESS_THAN expression
    (48) boolean -> expression . LESS_THAN_EQUAL expression
    (49) boolean -> expression . AND expression
    (50) boolean -> expression . OR expression

    SEMICOLON       shift and go to state 97
    PLUS            shift and go to state 32
    MINUS           shift and go to state 33
    MULT            shift and go to state 34
    DIV             shift and go to state 35
    EXP             shift and go to state 36
    MOD             shift and go to state 37
    BIT_AND         shift and go to state 38
    BIT_OR          shift and go to state 39
    BIT_XOR         shift and go to state 40
    EQUAL_TO        shift and go to state 41
    DIFF            shift and go to state 42
    GREATER_THAN    shift and go to state 43
    GREATER_THAN_EQUAL shift and go to state 44
    LESS_THAN       shift and go to state 45
    LESS_THAN_EQUAL shift and go to state 46
    AND             shift and go to state 47
    OR              shift and go to state 48


state 63

    (9) statement -> variable MINUS_EQ expression . SEMICOLON
    (19) expression -> expression . PLUS expression
    (20) expression -> expression . MINUS expression
    (21) expression -> expression . MULT expression
    (22) expression -> expression . DIV expression
    (23) expression -> expression . EXP expression
    (24) expression -> expression . MOD expression
    (25) expression -> expression . BIT_AND expression
    (26) expression -> expression . BIT_OR expression
    (27) expression -> expression . BIT_XOR expression
    (43) boolean -> expression . EQUAL_TO expression
    (44) boolean -> expression . DIFF expression
    (45) boolean -> expression . GREATER_THAN expression
    (46) boolean -> expression . GREATER_THAN_EQUAL expression
    (47) boolean -> expression . LESS_THAN expression
    (48) boolean -> expression . LESS_THAN_EQUAL expression
    (49) boolean -> expression . AND expression
    (50) boolean -> expression . OR expression

    SEMICOLON       shift and go to state 98
    PLUS            shift and go to state 32
    MINUS           shift and go to state 33
    MULT            shift and go to state 34
    DIV             shift and go to state 35
    EXP             shift and go to state 36
    MOD             shift and go to state 37
    BIT_AND         shift and go to state 38
    BIT_OR          shift and go to state 39
    BIT_XOR         shift and go to state 40
    EQUAL_TO        shift and go to state 41
    DIFF            shift and go to state 42
    GREATER_THAN    shift and go to state 43
    GREATER_THAN_EQUAL shift and go to state 44
    LESS_THAN       shift and go to state 45
    LESS_THAN_EQUAL shift and go to state 46
    AND             shift and go to state 47
    OR              shift and go to state 48


state 64

    (10) statement -> variable MULT_EQ expression . SEMICOLON
    (19) expression -> expression . PLUS expression
    (20) expression -> expression . MINUS expression
    (21) expression -> expression . MULT expression
    (22) expression -> expression . DIV expression
    (23) expression -> expression . EXP expression
    (24) expression -> expression . MOD expression
    (25) expression -> expression . BIT_AND expression
    (26) expression -> expression . BIT_OR expression
    (27) expression -> expression . BIT_XOR expression
    (43) boolean -> expression . EQUAL_TO expression
    (44) boolean -> expression . DIFF expression
    (45) boolean -> expression . GREATER_THAN expression
    (46) boolean -> expression . GREATER_THAN_EQUAL expression
    (47) boolean -> expression . LESS_THAN expression
    (48) boolean -> expression . LESS_THAN_EQUAL expression
    (49) boolean -> expression . AND expression
    (50) boolean -> expression . OR expression

    SEMICOLON       shift and go to state 99
    PLUS            shift and go to state 32
    MINUS           shift and go to state 33
    MULT            shift and go to state 34
    DIV             shift and go to state 35
    EXP             shift and go to state 36
    MOD             shift and go to state 37
    BIT_AND         shift and go to state 38
    BIT_OR          shift and go to state 39
    BIT_XOR         shift and go to state 40
    EQUAL_TO        shift and go to state 41
    DIFF            shift and go to state 42
    GREATER_THAN    shift and go to state 43
    GREATER_THAN_EQUAL shift and go to state 44
    LESS_THAN       shift and go to state 45
    LESS_THAN_EQUAL shift and go to state 46
    AND             shift and go to state 47
    OR              shift and go to state 48


state 65

    (17) statement -> variable OPEN_PAREN arguments . CLOSE_PAREN SEMICOLON
    (16) expression -> variable OPEN_PAREN arguments . CLOSE_PAREN
    (53) arguments -> arguments . COMMA expression

    CLOSE_PAREN     shift and go to state 100
    COMMA           shift and go to state 101


state 66

    (54) arguments -> expression .
    (19) expression -> expression . PLUS expression
    (20) expression -> expression . MINUS expression
    (21) expression -> expression . MULT expression
    (22) expression -> expression . DIV expression
    (23) expression -> expression . EXP expression
    (24) expression -> expression . MOD expression
    (25) expression -> expression . BIT_AND expression
    (26) expression -> expression . BIT_OR expression
    (27) expression -> expression . BIT_XOR expression
    (43) boolean -> expression . EQUAL_TO expression
    (44) boolean -> expression . DIFF expression
    (45) boolean -> expression . GREATER_THAN expression
    (46) boolean -> expression . GREATER_THAN_EQUAL expression
    (47) boolean -> expression . LESS_THAN expression
    (48) boolean -> expression . LESS_THAN_EQUAL expression
    (49) boolean -> expression . AND expression
    (50) boolean -> expression . OR expression

    CLOSE_PAREN     reduce using rule 54 (arguments -> expression .)
    COMMA           reduce using rule 54 (arguments -> expression .)
    PLUS            shift and go to state 32
    MINUS           shift and go to state 33
    MULT            shift and go to state 34
    DIV             shift and go to state 35
    EXP             shift and go to state 36
    MOD             shift and go to state 37
    BIT_AND         shift and go to state 38
    BIT_OR          shift and go to state 39
    BIT_XOR         shift and go to state 40
    EQUAL_TO        shift and go to state 41
    DIFF            shift and go to state 42
    GREATER_THAN    shift and go to state 43
    GREATER_THAN_EQUAL shift and go to state 44
    LESS_THAN       shift and go to state 45
    LESS_THAN_EQUAL shift and go to state 46
    AND             shift and go to state 47
    OR              shift and go to state 48


state 67

    (33) expression -> variable ASSIGN assignable . SEMICOLON

    SEMICOLON       shift and go to state 102


state 68

    (51) assignable -> primitive .
    (56) expression -> primitive .

  ! reduce/reduce conflict for SEMICOLON resolved using rule 51 (assignable -> primitive .)
    SEMICOLON       reduce using rule 51 (assignable -> primitive .)
    PLUS            reduce using rule 56 (expression -> primitive .)
    MINUS           reduce using rule 56 (expression -> primitive .)
    MULT            reduce using rule 56 (expression -> primitive .)
    DIV             reduce using rule 56 (expression -> primitive .)
    EXP             reduce using rule 56 (expression -> primitive .)
    MOD             reduce using rule 56 (expression -> primitive .)
    BIT_AND         reduce using rule 56 (expression -> primitive .)
    BIT_OR          reduce using rule 56 (expression -> primitive .)
    BIT_XOR         reduce using rule 56 (expression -> primitive .)
    EQUAL_TO        reduce using rule 56 (expression -> primitive .)
    DIFF            reduce using rule 56 (expression -> primitive .)
    GREATER_THAN    reduce using rule 56 (expression -> primitive .)
    GREATER_THAN_EQUAL reduce using rule 56 (expression -> primitive .)
    LESS_THAN       reduce using rule 56 (expression -> primitive .)
    LESS_THAN_EQUAL reduce using rule 56 (expression -> primitive .)
    AND             reduce using rule 56 (expression -> primitive .)
    OR              reduce using rule 56 (expression -> primitive .)

  ! SEMICOLON       [ reduce using rule 56 (expression -> primitive .) ]


state 69

    (52) assignable -> expression .
    (19) expression -> expression . PLUS expression
    (20) expression -> expression . MINUS expression
    (21) expression -> expression . MULT expression
    (22) expression -> expression . DIV expression
    (23) expression -> expression . EXP expression
    (24) expression -> expression . MOD expression
    (25) expression -> expression . BIT_AND expression
    (26) expression -> expression . BIT_OR expression
    (27) expression -> expression . BIT_XOR expression
    (43) boolean -> expression . EQUAL_TO expression
    (44) boolean -> expression . DIFF expression
    (45) boolean -> expression . GREATER_THAN expression
    (46) boolean -> expression . GREATER_THAN_EQUAL expression
    (47) boolean -> expression . LESS_THAN expression
    (48) boolean -> expression . LESS_THAN_EQUAL expression
    (49) boolean -> expression . AND expression
    (50) boolean -> expression . OR expression

    SEMICOLON       reduce using rule 52 (assignable -> expression .)
    PLUS            shift and go to state 32
    MINUS           shift and go to state 33
    MULT            shift and go to state 34
    DIV             shift and go to state 35
    EXP             shift and go to state 36
    MOD             shift and go to state 37
    BIT_AND         shift and go to state 38
    BIT_OR          shift and go to state 39
    BIT_XOR         shift and go to state 40
    EQUAL_TO        shift and go to state 41
    DIFF            shift and go to state 42
    GREATER_THAN    shift and go to state 43
    GREATER_THAN_EQUAL shift and go to state 44
    LESS_THAN       shift and go to state 45
    LESS_THAN_EQUAL shift and go to state 46
    AND             shift and go to state 47
    OR              shift and go to state 48


state 70

    (39) primitive -> STRING .
    (57) expression -> STRING .

  ! reduce/reduce conflict for PLUS resolved using rule 39 (primitive -> STRING .)
  ! reduce/reduce conflict for MINUS resolved using rule 39 (primitive -> STRING .)
  ! reduce/reduce conflict for MULT resolved using rule 39 (primitive -> STRING .)
  ! reduce/reduce conflict for DIV resolved using rule 39 (primitive -> STRING .)
  ! reduce/reduce conflict for EXP resolved using rule 39 (primitive -> STRING .)
  ! reduce/reduce conflict for MOD resolved using rule 39 (primitive -> STRING .)
  ! reduce/reduce conflict for BIT_AND resolved using rule 39 (primitive -> STRING .)
  ! reduce/reduce conflict for BIT_OR resolved using rule 39 (primitive -> STRING .)
  ! reduce/reduce conflict for BIT_XOR resolved using rule 39 (primitive -> STRING .)
  ! reduce/reduce conflict for EQUAL_TO resolved using rule 39 (primitive -> STRING .)
  ! reduce/reduce conflict for DIFF resolved using rule 39 (primitive -> STRING .)
  ! reduce/reduce conflict for GREATER_THAN resolved using rule 39 (primitive -> STRING .)
  ! reduce/reduce conflict for GREATER_THAN_EQUAL resolved using rule 39 (primitive -> STRING .)
  ! reduce/reduce conflict for LESS_THAN resolved using rule 39 (primitive -> STRING .)
  ! reduce/reduce conflict for LESS_THAN_EQUAL resolved using rule 39 (primitive -> STRING .)
  ! reduce/reduce conflict for AND resolved using rule 39 (primitive -> STRING .)
  ! reduce/reduce conflict for OR resolved using rule 39 (primitive -> STRING .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 39 (primitive -> STRING .)
    SEMICOLON       reduce using rule 39 (primitive -> STRING .)
    PLUS            reduce using rule 39 (primitive -> STRING .)
    MINUS           reduce using rule 39 (primitive -> STRING .)
    MULT            reduce using rule 39 (primitive -> STRING .)
    DIV             reduce using rule 39 (primitive -> STRING .)
    EXP             reduce using rule 39 (primitive -> STRING .)
    MOD             reduce using rule 39 (primitive -> STRING .)
    BIT_AND         reduce using rule 39 (primitive -> STRING .)
    BIT_OR          reduce using rule 39 (primitive -> STRING .)
    BIT_XOR         reduce using rule 39 (primitive -> STRING .)
    EQUAL_TO        reduce using rule 39 (primitive -> STRING .)
    DIFF            reduce using rule 39 (primitive -> STRING .)
    GREATER_THAN    reduce using rule 39 (primitive -> STRING .)
    GREATER_THAN_EQUAL reduce using rule 39 (primitive -> STRING .)
    LESS_THAN       reduce using rule 39 (primitive -> STRING .)
    LESS_THAN_EQUAL reduce using rule 39 (primitive -> STRING .)
    AND             reduce using rule 39 (primitive -> STRING .)
    OR              reduce using rule 39 (primitive -> STRING .)

  ! PLUS            [ reduce using rule 57 (expression -> STRING .) ]
  ! MINUS           [ reduce using rule 57 (expression -> STRING .) ]
  ! MULT            [ reduce using rule 57 (expression -> STRING .) ]
  ! DIV             [ reduce using rule 57 (expression -> STRING .) ]
  ! EXP             [ reduce using rule 57 (expression -> STRING .) ]
  ! MOD             [ reduce using rule 57 (expression -> STRING .) ]
  ! BIT_AND         [ reduce using rule 57 (expression -> STRING .) ]
  ! BIT_OR          [ reduce using rule 57 (expression -> STRING .) ]
  ! BIT_XOR         [ reduce using rule 57 (expression -> STRING .) ]
  ! EQUAL_TO        [ reduce using rule 57 (expression -> STRING .) ]
  ! DIFF            [ reduce using rule 57 (expression -> STRING .) ]
  ! GREATER_THAN    [ reduce using rule 57 (expression -> STRING .) ]
  ! GREATER_THAN_EQUAL [ reduce using rule 57 (expression -> STRING .) ]
  ! LESS_THAN       [ reduce using rule 57 (expression -> STRING .) ]
  ! LESS_THAN_EQUAL [ reduce using rule 57 (expression -> STRING .) ]
  ! AND             [ reduce using rule 57 (expression -> STRING .) ]
  ! OR              [ reduce using rule 57 (expression -> STRING .) ]
  ! SEMICOLON       [ reduce using rule 57 (expression -> STRING .) ]


state 71

    (19) expression -> expression PLUS expression .
    (19) expression -> expression . PLUS expression
    (20) expression -> expression . MINUS expression
    (21) expression -> expression . MULT expression
    (22) expression -> expression . DIV expression
    (23) expression -> expression . EXP expression
    (24) expression -> expression . MOD expression
    (25) expression -> expression . BIT_AND expression
    (26) expression -> expression . BIT_OR expression
    (27) expression -> expression . BIT_XOR expression
    (43) boolean -> expression . EQUAL_TO expression
    (44) boolean -> expression . DIFF expression
    (45) boolean -> expression . GREATER_THAN expression
    (46) boolean -> expression . GREATER_THAN_EQUAL expression
    (47) boolean -> expression . LESS_THAN expression
    (48) boolean -> expression . LESS_THAN_EQUAL expression
    (49) boolean -> expression . AND expression
    (50) boolean -> expression . OR expression

    PLUS            reduce using rule 19 (expression -> expression PLUS expression .)
    MINUS           reduce using rule 19 (expression -> expression PLUS expression .)
    BIT_AND         reduce using rule 19 (expression -> expression PLUS expression .)
    BIT_OR          reduce using rule 19 (expression -> expression PLUS expression .)
    BIT_XOR         reduce using rule 19 (expression -> expression PLUS expression .)
    EQUAL_TO        reduce using rule 19 (expression -> expression PLUS expression .)
    DIFF            reduce using rule 19 (expression -> expression PLUS expression .)
    GREATER_THAN    reduce using rule 19 (expression -> expression PLUS expression .)
    GREATER_THAN_EQUAL reduce using rule 19 (expression -> expression PLUS expression .)
    LESS_THAN       reduce using rule 19 (expression -> expression PLUS expression .)
    LESS_THAN_EQUAL reduce using rule 19 (expression -> expression PLUS expression .)
    AND             reduce using rule 19 (expression -> expression PLUS expression .)
    OR              reduce using rule 19 (expression -> expression PLUS expression .)
    BREAK           reduce using rule 19 (expression -> expression PLUS expression .)
    PRINT           reduce using rule 19 (expression -> expression PLUS expression .)
    WHILE           reduce using rule 19 (expression -> expression PLUS expression .)
    FOR             reduce using rule 19 (expression -> expression PLUS expression .)
    FUNCTION        reduce using rule 19 (expression -> expression PLUS expression .)
    RETURN          reduce using rule 19 (expression -> expression PLUS expression .)
    VARIABLE        reduce using rule 19 (expression -> expression PLUS expression .)
    BIT_NEG         reduce using rule 19 (expression -> expression PLUS expression .)
    NOT             reduce using rule 19 (expression -> expression PLUS expression .)
    OPEN_PAREN      reduce using rule 19 (expression -> expression PLUS expression .)
    STRING          reduce using rule 19 (expression -> expression PLUS expression .)
    IF              reduce using rule 19 (expression -> expression PLUS expression .)
    NUM_INT         reduce using rule 19 (expression -> expression PLUS expression .)
    NUM_FLOAT       reduce using rule 19 (expression -> expression PLUS expression .)
    TRUE            reduce using rule 19 (expression -> expression PLUS expression .)
    FALSE           reduce using rule 19 (expression -> expression PLUS expression .)
    $end            reduce using rule 19 (expression -> expression PLUS expression .)
    CLOSE_PAREN     reduce using rule 19 (expression -> expression PLUS expression .)
    SEMICOLON       reduce using rule 19 (expression -> expression PLUS expression .)
    COMMA           reduce using rule 19 (expression -> expression PLUS expression .)
    OPEN_KEY        reduce using rule 19 (expression -> expression PLUS expression .)
    CLOSE_KEY       reduce using rule 19 (expression -> expression PLUS expression .)
    MULT            shift and go to state 34
    DIV             shift and go to state 35
    EXP             shift and go to state 36
    MOD             shift and go to state 37

  ! MULT            [ reduce using rule 19 (expression -> expression PLUS expression .) ]
  ! DIV             [ reduce using rule 19 (expression -> expression PLUS expression .) ]
  ! EXP             [ reduce using rule 19 (expression -> expression PLUS expression .) ]
  ! MOD             [ reduce using rule 19 (expression -> expression PLUS expression .) ]
  ! PLUS            [ shift and go to state 32 ]
  ! MINUS           [ shift and go to state 33 ]
  ! BIT_AND         [ shift and go to state 38 ]
  ! BIT_OR          [ shift and go to state 39 ]
  ! BIT_XOR         [ shift and go to state 40 ]
  ! EQUAL_TO        [ shift and go to state 41 ]
  ! DIFF            [ shift and go to state 42 ]
  ! GREATER_THAN    [ shift and go to state 43 ]
  ! GREATER_THAN_EQUAL [ shift and go to state 44 ]
  ! LESS_THAN       [ shift and go to state 45 ]
  ! LESS_THAN_EQUAL [ shift and go to state 46 ]
  ! AND             [ shift and go to state 47 ]
  ! OR              [ shift and go to state 48 ]


state 72

    (20) expression -> expression MINUS expression .
    (19) expression -> expression . PLUS expression
    (20) expression -> expression . MINUS expression
    (21) expression -> expression . MULT expression
    (22) expression -> expression . DIV expression
    (23) expression -> expression . EXP expression
    (24) expression -> expression . MOD expression
    (25) expression -> expression . BIT_AND expression
    (26) expression -> expression . BIT_OR expression
    (27) expression -> expression . BIT_XOR expression
    (43) boolean -> expression . EQUAL_TO expression
    (44) boolean -> expression . DIFF expression
    (45) boolean -> expression . GREATER_THAN expression
    (46) boolean -> expression . GREATER_THAN_EQUAL expression
    (47) boolean -> expression . LESS_THAN expression
    (48) boolean -> expression . LESS_THAN_EQUAL expression
    (49) boolean -> expression . AND expression
    (50) boolean -> expression . OR expression

    PLUS            reduce using rule 20 (expression -> expression MINUS expression .)
    MINUS           reduce using rule 20 (expression -> expression MINUS expression .)
    BIT_AND         reduce using rule 20 (expression -> expression MINUS expression .)
    BIT_OR          reduce using rule 20 (expression -> expression MINUS expression .)
    BIT_XOR         reduce using rule 20 (expression -> expression MINUS expression .)
    EQUAL_TO        reduce using rule 20 (expression -> expression MINUS expression .)
    DIFF            reduce using rule 20 (expression -> expression MINUS expression .)
    GREATER_THAN    reduce using rule 20 (expression -> expression MINUS expression .)
    GREATER_THAN_EQUAL reduce using rule 20 (expression -> expression MINUS expression .)
    LESS_THAN       reduce using rule 20 (expression -> expression MINUS expression .)
    LESS_THAN_EQUAL reduce using rule 20 (expression -> expression MINUS expression .)
    AND             reduce using rule 20 (expression -> expression MINUS expression .)
    OR              reduce using rule 20 (expression -> expression MINUS expression .)
    BREAK           reduce using rule 20 (expression -> expression MINUS expression .)
    PRINT           reduce using rule 20 (expression -> expression MINUS expression .)
    WHILE           reduce using rule 20 (expression -> expression MINUS expression .)
    FOR             reduce using rule 20 (expression -> expression MINUS expression .)
    FUNCTION        reduce using rule 20 (expression -> expression MINUS expression .)
    RETURN          reduce using rule 20 (expression -> expression MINUS expression .)
    VARIABLE        reduce using rule 20 (expression -> expression MINUS expression .)
    BIT_NEG         reduce using rule 20 (expression -> expression MINUS expression .)
    NOT             reduce using rule 20 (expression -> expression MINUS expression .)
    OPEN_PAREN      reduce using rule 20 (expression -> expression MINUS expression .)
    STRING          reduce using rule 20 (expression -> expression MINUS expression .)
    IF              reduce using rule 20 (expression -> expression MINUS expression .)
    NUM_INT         reduce using rule 20 (expression -> expression MINUS expression .)
    NUM_FLOAT       reduce using rule 20 (expression -> expression MINUS expression .)
    TRUE            reduce using rule 20 (expression -> expression MINUS expression .)
    FALSE           reduce using rule 20 (expression -> expression MINUS expression .)
    $end            reduce using rule 20 (expression -> expression MINUS expression .)
    CLOSE_PAREN     reduce using rule 20 (expression -> expression MINUS expression .)
    SEMICOLON       reduce using rule 20 (expression -> expression MINUS expression .)
    COMMA           reduce using rule 20 (expression -> expression MINUS expression .)
    OPEN_KEY        reduce using rule 20 (expression -> expression MINUS expression .)
    CLOSE_KEY       reduce using rule 20 (expression -> expression MINUS expression .)
    MULT            shift and go to state 34
    DIV             shift and go to state 35
    EXP             shift and go to state 36
    MOD             shift and go to state 37

  ! MULT            [ reduce using rule 20 (expression -> expression MINUS expression .) ]
  ! DIV             [ reduce using rule 20 (expression -> expression MINUS expression .) ]
  ! EXP             [ reduce using rule 20 (expression -> expression MINUS expression .) ]
  ! MOD             [ reduce using rule 20 (expression -> expression MINUS expression .) ]
  ! PLUS            [ shift and go to state 32 ]
  ! MINUS           [ shift and go to state 33 ]
  ! BIT_AND         [ shift and go to state 38 ]
  ! BIT_OR          [ shift and go to state 39 ]
  ! BIT_XOR         [ shift and go to state 40 ]
  ! EQUAL_TO        [ shift and go to state 41 ]
  ! DIFF            [ shift and go to state 42 ]
  ! GREATER_THAN    [ shift and go to state 43 ]
  ! GREATER_THAN_EQUAL [ shift and go to state 44 ]
  ! LESS_THAN       [ shift and go to state 45 ]
  ! LESS_THAN_EQUAL [ shift and go to state 46 ]
  ! AND             [ shift and go to state 47 ]
  ! OR              [ shift and go to state 48 ]


state 73

    (21) expression -> expression MULT expression .
    (19) expression -> expression . PLUS expression
    (20) expression -> expression . MINUS expression
    (21) expression -> expression . MULT expression
    (22) expression -> expression . DIV expression
    (23) expression -> expression . EXP expression
    (24) expression -> expression . MOD expression
    (25) expression -> expression . BIT_AND expression
    (26) expression -> expression . BIT_OR expression
    (27) expression -> expression . BIT_XOR expression
    (43) boolean -> expression . EQUAL_TO expression
    (44) boolean -> expression . DIFF expression
    (45) boolean -> expression . GREATER_THAN expression
    (46) boolean -> expression . GREATER_THAN_EQUAL expression
    (47) boolean -> expression . LESS_THAN expression
    (48) boolean -> expression . LESS_THAN_EQUAL expression
    (49) boolean -> expression . AND expression
    (50) boolean -> expression . OR expression

    PLUS            reduce using rule 21 (expression -> expression MULT expression .)
    MINUS           reduce using rule 21 (expression -> expression MULT expression .)
    MULT            reduce using rule 21 (expression -> expression MULT expression .)
    DIV             reduce using rule 21 (expression -> expression MULT expression .)
    BIT_AND         reduce using rule 21 (expression -> expression MULT expression .)
    BIT_OR          reduce using rule 21 (expression -> expression MULT expression .)
    BIT_XOR         reduce using rule 21 (expression -> expression MULT expression .)
    EQUAL_TO        reduce using rule 21 (expression -> expression MULT expression .)
    DIFF            reduce using rule 21 (expression -> expression MULT expression .)
    GREATER_THAN    reduce using rule 21 (expression -> expression MULT expression .)
    GREATER_THAN_EQUAL reduce using rule 21 (expression -> expression MULT expression .)
    LESS_THAN       reduce using rule 21 (expression -> expression MULT expression .)
    LESS_THAN_EQUAL reduce using rule 21 (expression -> expression MULT expression .)
    AND             reduce using rule 21 (expression -> expression MULT expression .)
    OR              reduce using rule 21 (expression -> expression MULT expression .)
    BREAK           reduce using rule 21 (expression -> expression MULT expression .)
    PRINT           reduce using rule 21 (expression -> expression MULT expression .)
    WHILE           reduce using rule 21 (expression -> expression MULT expression .)
    FOR             reduce using rule 21 (expression -> expression MULT expression .)
    FUNCTION        reduce using rule 21 (expression -> expression MULT expression .)
    RETURN          reduce using rule 21 (expression -> expression MULT expression .)
    VARIABLE        reduce using rule 21 (expression -> expression MULT expression .)
    BIT_NEG         reduce using rule 21 (expression -> expression MULT expression .)
    NOT             reduce using rule 21 (expression -> expression MULT expression .)
    OPEN_PAREN      reduce using rule 21 (expression -> expression MULT expression .)
    STRING          reduce using rule 21 (expression -> expression MULT expression .)
    IF              reduce using rule 21 (expression -> expression MULT expression .)
    NUM_INT         reduce using rule 21 (expression -> expression MULT expression .)
    NUM_FLOAT       reduce using rule 21 (expression -> expression MULT expression .)
    TRUE            reduce using rule 21 (expression -> expression MULT expression .)
    FALSE           reduce using rule 21 (expression -> expression MULT expression .)
    $end            reduce using rule 21 (expression -> expression MULT expression .)
    CLOSE_PAREN     reduce using rule 21 (expression -> expression MULT expression .)
    SEMICOLON       reduce using rule 21 (expression -> expression MULT expression .)
    COMMA           reduce using rule 21 (expression -> expression MULT expression .)
    OPEN_KEY        reduce using rule 21 (expression -> expression MULT expression .)
    CLOSE_KEY       reduce using rule 21 (expression -> expression MULT expression .)
    EXP             shift and go to state 36
    MOD             shift and go to state 37

  ! EXP             [ reduce using rule 21 (expression -> expression MULT expression .) ]
  ! MOD             [ reduce using rule 21 (expression -> expression MULT expression .) ]
  ! PLUS            [ shift and go to state 32 ]
  ! MINUS           [ shift and go to state 33 ]
  ! MULT            [ shift and go to state 34 ]
  ! DIV             [ shift and go to state 35 ]
  ! BIT_AND         [ shift and go to state 38 ]
  ! BIT_OR          [ shift and go to state 39 ]
  ! BIT_XOR         [ shift and go to state 40 ]
  ! EQUAL_TO        [ shift and go to state 41 ]
  ! DIFF            [ shift and go to state 42 ]
  ! GREATER_THAN    [ shift and go to state 43 ]
  ! GREATER_THAN_EQUAL [ shift and go to state 44 ]
  ! LESS_THAN       [ shift and go to state 45 ]
  ! LESS_THAN_EQUAL [ shift and go to state 46 ]
  ! AND             [ shift and go to state 47 ]
  ! OR              [ shift and go to state 48 ]


state 74

    (22) expression -> expression DIV expression .
    (19) expression -> expression . PLUS expression
    (20) expression -> expression . MINUS expression
    (21) expression -> expression . MULT expression
    (22) expression -> expression . DIV expression
    (23) expression -> expression . EXP expression
    (24) expression -> expression . MOD expression
    (25) expression -> expression . BIT_AND expression
    (26) expression -> expression . BIT_OR expression
    (27) expression -> expression . BIT_XOR expression
    (43) boolean -> expression . EQUAL_TO expression
    (44) boolean -> expression . DIFF expression
    (45) boolean -> expression . GREATER_THAN expression
    (46) boolean -> expression . GREATER_THAN_EQUAL expression
    (47) boolean -> expression . LESS_THAN expression
    (48) boolean -> expression . LESS_THAN_EQUAL expression
    (49) boolean -> expression . AND expression
    (50) boolean -> expression . OR expression

    PLUS            reduce using rule 22 (expression -> expression DIV expression .)
    MINUS           reduce using rule 22 (expression -> expression DIV expression .)
    MULT            reduce using rule 22 (expression -> expression DIV expression .)
    DIV             reduce using rule 22 (expression -> expression DIV expression .)
    BIT_AND         reduce using rule 22 (expression -> expression DIV expression .)
    BIT_OR          reduce using rule 22 (expression -> expression DIV expression .)
    BIT_XOR         reduce using rule 22 (expression -> expression DIV expression .)
    EQUAL_TO        reduce using rule 22 (expression -> expression DIV expression .)
    DIFF            reduce using rule 22 (expression -> expression DIV expression .)
    GREATER_THAN    reduce using rule 22 (expression -> expression DIV expression .)
    GREATER_THAN_EQUAL reduce using rule 22 (expression -> expression DIV expression .)
    LESS_THAN       reduce using rule 22 (expression -> expression DIV expression .)
    LESS_THAN_EQUAL reduce using rule 22 (expression -> expression DIV expression .)
    AND             reduce using rule 22 (expression -> expression DIV expression .)
    OR              reduce using rule 22 (expression -> expression DIV expression .)
    BREAK           reduce using rule 22 (expression -> expression DIV expression .)
    PRINT           reduce using rule 22 (expression -> expression DIV expression .)
    WHILE           reduce using rule 22 (expression -> expression DIV expression .)
    FOR             reduce using rule 22 (expression -> expression DIV expression .)
    FUNCTION        reduce using rule 22 (expression -> expression DIV expression .)
    RETURN          reduce using rule 22 (expression -> expression DIV expression .)
    VARIABLE        reduce using rule 22 (expression -> expression DIV expression .)
    BIT_NEG         reduce using rule 22 (expression -> expression DIV expression .)
    NOT             reduce using rule 22 (expression -> expression DIV expression .)
    OPEN_PAREN      reduce using rule 22 (expression -> expression DIV expression .)
    STRING          reduce using rule 22 (expression -> expression DIV expression .)
    IF              reduce using rule 22 (expression -> expression DIV expression .)
    NUM_INT         reduce using rule 22 (expression -> expression DIV expression .)
    NUM_FLOAT       reduce using rule 22 (expression -> expression DIV expression .)
    TRUE            reduce using rule 22 (expression -> expression DIV expression .)
    FALSE           reduce using rule 22 (expression -> expression DIV expression .)
    $end            reduce using rule 22 (expression -> expression DIV expression .)
    CLOSE_PAREN     reduce using rule 22 (expression -> expression DIV expression .)
    SEMICOLON       reduce using rule 22 (expression -> expression DIV expression .)
    COMMA           reduce using rule 22 (expression -> expression DIV expression .)
    OPEN_KEY        reduce using rule 22 (expression -> expression DIV expression .)
    CLOSE_KEY       reduce using rule 22 (expression -> expression DIV expression .)
    EXP             shift and go to state 36
    MOD             shift and go to state 37

  ! EXP             [ reduce using rule 22 (expression -> expression DIV expression .) ]
  ! MOD             [ reduce using rule 22 (expression -> expression DIV expression .) ]
  ! PLUS            [ shift and go to state 32 ]
  ! MINUS           [ shift and go to state 33 ]
  ! MULT            [ shift and go to state 34 ]
  ! DIV             [ shift and go to state 35 ]
  ! BIT_AND         [ shift and go to state 38 ]
  ! BIT_OR          [ shift and go to state 39 ]
  ! BIT_XOR         [ shift and go to state 40 ]
  ! EQUAL_TO        [ shift and go to state 41 ]
  ! DIFF            [ shift and go to state 42 ]
  ! GREATER_THAN    [ shift and go to state 43 ]
  ! GREATER_THAN_EQUAL [ shift and go to state 44 ]
  ! LESS_THAN       [ shift and go to state 45 ]
  ! LESS_THAN_EQUAL [ shift and go to state 46 ]
  ! AND             [ shift and go to state 47 ]
  ! OR              [ shift and go to state 48 ]


state 75

    (23) expression -> expression EXP expression .
    (19) expression -> expression . PLUS expression
    (20) expression -> expression . MINUS expression
    (21) expression -> expression . MULT expression
    (22) expression -> expression . DIV expression
    (23) expression -> expression . EXP expression
    (24) expression -> expression . MOD expression
    (25) expression -> expression . BIT_AND expression
    (26) expression -> expression . BIT_OR expression
    (27) expression -> expression . BIT_XOR expression
    (43) boolean -> expression . EQUAL_TO expression
    (44) boolean -> expression . DIFF expression
    (45) boolean -> expression . GREATER_THAN expression
    (46) boolean -> expression . GREATER_THAN_EQUAL expression
    (47) boolean -> expression . LESS_THAN expression
    (48) boolean -> expression . LESS_THAN_EQUAL expression
    (49) boolean -> expression . AND expression
    (50) boolean -> expression . OR expression

    PLUS            reduce using rule 23 (expression -> expression EXP expression .)
    MINUS           reduce using rule 23 (expression -> expression EXP expression .)
    MULT            reduce using rule 23 (expression -> expression EXP expression .)
    DIV             reduce using rule 23 (expression -> expression EXP expression .)
    EXP             reduce using rule 23 (expression -> expression EXP expression .)
    MOD             reduce using rule 23 (expression -> expression EXP expression .)
    BIT_AND         reduce using rule 23 (expression -> expression EXP expression .)
    BIT_OR          reduce using rule 23 (expression -> expression EXP expression .)
    BIT_XOR         reduce using rule 23 (expression -> expression EXP expression .)
    EQUAL_TO        reduce using rule 23 (expression -> expression EXP expression .)
    DIFF            reduce using rule 23 (expression -> expression EXP expression .)
    GREATER_THAN    reduce using rule 23 (expression -> expression EXP expression .)
    GREATER_THAN_EQUAL reduce using rule 23 (expression -> expression EXP expression .)
    LESS_THAN       reduce using rule 23 (expression -> expression EXP expression .)
    LESS_THAN_EQUAL reduce using rule 23 (expression -> expression EXP expression .)
    AND             reduce using rule 23 (expression -> expression EXP expression .)
    OR              reduce using rule 23 (expression -> expression EXP expression .)
    BREAK           reduce using rule 23 (expression -> expression EXP expression .)
    PRINT           reduce using rule 23 (expression -> expression EXP expression .)
    WHILE           reduce using rule 23 (expression -> expression EXP expression .)
    FOR             reduce using rule 23 (expression -> expression EXP expression .)
    FUNCTION        reduce using rule 23 (expression -> expression EXP expression .)
    RETURN          reduce using rule 23 (expression -> expression EXP expression .)
    VARIABLE        reduce using rule 23 (expression -> expression EXP expression .)
    BIT_NEG         reduce using rule 23 (expression -> expression EXP expression .)
    NOT             reduce using rule 23 (expression -> expression EXP expression .)
    OPEN_PAREN      reduce using rule 23 (expression -> expression EXP expression .)
    STRING          reduce using rule 23 (expression -> expression EXP expression .)
    IF              reduce using rule 23 (expression -> expression EXP expression .)
    NUM_INT         reduce using rule 23 (expression -> expression EXP expression .)
    NUM_FLOAT       reduce using rule 23 (expression -> expression EXP expression .)
    TRUE            reduce using rule 23 (expression -> expression EXP expression .)
    FALSE           reduce using rule 23 (expression -> expression EXP expression .)
    $end            reduce using rule 23 (expression -> expression EXP expression .)
    CLOSE_PAREN     reduce using rule 23 (expression -> expression EXP expression .)
    SEMICOLON       reduce using rule 23 (expression -> expression EXP expression .)
    COMMA           reduce using rule 23 (expression -> expression EXP expression .)
    OPEN_KEY        reduce using rule 23 (expression -> expression EXP expression .)
    CLOSE_KEY       reduce using rule 23 (expression -> expression EXP expression .)

  ! PLUS            [ shift and go to state 32 ]
  ! MINUS           [ shift and go to state 33 ]
  ! MULT            [ shift and go to state 34 ]
  ! DIV             [ shift and go to state 35 ]
  ! EXP             [ shift and go to state 36 ]
  ! MOD             [ shift and go to state 37 ]
  ! BIT_AND         [ shift and go to state 38 ]
  ! BIT_OR          [ shift and go to state 39 ]
  ! BIT_XOR         [ shift and go to state 40 ]
  ! EQUAL_TO        [ shift and go to state 41 ]
  ! DIFF            [ shift and go to state 42 ]
  ! GREATER_THAN    [ shift and go to state 43 ]
  ! GREATER_THAN_EQUAL [ shift and go to state 44 ]
  ! LESS_THAN       [ shift and go to state 45 ]
  ! LESS_THAN_EQUAL [ shift and go to state 46 ]
  ! AND             [ shift and go to state 47 ]
  ! OR              [ shift and go to state 48 ]


state 76

    (24) expression -> expression MOD expression .
    (19) expression -> expression . PLUS expression
    (20) expression -> expression . MINUS expression
    (21) expression -> expression . MULT expression
    (22) expression -> expression . DIV expression
    (23) expression -> expression . EXP expression
    (24) expression -> expression . MOD expression
    (25) expression -> expression . BIT_AND expression
    (26) expression -> expression . BIT_OR expression
    (27) expression -> expression . BIT_XOR expression
    (43) boolean -> expression . EQUAL_TO expression
    (44) boolean -> expression . DIFF expression
    (45) boolean -> expression . GREATER_THAN expression
    (46) boolean -> expression . GREATER_THAN_EQUAL expression
    (47) boolean -> expression . LESS_THAN expression
    (48) boolean -> expression . LESS_THAN_EQUAL expression
    (49) boolean -> expression . AND expression
    (50) boolean -> expression . OR expression

    PLUS            reduce using rule 24 (expression -> expression MOD expression .)
    MINUS           reduce using rule 24 (expression -> expression MOD expression .)
    MULT            reduce using rule 24 (expression -> expression MOD expression .)
    DIV             reduce using rule 24 (expression -> expression MOD expression .)
    EXP             reduce using rule 24 (expression -> expression MOD expression .)
    MOD             reduce using rule 24 (expression -> expression MOD expression .)
    BIT_AND         reduce using rule 24 (expression -> expression MOD expression .)
    BIT_OR          reduce using rule 24 (expression -> expression MOD expression .)
    BIT_XOR         reduce using rule 24 (expression -> expression MOD expression .)
    EQUAL_TO        reduce using rule 24 (expression -> expression MOD expression .)
    DIFF            reduce using rule 24 (expression -> expression MOD expression .)
    GREATER_THAN    reduce using rule 24 (expression -> expression MOD expression .)
    GREATER_THAN_EQUAL reduce using rule 24 (expression -> expression MOD expression .)
    LESS_THAN       reduce using rule 24 (expression -> expression MOD expression .)
    LESS_THAN_EQUAL reduce using rule 24 (expression -> expression MOD expression .)
    AND             reduce using rule 24 (expression -> expression MOD expression .)
    OR              reduce using rule 24 (expression -> expression MOD expression .)
    BREAK           reduce using rule 24 (expression -> expression MOD expression .)
    PRINT           reduce using rule 24 (expression -> expression MOD expression .)
    WHILE           reduce using rule 24 (expression -> expression MOD expression .)
    FOR             reduce using rule 24 (expression -> expression MOD expression .)
    FUNCTION        reduce using rule 24 (expression -> expression MOD expression .)
    RETURN          reduce using rule 24 (expression -> expression MOD expression .)
    VARIABLE        reduce using rule 24 (expression -> expression MOD expression .)
    BIT_NEG         reduce using rule 24 (expression -> expression MOD expression .)
    NOT             reduce using rule 24 (expression -> expression MOD expression .)
    OPEN_PAREN      reduce using rule 24 (expression -> expression MOD expression .)
    STRING          reduce using rule 24 (expression -> expression MOD expression .)
    IF              reduce using rule 24 (expression -> expression MOD expression .)
    NUM_INT         reduce using rule 24 (expression -> expression MOD expression .)
    NUM_FLOAT       reduce using rule 24 (expression -> expression MOD expression .)
    TRUE            reduce using rule 24 (expression -> expression MOD expression .)
    FALSE           reduce using rule 24 (expression -> expression MOD expression .)
    $end            reduce using rule 24 (expression -> expression MOD expression .)
    CLOSE_PAREN     reduce using rule 24 (expression -> expression MOD expression .)
    SEMICOLON       reduce using rule 24 (expression -> expression MOD expression .)
    COMMA           reduce using rule 24 (expression -> expression MOD expression .)
    OPEN_KEY        reduce using rule 24 (expression -> expression MOD expression .)
    CLOSE_KEY       reduce using rule 24 (expression -> expression MOD expression .)

  ! PLUS            [ shift and go to state 32 ]
  ! MINUS           [ shift and go to state 33 ]
  ! MULT            [ shift and go to state 34 ]
  ! DIV             [ shift and go to state 35 ]
  ! EXP             [ shift and go to state 36 ]
  ! MOD             [ shift and go to state 37 ]
  ! BIT_AND         [ shift and go to state 38 ]
  ! BIT_OR          [ shift and go to state 39 ]
  ! BIT_XOR         [ shift and go to state 40 ]
  ! EQUAL_TO        [ shift and go to state 41 ]
  ! DIFF            [ shift and go to state 42 ]
  ! GREATER_THAN    [ shift and go to state 43 ]
  ! GREATER_THAN_EQUAL [ shift and go to state 44 ]
  ! LESS_THAN       [ shift and go to state 45 ]
  ! LESS_THAN_EQUAL [ shift and go to state 46 ]
  ! AND             [ shift and go to state 47 ]
  ! OR              [ shift and go to state 48 ]


state 77

    (25) expression -> expression BIT_AND expression .
    (19) expression -> expression . PLUS expression
    (20) expression -> expression . MINUS expression
    (21) expression -> expression . MULT expression
    (22) expression -> expression . DIV expression
    (23) expression -> expression . EXP expression
    (24) expression -> expression . MOD expression
    (25) expression -> expression . BIT_AND expression
    (26) expression -> expression . BIT_OR expression
    (27) expression -> expression . BIT_XOR expression
    (43) boolean -> expression . EQUAL_TO expression
    (44) boolean -> expression . DIFF expression
    (45) boolean -> expression . GREATER_THAN expression
    (46) boolean -> expression . GREATER_THAN_EQUAL expression
    (47) boolean -> expression . LESS_THAN expression
    (48) boolean -> expression . LESS_THAN_EQUAL expression
    (49) boolean -> expression . AND expression
    (50) boolean -> expression . OR expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULT resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for EXP resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for BIT_AND resolved as shift
  ! shift/reduce conflict for BIT_OR resolved as shift
  ! shift/reduce conflict for BIT_XOR resolved as shift
  ! shift/reduce conflict for EQUAL_TO resolved as shift
  ! shift/reduce conflict for DIFF resolved as shift
  ! shift/reduce conflict for GREATER_THAN resolved as shift
  ! shift/reduce conflict for GREATER_THAN_EQUAL resolved as shift
  ! shift/reduce conflict for LESS_THAN resolved as shift
  ! shift/reduce conflict for LESS_THAN_EQUAL resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    BREAK           reduce using rule 25 (expression -> expression BIT_AND expression .)
    PRINT           reduce using rule 25 (expression -> expression BIT_AND expression .)
    WHILE           reduce using rule 25 (expression -> expression BIT_AND expression .)
    FOR             reduce using rule 25 (expression -> expression BIT_AND expression .)
    FUNCTION        reduce using rule 25 (expression -> expression BIT_AND expression .)
    RETURN          reduce using rule 25 (expression -> expression BIT_AND expression .)
    VARIABLE        reduce using rule 25 (expression -> expression BIT_AND expression .)
    BIT_NEG         reduce using rule 25 (expression -> expression BIT_AND expression .)
    NOT             reduce using rule 25 (expression -> expression BIT_AND expression .)
    OPEN_PAREN      reduce using rule 25 (expression -> expression BIT_AND expression .)
    STRING          reduce using rule 25 (expression -> expression BIT_AND expression .)
    IF              reduce using rule 25 (expression -> expression BIT_AND expression .)
    NUM_INT         reduce using rule 25 (expression -> expression BIT_AND expression .)
    NUM_FLOAT       reduce using rule 25 (expression -> expression BIT_AND expression .)
    TRUE            reduce using rule 25 (expression -> expression BIT_AND expression .)
    FALSE           reduce using rule 25 (expression -> expression BIT_AND expression .)
    $end            reduce using rule 25 (expression -> expression BIT_AND expression .)
    CLOSE_PAREN     reduce using rule 25 (expression -> expression BIT_AND expression .)
    SEMICOLON       reduce using rule 25 (expression -> expression BIT_AND expression .)
    COMMA           reduce using rule 25 (expression -> expression BIT_AND expression .)
    OPEN_KEY        reduce using rule 25 (expression -> expression BIT_AND expression .)
    CLOSE_KEY       reduce using rule 25 (expression -> expression BIT_AND expression .)
    PLUS            shift and go to state 32
    MINUS           shift and go to state 33
    MULT            shift and go to state 34
    DIV             shift and go to state 35
    EXP             shift and go to state 36
    MOD             shift and go to state 37
    BIT_AND         shift and go to state 38
    BIT_OR          shift and go to state 39
    BIT_XOR         shift and go to state 40
    EQUAL_TO        shift and go to state 41
    DIFF            shift and go to state 42
    GREATER_THAN    shift and go to state 43
    GREATER_THAN_EQUAL shift and go to state 44
    LESS_THAN       shift and go to state 45
    LESS_THAN_EQUAL shift and go to state 46
    AND             shift and go to state 47
    OR              shift and go to state 48

  ! PLUS            [ reduce using rule 25 (expression -> expression BIT_AND expression .) ]
  ! MINUS           [ reduce using rule 25 (expression -> expression BIT_AND expression .) ]
  ! MULT            [ reduce using rule 25 (expression -> expression BIT_AND expression .) ]
  ! DIV             [ reduce using rule 25 (expression -> expression BIT_AND expression .) ]
  ! EXP             [ reduce using rule 25 (expression -> expression BIT_AND expression .) ]
  ! MOD             [ reduce using rule 25 (expression -> expression BIT_AND expression .) ]
  ! BIT_AND         [ reduce using rule 25 (expression -> expression BIT_AND expression .) ]
  ! BIT_OR          [ reduce using rule 25 (expression -> expression BIT_AND expression .) ]
  ! BIT_XOR         [ reduce using rule 25 (expression -> expression BIT_AND expression .) ]
  ! EQUAL_TO        [ reduce using rule 25 (expression -> expression BIT_AND expression .) ]
  ! DIFF            [ reduce using rule 25 (expression -> expression BIT_AND expression .) ]
  ! GREATER_THAN    [ reduce using rule 25 (expression -> expression BIT_AND expression .) ]
  ! GREATER_THAN_EQUAL [ reduce using rule 25 (expression -> expression BIT_AND expression .) ]
  ! LESS_THAN       [ reduce using rule 25 (expression -> expression BIT_AND expression .) ]
  ! LESS_THAN_EQUAL [ reduce using rule 25 (expression -> expression BIT_AND expression .) ]
  ! AND             [ reduce using rule 25 (expression -> expression BIT_AND expression .) ]
  ! OR              [ reduce using rule 25 (expression -> expression BIT_AND expression .) ]


state 78

    (26) expression -> expression BIT_OR expression .
    (19) expression -> expression . PLUS expression
    (20) expression -> expression . MINUS expression
    (21) expression -> expression . MULT expression
    (22) expression -> expression . DIV expression
    (23) expression -> expression . EXP expression
    (24) expression -> expression . MOD expression
    (25) expression -> expression . BIT_AND expression
    (26) expression -> expression . BIT_OR expression
    (27) expression -> expression . BIT_XOR expression
    (43) boolean -> expression . EQUAL_TO expression
    (44) boolean -> expression . DIFF expression
    (45) boolean -> expression . GREATER_THAN expression
    (46) boolean -> expression . GREATER_THAN_EQUAL expression
    (47) boolean -> expression . LESS_THAN expression
    (48) boolean -> expression . LESS_THAN_EQUAL expression
    (49) boolean -> expression . AND expression
    (50) boolean -> expression . OR expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULT resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for EXP resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for BIT_AND resolved as shift
  ! shift/reduce conflict for BIT_OR resolved as shift
  ! shift/reduce conflict for BIT_XOR resolved as shift
  ! shift/reduce conflict for EQUAL_TO resolved as shift
  ! shift/reduce conflict for DIFF resolved as shift
  ! shift/reduce conflict for GREATER_THAN resolved as shift
  ! shift/reduce conflict for GREATER_THAN_EQUAL resolved as shift
  ! shift/reduce conflict for LESS_THAN resolved as shift
  ! shift/reduce conflict for LESS_THAN_EQUAL resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    BREAK           reduce using rule 26 (expression -> expression BIT_OR expression .)
    PRINT           reduce using rule 26 (expression -> expression BIT_OR expression .)
    WHILE           reduce using rule 26 (expression -> expression BIT_OR expression .)
    FOR             reduce using rule 26 (expression -> expression BIT_OR expression .)
    FUNCTION        reduce using rule 26 (expression -> expression BIT_OR expression .)
    RETURN          reduce using rule 26 (expression -> expression BIT_OR expression .)
    VARIABLE        reduce using rule 26 (expression -> expression BIT_OR expression .)
    BIT_NEG         reduce using rule 26 (expression -> expression BIT_OR expression .)
    NOT             reduce using rule 26 (expression -> expression BIT_OR expression .)
    OPEN_PAREN      reduce using rule 26 (expression -> expression BIT_OR expression .)
    STRING          reduce using rule 26 (expression -> expression BIT_OR expression .)
    IF              reduce using rule 26 (expression -> expression BIT_OR expression .)
    NUM_INT         reduce using rule 26 (expression -> expression BIT_OR expression .)
    NUM_FLOAT       reduce using rule 26 (expression -> expression BIT_OR expression .)
    TRUE            reduce using rule 26 (expression -> expression BIT_OR expression .)
    FALSE           reduce using rule 26 (expression -> expression BIT_OR expression .)
    $end            reduce using rule 26 (expression -> expression BIT_OR expression .)
    CLOSE_PAREN     reduce using rule 26 (expression -> expression BIT_OR expression .)
    SEMICOLON       reduce using rule 26 (expression -> expression BIT_OR expression .)
    COMMA           reduce using rule 26 (expression -> expression BIT_OR expression .)
    OPEN_KEY        reduce using rule 26 (expression -> expression BIT_OR expression .)
    CLOSE_KEY       reduce using rule 26 (expression -> expression BIT_OR expression .)
    PLUS            shift and go to state 32
    MINUS           shift and go to state 33
    MULT            shift and go to state 34
    DIV             shift and go to state 35
    EXP             shift and go to state 36
    MOD             shift and go to state 37
    BIT_AND         shift and go to state 38
    BIT_OR          shift and go to state 39
    BIT_XOR         shift and go to state 40
    EQUAL_TO        shift and go to state 41
    DIFF            shift and go to state 42
    GREATER_THAN    shift and go to state 43
    GREATER_THAN_EQUAL shift and go to state 44
    LESS_THAN       shift and go to state 45
    LESS_THAN_EQUAL shift and go to state 46
    AND             shift and go to state 47
    OR              shift and go to state 48

  ! PLUS            [ reduce using rule 26 (expression -> expression BIT_OR expression .) ]
  ! MINUS           [ reduce using rule 26 (expression -> expression BIT_OR expression .) ]
  ! MULT            [ reduce using rule 26 (expression -> expression BIT_OR expression .) ]
  ! DIV             [ reduce using rule 26 (expression -> expression BIT_OR expression .) ]
  ! EXP             [ reduce using rule 26 (expression -> expression BIT_OR expression .) ]
  ! MOD             [ reduce using rule 26 (expression -> expression BIT_OR expression .) ]
  ! BIT_AND         [ reduce using rule 26 (expression -> expression BIT_OR expression .) ]
  ! BIT_OR          [ reduce using rule 26 (expression -> expression BIT_OR expression .) ]
  ! BIT_XOR         [ reduce using rule 26 (expression -> expression BIT_OR expression .) ]
  ! EQUAL_TO        [ reduce using rule 26 (expression -> expression BIT_OR expression .) ]
  ! DIFF            [ reduce using rule 26 (expression -> expression BIT_OR expression .) ]
  ! GREATER_THAN    [ reduce using rule 26 (expression -> expression BIT_OR expression .) ]
  ! GREATER_THAN_EQUAL [ reduce using rule 26 (expression -> expression BIT_OR expression .) ]
  ! LESS_THAN       [ reduce using rule 26 (expression -> expression BIT_OR expression .) ]
  ! LESS_THAN_EQUAL [ reduce using rule 26 (expression -> expression BIT_OR expression .) ]
  ! AND             [ reduce using rule 26 (expression -> expression BIT_OR expression .) ]
  ! OR              [ reduce using rule 26 (expression -> expression BIT_OR expression .) ]


state 79

    (27) expression -> expression BIT_XOR expression .
    (19) expression -> expression . PLUS expression
    (20) expression -> expression . MINUS expression
    (21) expression -> expression . MULT expression
    (22) expression -> expression . DIV expression
    (23) expression -> expression . EXP expression
    (24) expression -> expression . MOD expression
    (25) expression -> expression . BIT_AND expression
    (26) expression -> expression . BIT_OR expression
    (27) expression -> expression . BIT_XOR expression
    (43) boolean -> expression . EQUAL_TO expression
    (44) boolean -> expression . DIFF expression
    (45) boolean -> expression . GREATER_THAN expression
    (46) boolean -> expression . GREATER_THAN_EQUAL expression
    (47) boolean -> expression . LESS_THAN expression
    (48) boolean -> expression . LESS_THAN_EQUAL expression
    (49) boolean -> expression . AND expression
    (50) boolean -> expression . OR expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULT resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for EXP resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for BIT_AND resolved as shift
  ! shift/reduce conflict for BIT_OR resolved as shift
  ! shift/reduce conflict for BIT_XOR resolved as shift
  ! shift/reduce conflict for EQUAL_TO resolved as shift
  ! shift/reduce conflict for DIFF resolved as shift
  ! shift/reduce conflict for GREATER_THAN resolved as shift
  ! shift/reduce conflict for GREATER_THAN_EQUAL resolved as shift
  ! shift/reduce conflict for LESS_THAN resolved as shift
  ! shift/reduce conflict for LESS_THAN_EQUAL resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    BREAK           reduce using rule 27 (expression -> expression BIT_XOR expression .)
    PRINT           reduce using rule 27 (expression -> expression BIT_XOR expression .)
    WHILE           reduce using rule 27 (expression -> expression BIT_XOR expression .)
    FOR             reduce using rule 27 (expression -> expression BIT_XOR expression .)
    FUNCTION        reduce using rule 27 (expression -> expression BIT_XOR expression .)
    RETURN          reduce using rule 27 (expression -> expression BIT_XOR expression .)
    VARIABLE        reduce using rule 27 (expression -> expression BIT_XOR expression .)
    BIT_NEG         reduce using rule 27 (expression -> expression BIT_XOR expression .)
    NOT             reduce using rule 27 (expression -> expression BIT_XOR expression .)
    OPEN_PAREN      reduce using rule 27 (expression -> expression BIT_XOR expression .)
    STRING          reduce using rule 27 (expression -> expression BIT_XOR expression .)
    IF              reduce using rule 27 (expression -> expression BIT_XOR expression .)
    NUM_INT         reduce using rule 27 (expression -> expression BIT_XOR expression .)
    NUM_FLOAT       reduce using rule 27 (expression -> expression BIT_XOR expression .)
    TRUE            reduce using rule 27 (expression -> expression BIT_XOR expression .)
    FALSE           reduce using rule 27 (expression -> expression BIT_XOR expression .)
    $end            reduce using rule 27 (expression -> expression BIT_XOR expression .)
    CLOSE_PAREN     reduce using rule 27 (expression -> expression BIT_XOR expression .)
    SEMICOLON       reduce using rule 27 (expression -> expression BIT_XOR expression .)
    COMMA           reduce using rule 27 (expression -> expression BIT_XOR expression .)
    OPEN_KEY        reduce using rule 27 (expression -> expression BIT_XOR expression .)
    CLOSE_KEY       reduce using rule 27 (expression -> expression BIT_XOR expression .)
    PLUS            shift and go to state 32
    MINUS           shift and go to state 33
    MULT            shift and go to state 34
    DIV             shift and go to state 35
    EXP             shift and go to state 36
    MOD             shift and go to state 37
    BIT_AND         shift and go to state 38
    BIT_OR          shift and go to state 39
    BIT_XOR         shift and go to state 40
    EQUAL_TO        shift and go to state 41
    DIFF            shift and go to state 42
    GREATER_THAN    shift and go to state 43
    GREATER_THAN_EQUAL shift and go to state 44
    LESS_THAN       shift and go to state 45
    LESS_THAN_EQUAL shift and go to state 46
    AND             shift and go to state 47
    OR              shift and go to state 48

  ! PLUS            [ reduce using rule 27 (expression -> expression BIT_XOR expression .) ]
  ! MINUS           [ reduce using rule 27 (expression -> expression BIT_XOR expression .) ]
  ! MULT            [ reduce using rule 27 (expression -> expression BIT_XOR expression .) ]
  ! DIV             [ reduce using rule 27 (expression -> expression BIT_XOR expression .) ]
  ! EXP             [ reduce using rule 27 (expression -> expression BIT_XOR expression .) ]
  ! MOD             [ reduce using rule 27 (expression -> expression BIT_XOR expression .) ]
  ! BIT_AND         [ reduce using rule 27 (expression -> expression BIT_XOR expression .) ]
  ! BIT_OR          [ reduce using rule 27 (expression -> expression BIT_XOR expression .) ]
  ! BIT_XOR         [ reduce using rule 27 (expression -> expression BIT_XOR expression .) ]
  ! EQUAL_TO        [ reduce using rule 27 (expression -> expression BIT_XOR expression .) ]
  ! DIFF            [ reduce using rule 27 (expression -> expression BIT_XOR expression .) ]
  ! GREATER_THAN    [ reduce using rule 27 (expression -> expression BIT_XOR expression .) ]
  ! GREATER_THAN_EQUAL [ reduce using rule 27 (expression -> expression BIT_XOR expression .) ]
  ! LESS_THAN       [ reduce using rule 27 (expression -> expression BIT_XOR expression .) ]
  ! LESS_THAN_EQUAL [ reduce using rule 27 (expression -> expression BIT_XOR expression .) ]
  ! AND             [ reduce using rule 27 (expression -> expression BIT_XOR expression .) ]
  ! OR              [ reduce using rule 27 (expression -> expression BIT_XOR expression .) ]


state 80

    (43) boolean -> expression EQUAL_TO expression .
    (19) expression -> expression . PLUS expression
    (20) expression -> expression . MINUS expression
    (21) expression -> expression . MULT expression
    (22) expression -> expression . DIV expression
    (23) expression -> expression . EXP expression
    (24) expression -> expression . MOD expression
    (25) expression -> expression . BIT_AND expression
    (26) expression -> expression . BIT_OR expression
    (27) expression -> expression . BIT_XOR expression
    (43) boolean -> expression . EQUAL_TO expression
    (44) boolean -> expression . DIFF expression
    (45) boolean -> expression . GREATER_THAN expression
    (46) boolean -> expression . GREATER_THAN_EQUAL expression
    (47) boolean -> expression . LESS_THAN expression
    (48) boolean -> expression . LESS_THAN_EQUAL expression
    (49) boolean -> expression . AND expression
    (50) boolean -> expression . OR expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULT resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for EXP resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for BIT_AND resolved as shift
  ! shift/reduce conflict for BIT_OR resolved as shift
  ! shift/reduce conflict for BIT_XOR resolved as shift
  ! shift/reduce conflict for EQUAL_TO resolved as shift
  ! shift/reduce conflict for DIFF resolved as shift
  ! shift/reduce conflict for GREATER_THAN resolved as shift
  ! shift/reduce conflict for GREATER_THAN_EQUAL resolved as shift
  ! shift/reduce conflict for LESS_THAN resolved as shift
  ! shift/reduce conflict for LESS_THAN_EQUAL resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    BREAK           reduce using rule 43 (boolean -> expression EQUAL_TO expression .)
    PRINT           reduce using rule 43 (boolean -> expression EQUAL_TO expression .)
    WHILE           reduce using rule 43 (boolean -> expression EQUAL_TO expression .)
    FOR             reduce using rule 43 (boolean -> expression EQUAL_TO expression .)
    FUNCTION        reduce using rule 43 (boolean -> expression EQUAL_TO expression .)
    RETURN          reduce using rule 43 (boolean -> expression EQUAL_TO expression .)
    VARIABLE        reduce using rule 43 (boolean -> expression EQUAL_TO expression .)
    BIT_NEG         reduce using rule 43 (boolean -> expression EQUAL_TO expression .)
    NOT             reduce using rule 43 (boolean -> expression EQUAL_TO expression .)
    OPEN_PAREN      reduce using rule 43 (boolean -> expression EQUAL_TO expression .)
    STRING          reduce using rule 43 (boolean -> expression EQUAL_TO expression .)
    IF              reduce using rule 43 (boolean -> expression EQUAL_TO expression .)
    NUM_INT         reduce using rule 43 (boolean -> expression EQUAL_TO expression .)
    NUM_FLOAT       reduce using rule 43 (boolean -> expression EQUAL_TO expression .)
    TRUE            reduce using rule 43 (boolean -> expression EQUAL_TO expression .)
    FALSE           reduce using rule 43 (boolean -> expression EQUAL_TO expression .)
    $end            reduce using rule 43 (boolean -> expression EQUAL_TO expression .)
    CLOSE_PAREN     reduce using rule 43 (boolean -> expression EQUAL_TO expression .)
    SEMICOLON       reduce using rule 43 (boolean -> expression EQUAL_TO expression .)
    COMMA           reduce using rule 43 (boolean -> expression EQUAL_TO expression .)
    OPEN_KEY        reduce using rule 43 (boolean -> expression EQUAL_TO expression .)
    CLOSE_KEY       reduce using rule 43 (boolean -> expression EQUAL_TO expression .)
    PLUS            shift and go to state 32
    MINUS           shift and go to state 33
    MULT            shift and go to state 34
    DIV             shift and go to state 35
    EXP             shift and go to state 36
    MOD             shift and go to state 37
    BIT_AND         shift and go to state 38
    BIT_OR          shift and go to state 39
    BIT_XOR         shift and go to state 40
    EQUAL_TO        shift and go to state 41
    DIFF            shift and go to state 42
    GREATER_THAN    shift and go to state 43
    GREATER_THAN_EQUAL shift and go to state 44
    LESS_THAN       shift and go to state 45
    LESS_THAN_EQUAL shift and go to state 46
    AND             shift and go to state 47
    OR              shift and go to state 48

  ! PLUS            [ reduce using rule 43 (boolean -> expression EQUAL_TO expression .) ]
  ! MINUS           [ reduce using rule 43 (boolean -> expression EQUAL_TO expression .) ]
  ! MULT            [ reduce using rule 43 (boolean -> expression EQUAL_TO expression .) ]
  ! DIV             [ reduce using rule 43 (boolean -> expression EQUAL_TO expression .) ]
  ! EXP             [ reduce using rule 43 (boolean -> expression EQUAL_TO expression .) ]
  ! MOD             [ reduce using rule 43 (boolean -> expression EQUAL_TO expression .) ]
  ! BIT_AND         [ reduce using rule 43 (boolean -> expression EQUAL_TO expression .) ]
  ! BIT_OR          [ reduce using rule 43 (boolean -> expression EQUAL_TO expression .) ]
  ! BIT_XOR         [ reduce using rule 43 (boolean -> expression EQUAL_TO expression .) ]
  ! EQUAL_TO        [ reduce using rule 43 (boolean -> expression EQUAL_TO expression .) ]
  ! DIFF            [ reduce using rule 43 (boolean -> expression EQUAL_TO expression .) ]
  ! GREATER_THAN    [ reduce using rule 43 (boolean -> expression EQUAL_TO expression .) ]
  ! GREATER_THAN_EQUAL [ reduce using rule 43 (boolean -> expression EQUAL_TO expression .) ]
  ! LESS_THAN       [ reduce using rule 43 (boolean -> expression EQUAL_TO expression .) ]
  ! LESS_THAN_EQUAL [ reduce using rule 43 (boolean -> expression EQUAL_TO expression .) ]
  ! AND             [ reduce using rule 43 (boolean -> expression EQUAL_TO expression .) ]
  ! OR              [ reduce using rule 43 (boolean -> expression EQUAL_TO expression .) ]


state 81

    (44) boolean -> expression DIFF expression .
    (19) expression -> expression . PLUS expression
    (20) expression -> expression . MINUS expression
    (21) expression -> expression . MULT expression
    (22) expression -> expression . DIV expression
    (23) expression -> expression . EXP expression
    (24) expression -> expression . MOD expression
    (25) expression -> expression . BIT_AND expression
    (26) expression -> expression . BIT_OR expression
    (27) expression -> expression . BIT_XOR expression
    (43) boolean -> expression . EQUAL_TO expression
    (44) boolean -> expression . DIFF expression
    (45) boolean -> expression . GREATER_THAN expression
    (46) boolean -> expression . GREATER_THAN_EQUAL expression
    (47) boolean -> expression . LESS_THAN expression
    (48) boolean -> expression . LESS_THAN_EQUAL expression
    (49) boolean -> expression . AND expression
    (50) boolean -> expression . OR expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULT resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for EXP resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for BIT_AND resolved as shift
  ! shift/reduce conflict for BIT_OR resolved as shift
  ! shift/reduce conflict for BIT_XOR resolved as shift
  ! shift/reduce conflict for EQUAL_TO resolved as shift
  ! shift/reduce conflict for DIFF resolved as shift
  ! shift/reduce conflict for GREATER_THAN resolved as shift
  ! shift/reduce conflict for GREATER_THAN_EQUAL resolved as shift
  ! shift/reduce conflict for LESS_THAN resolved as shift
  ! shift/reduce conflict for LESS_THAN_EQUAL resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    BREAK           reduce using rule 44 (boolean -> expression DIFF expression .)
    PRINT           reduce using rule 44 (boolean -> expression DIFF expression .)
    WHILE           reduce using rule 44 (boolean -> expression DIFF expression .)
    FOR             reduce using rule 44 (boolean -> expression DIFF expression .)
    FUNCTION        reduce using rule 44 (boolean -> expression DIFF expression .)
    RETURN          reduce using rule 44 (boolean -> expression DIFF expression .)
    VARIABLE        reduce using rule 44 (boolean -> expression DIFF expression .)
    BIT_NEG         reduce using rule 44 (boolean -> expression DIFF expression .)
    NOT             reduce using rule 44 (boolean -> expression DIFF expression .)
    OPEN_PAREN      reduce using rule 44 (boolean -> expression DIFF expression .)
    STRING          reduce using rule 44 (boolean -> expression DIFF expression .)
    IF              reduce using rule 44 (boolean -> expression DIFF expression .)
    NUM_INT         reduce using rule 44 (boolean -> expression DIFF expression .)
    NUM_FLOAT       reduce using rule 44 (boolean -> expression DIFF expression .)
    TRUE            reduce using rule 44 (boolean -> expression DIFF expression .)
    FALSE           reduce using rule 44 (boolean -> expression DIFF expression .)
    $end            reduce using rule 44 (boolean -> expression DIFF expression .)
    CLOSE_PAREN     reduce using rule 44 (boolean -> expression DIFF expression .)
    SEMICOLON       reduce using rule 44 (boolean -> expression DIFF expression .)
    COMMA           reduce using rule 44 (boolean -> expression DIFF expression .)
    OPEN_KEY        reduce using rule 44 (boolean -> expression DIFF expression .)
    CLOSE_KEY       reduce using rule 44 (boolean -> expression DIFF expression .)
    PLUS            shift and go to state 32
    MINUS           shift and go to state 33
    MULT            shift and go to state 34
    DIV             shift and go to state 35
    EXP             shift and go to state 36
    MOD             shift and go to state 37
    BIT_AND         shift and go to state 38
    BIT_OR          shift and go to state 39
    BIT_XOR         shift and go to state 40
    EQUAL_TO        shift and go to state 41
    DIFF            shift and go to state 42
    GREATER_THAN    shift and go to state 43
    GREATER_THAN_EQUAL shift and go to state 44
    LESS_THAN       shift and go to state 45
    LESS_THAN_EQUAL shift and go to state 46
    AND             shift and go to state 47
    OR              shift and go to state 48

  ! PLUS            [ reduce using rule 44 (boolean -> expression DIFF expression .) ]
  ! MINUS           [ reduce using rule 44 (boolean -> expression DIFF expression .) ]
  ! MULT            [ reduce using rule 44 (boolean -> expression DIFF expression .) ]
  ! DIV             [ reduce using rule 44 (boolean -> expression DIFF expression .) ]
  ! EXP             [ reduce using rule 44 (boolean -> expression DIFF expression .) ]
  ! MOD             [ reduce using rule 44 (boolean -> expression DIFF expression .) ]
  ! BIT_AND         [ reduce using rule 44 (boolean -> expression DIFF expression .) ]
  ! BIT_OR          [ reduce using rule 44 (boolean -> expression DIFF expression .) ]
  ! BIT_XOR         [ reduce using rule 44 (boolean -> expression DIFF expression .) ]
  ! EQUAL_TO        [ reduce using rule 44 (boolean -> expression DIFF expression .) ]
  ! DIFF            [ reduce using rule 44 (boolean -> expression DIFF expression .) ]
  ! GREATER_THAN    [ reduce using rule 44 (boolean -> expression DIFF expression .) ]
  ! GREATER_THAN_EQUAL [ reduce using rule 44 (boolean -> expression DIFF expression .) ]
  ! LESS_THAN       [ reduce using rule 44 (boolean -> expression DIFF expression .) ]
  ! LESS_THAN_EQUAL [ reduce using rule 44 (boolean -> expression DIFF expression .) ]
  ! AND             [ reduce using rule 44 (boolean -> expression DIFF expression .) ]
  ! OR              [ reduce using rule 44 (boolean -> expression DIFF expression .) ]


state 82

    (45) boolean -> expression GREATER_THAN expression .
    (19) expression -> expression . PLUS expression
    (20) expression -> expression . MINUS expression
    (21) expression -> expression . MULT expression
    (22) expression -> expression . DIV expression
    (23) expression -> expression . EXP expression
    (24) expression -> expression . MOD expression
    (25) expression -> expression . BIT_AND expression
    (26) expression -> expression . BIT_OR expression
    (27) expression -> expression . BIT_XOR expression
    (43) boolean -> expression . EQUAL_TO expression
    (44) boolean -> expression . DIFF expression
    (45) boolean -> expression . GREATER_THAN expression
    (46) boolean -> expression . GREATER_THAN_EQUAL expression
    (47) boolean -> expression . LESS_THAN expression
    (48) boolean -> expression . LESS_THAN_EQUAL expression
    (49) boolean -> expression . AND expression
    (50) boolean -> expression . OR expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULT resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for EXP resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for BIT_AND resolved as shift
  ! shift/reduce conflict for BIT_OR resolved as shift
  ! shift/reduce conflict for BIT_XOR resolved as shift
  ! shift/reduce conflict for EQUAL_TO resolved as shift
  ! shift/reduce conflict for DIFF resolved as shift
  ! shift/reduce conflict for GREATER_THAN resolved as shift
  ! shift/reduce conflict for GREATER_THAN_EQUAL resolved as shift
  ! shift/reduce conflict for LESS_THAN resolved as shift
  ! shift/reduce conflict for LESS_THAN_EQUAL resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    BREAK           reduce using rule 45 (boolean -> expression GREATER_THAN expression .)
    PRINT           reduce using rule 45 (boolean -> expression GREATER_THAN expression .)
    WHILE           reduce using rule 45 (boolean -> expression GREATER_THAN expression .)
    FOR             reduce using rule 45 (boolean -> expression GREATER_THAN expression .)
    FUNCTION        reduce using rule 45 (boolean -> expression GREATER_THAN expression .)
    RETURN          reduce using rule 45 (boolean -> expression GREATER_THAN expression .)
    VARIABLE        reduce using rule 45 (boolean -> expression GREATER_THAN expression .)
    BIT_NEG         reduce using rule 45 (boolean -> expression GREATER_THAN expression .)
    NOT             reduce using rule 45 (boolean -> expression GREATER_THAN expression .)
    OPEN_PAREN      reduce using rule 45 (boolean -> expression GREATER_THAN expression .)
    STRING          reduce using rule 45 (boolean -> expression GREATER_THAN expression .)
    IF              reduce using rule 45 (boolean -> expression GREATER_THAN expression .)
    NUM_INT         reduce using rule 45 (boolean -> expression GREATER_THAN expression .)
    NUM_FLOAT       reduce using rule 45 (boolean -> expression GREATER_THAN expression .)
    TRUE            reduce using rule 45 (boolean -> expression GREATER_THAN expression .)
    FALSE           reduce using rule 45 (boolean -> expression GREATER_THAN expression .)
    $end            reduce using rule 45 (boolean -> expression GREATER_THAN expression .)
    CLOSE_PAREN     reduce using rule 45 (boolean -> expression GREATER_THAN expression .)
    SEMICOLON       reduce using rule 45 (boolean -> expression GREATER_THAN expression .)
    COMMA           reduce using rule 45 (boolean -> expression GREATER_THAN expression .)
    OPEN_KEY        reduce using rule 45 (boolean -> expression GREATER_THAN expression .)
    CLOSE_KEY       reduce using rule 45 (boolean -> expression GREATER_THAN expression .)
    PLUS            shift and go to state 32
    MINUS           shift and go to state 33
    MULT            shift and go to state 34
    DIV             shift and go to state 35
    EXP             shift and go to state 36
    MOD             shift and go to state 37
    BIT_AND         shift and go to state 38
    BIT_OR          shift and go to state 39
    BIT_XOR         shift and go to state 40
    EQUAL_TO        shift and go to state 41
    DIFF            shift and go to state 42
    GREATER_THAN    shift and go to state 43
    GREATER_THAN_EQUAL shift and go to state 44
    LESS_THAN       shift and go to state 45
    LESS_THAN_EQUAL shift and go to state 46
    AND             shift and go to state 47
    OR              shift and go to state 48

  ! PLUS            [ reduce using rule 45 (boolean -> expression GREATER_THAN expression .) ]
  ! MINUS           [ reduce using rule 45 (boolean -> expression GREATER_THAN expression .) ]
  ! MULT            [ reduce using rule 45 (boolean -> expression GREATER_THAN expression .) ]
  ! DIV             [ reduce using rule 45 (boolean -> expression GREATER_THAN expression .) ]
  ! EXP             [ reduce using rule 45 (boolean -> expression GREATER_THAN expression .) ]
  ! MOD             [ reduce using rule 45 (boolean -> expression GREATER_THAN expression .) ]
  ! BIT_AND         [ reduce using rule 45 (boolean -> expression GREATER_THAN expression .) ]
  ! BIT_OR          [ reduce using rule 45 (boolean -> expression GREATER_THAN expression .) ]
  ! BIT_XOR         [ reduce using rule 45 (boolean -> expression GREATER_THAN expression .) ]
  ! EQUAL_TO        [ reduce using rule 45 (boolean -> expression GREATER_THAN expression .) ]
  ! DIFF            [ reduce using rule 45 (boolean -> expression GREATER_THAN expression .) ]
  ! GREATER_THAN    [ reduce using rule 45 (boolean -> expression GREATER_THAN expression .) ]
  ! GREATER_THAN_EQUAL [ reduce using rule 45 (boolean -> expression GREATER_THAN expression .) ]
  ! LESS_THAN       [ reduce using rule 45 (boolean -> expression GREATER_THAN expression .) ]
  ! LESS_THAN_EQUAL [ reduce using rule 45 (boolean -> expression GREATER_THAN expression .) ]
  ! AND             [ reduce using rule 45 (boolean -> expression GREATER_THAN expression .) ]
  ! OR              [ reduce using rule 45 (boolean -> expression GREATER_THAN expression .) ]


state 83

    (46) boolean -> expression GREATER_THAN_EQUAL expression .
    (19) expression -> expression . PLUS expression
    (20) expression -> expression . MINUS expression
    (21) expression -> expression . MULT expression
    (22) expression -> expression . DIV expression
    (23) expression -> expression . EXP expression
    (24) expression -> expression . MOD expression
    (25) expression -> expression . BIT_AND expression
    (26) expression -> expression . BIT_OR expression
    (27) expression -> expression . BIT_XOR expression
    (43) boolean -> expression . EQUAL_TO expression
    (44) boolean -> expression . DIFF expression
    (45) boolean -> expression . GREATER_THAN expression
    (46) boolean -> expression . GREATER_THAN_EQUAL expression
    (47) boolean -> expression . LESS_THAN expression
    (48) boolean -> expression . LESS_THAN_EQUAL expression
    (49) boolean -> expression . AND expression
    (50) boolean -> expression . OR expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULT resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for EXP resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for BIT_AND resolved as shift
  ! shift/reduce conflict for BIT_OR resolved as shift
  ! shift/reduce conflict for BIT_XOR resolved as shift
  ! shift/reduce conflict for EQUAL_TO resolved as shift
  ! shift/reduce conflict for DIFF resolved as shift
  ! shift/reduce conflict for GREATER_THAN resolved as shift
  ! shift/reduce conflict for GREATER_THAN_EQUAL resolved as shift
  ! shift/reduce conflict for LESS_THAN resolved as shift
  ! shift/reduce conflict for LESS_THAN_EQUAL resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    BREAK           reduce using rule 46 (boolean -> expression GREATER_THAN_EQUAL expression .)
    PRINT           reduce using rule 46 (boolean -> expression GREATER_THAN_EQUAL expression .)
    WHILE           reduce using rule 46 (boolean -> expression GREATER_THAN_EQUAL expression .)
    FOR             reduce using rule 46 (boolean -> expression GREATER_THAN_EQUAL expression .)
    FUNCTION        reduce using rule 46 (boolean -> expression GREATER_THAN_EQUAL expression .)
    RETURN          reduce using rule 46 (boolean -> expression GREATER_THAN_EQUAL expression .)
    VARIABLE        reduce using rule 46 (boolean -> expression GREATER_THAN_EQUAL expression .)
    BIT_NEG         reduce using rule 46 (boolean -> expression GREATER_THAN_EQUAL expression .)
    NOT             reduce using rule 46 (boolean -> expression GREATER_THAN_EQUAL expression .)
    OPEN_PAREN      reduce using rule 46 (boolean -> expression GREATER_THAN_EQUAL expression .)
    STRING          reduce using rule 46 (boolean -> expression GREATER_THAN_EQUAL expression .)
    IF              reduce using rule 46 (boolean -> expression GREATER_THAN_EQUAL expression .)
    NUM_INT         reduce using rule 46 (boolean -> expression GREATER_THAN_EQUAL expression .)
    NUM_FLOAT       reduce using rule 46 (boolean -> expression GREATER_THAN_EQUAL expression .)
    TRUE            reduce using rule 46 (boolean -> expression GREATER_THAN_EQUAL expression .)
    FALSE           reduce using rule 46 (boolean -> expression GREATER_THAN_EQUAL expression .)
    $end            reduce using rule 46 (boolean -> expression GREATER_THAN_EQUAL expression .)
    CLOSE_PAREN     reduce using rule 46 (boolean -> expression GREATER_THAN_EQUAL expression .)
    SEMICOLON       reduce using rule 46 (boolean -> expression GREATER_THAN_EQUAL expression .)
    COMMA           reduce using rule 46 (boolean -> expression GREATER_THAN_EQUAL expression .)
    OPEN_KEY        reduce using rule 46 (boolean -> expression GREATER_THAN_EQUAL expression .)
    CLOSE_KEY       reduce using rule 46 (boolean -> expression GREATER_THAN_EQUAL expression .)
    PLUS            shift and go to state 32
    MINUS           shift and go to state 33
    MULT            shift and go to state 34
    DIV             shift and go to state 35
    EXP             shift and go to state 36
    MOD             shift and go to state 37
    BIT_AND         shift and go to state 38
    BIT_OR          shift and go to state 39
    BIT_XOR         shift and go to state 40
    EQUAL_TO        shift and go to state 41
    DIFF            shift and go to state 42
    GREATER_THAN    shift and go to state 43
    GREATER_THAN_EQUAL shift and go to state 44
    LESS_THAN       shift and go to state 45
    LESS_THAN_EQUAL shift and go to state 46
    AND             shift and go to state 47
    OR              shift and go to state 48

  ! PLUS            [ reduce using rule 46 (boolean -> expression GREATER_THAN_EQUAL expression .) ]
  ! MINUS           [ reduce using rule 46 (boolean -> expression GREATER_THAN_EQUAL expression .) ]
  ! MULT            [ reduce using rule 46 (boolean -> expression GREATER_THAN_EQUAL expression .) ]
  ! DIV             [ reduce using rule 46 (boolean -> expression GREATER_THAN_EQUAL expression .) ]
  ! EXP             [ reduce using rule 46 (boolean -> expression GREATER_THAN_EQUAL expression .) ]
  ! MOD             [ reduce using rule 46 (boolean -> expression GREATER_THAN_EQUAL expression .) ]
  ! BIT_AND         [ reduce using rule 46 (boolean -> expression GREATER_THAN_EQUAL expression .) ]
  ! BIT_OR          [ reduce using rule 46 (boolean -> expression GREATER_THAN_EQUAL expression .) ]
  ! BIT_XOR         [ reduce using rule 46 (boolean -> expression GREATER_THAN_EQUAL expression .) ]
  ! EQUAL_TO        [ reduce using rule 46 (boolean -> expression GREATER_THAN_EQUAL expression .) ]
  ! DIFF            [ reduce using rule 46 (boolean -> expression GREATER_THAN_EQUAL expression .) ]
  ! GREATER_THAN    [ reduce using rule 46 (boolean -> expression GREATER_THAN_EQUAL expression .) ]
  ! GREATER_THAN_EQUAL [ reduce using rule 46 (boolean -> expression GREATER_THAN_EQUAL expression .) ]
  ! LESS_THAN       [ reduce using rule 46 (boolean -> expression GREATER_THAN_EQUAL expression .) ]
  ! LESS_THAN_EQUAL [ reduce using rule 46 (boolean -> expression GREATER_THAN_EQUAL expression .) ]
  ! AND             [ reduce using rule 46 (boolean -> expression GREATER_THAN_EQUAL expression .) ]
  ! OR              [ reduce using rule 46 (boolean -> expression GREATER_THAN_EQUAL expression .) ]


state 84

    (47) boolean -> expression LESS_THAN expression .
    (19) expression -> expression . PLUS expression
    (20) expression -> expression . MINUS expression
    (21) expression -> expression . MULT expression
    (22) expression -> expression . DIV expression
    (23) expression -> expression . EXP expression
    (24) expression -> expression . MOD expression
    (25) expression -> expression . BIT_AND expression
    (26) expression -> expression . BIT_OR expression
    (27) expression -> expression . BIT_XOR expression
    (43) boolean -> expression . EQUAL_TO expression
    (44) boolean -> expression . DIFF expression
    (45) boolean -> expression . GREATER_THAN expression
    (46) boolean -> expression . GREATER_THAN_EQUAL expression
    (47) boolean -> expression . LESS_THAN expression
    (48) boolean -> expression . LESS_THAN_EQUAL expression
    (49) boolean -> expression . AND expression
    (50) boolean -> expression . OR expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULT resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for EXP resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for BIT_AND resolved as shift
  ! shift/reduce conflict for BIT_OR resolved as shift
  ! shift/reduce conflict for BIT_XOR resolved as shift
  ! shift/reduce conflict for EQUAL_TO resolved as shift
  ! shift/reduce conflict for DIFF resolved as shift
  ! shift/reduce conflict for GREATER_THAN resolved as shift
  ! shift/reduce conflict for GREATER_THAN_EQUAL resolved as shift
  ! shift/reduce conflict for LESS_THAN resolved as shift
  ! shift/reduce conflict for LESS_THAN_EQUAL resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    BREAK           reduce using rule 47 (boolean -> expression LESS_THAN expression .)
    PRINT           reduce using rule 47 (boolean -> expression LESS_THAN expression .)
    WHILE           reduce using rule 47 (boolean -> expression LESS_THAN expression .)
    FOR             reduce using rule 47 (boolean -> expression LESS_THAN expression .)
    FUNCTION        reduce using rule 47 (boolean -> expression LESS_THAN expression .)
    RETURN          reduce using rule 47 (boolean -> expression LESS_THAN expression .)
    VARIABLE        reduce using rule 47 (boolean -> expression LESS_THAN expression .)
    BIT_NEG         reduce using rule 47 (boolean -> expression LESS_THAN expression .)
    NOT             reduce using rule 47 (boolean -> expression LESS_THAN expression .)
    OPEN_PAREN      reduce using rule 47 (boolean -> expression LESS_THAN expression .)
    STRING          reduce using rule 47 (boolean -> expression LESS_THAN expression .)
    IF              reduce using rule 47 (boolean -> expression LESS_THAN expression .)
    NUM_INT         reduce using rule 47 (boolean -> expression LESS_THAN expression .)
    NUM_FLOAT       reduce using rule 47 (boolean -> expression LESS_THAN expression .)
    TRUE            reduce using rule 47 (boolean -> expression LESS_THAN expression .)
    FALSE           reduce using rule 47 (boolean -> expression LESS_THAN expression .)
    $end            reduce using rule 47 (boolean -> expression LESS_THAN expression .)
    CLOSE_PAREN     reduce using rule 47 (boolean -> expression LESS_THAN expression .)
    SEMICOLON       reduce using rule 47 (boolean -> expression LESS_THAN expression .)
    COMMA           reduce using rule 47 (boolean -> expression LESS_THAN expression .)
    OPEN_KEY        reduce using rule 47 (boolean -> expression LESS_THAN expression .)
    CLOSE_KEY       reduce using rule 47 (boolean -> expression LESS_THAN expression .)
    PLUS            shift and go to state 32
    MINUS           shift and go to state 33
    MULT            shift and go to state 34
    DIV             shift and go to state 35
    EXP             shift and go to state 36
    MOD             shift and go to state 37
    BIT_AND         shift and go to state 38
    BIT_OR          shift and go to state 39
    BIT_XOR         shift and go to state 40
    EQUAL_TO        shift and go to state 41
    DIFF            shift and go to state 42
    GREATER_THAN    shift and go to state 43
    GREATER_THAN_EQUAL shift and go to state 44
    LESS_THAN       shift and go to state 45
    LESS_THAN_EQUAL shift and go to state 46
    AND             shift and go to state 47
    OR              shift and go to state 48

  ! PLUS            [ reduce using rule 47 (boolean -> expression LESS_THAN expression .) ]
  ! MINUS           [ reduce using rule 47 (boolean -> expression LESS_THAN expression .) ]
  ! MULT            [ reduce using rule 47 (boolean -> expression LESS_THAN expression .) ]
  ! DIV             [ reduce using rule 47 (boolean -> expression LESS_THAN expression .) ]
  ! EXP             [ reduce using rule 47 (boolean -> expression LESS_THAN expression .) ]
  ! MOD             [ reduce using rule 47 (boolean -> expression LESS_THAN expression .) ]
  ! BIT_AND         [ reduce using rule 47 (boolean -> expression LESS_THAN expression .) ]
  ! BIT_OR          [ reduce using rule 47 (boolean -> expression LESS_THAN expression .) ]
  ! BIT_XOR         [ reduce using rule 47 (boolean -> expression LESS_THAN expression .) ]
  ! EQUAL_TO        [ reduce using rule 47 (boolean -> expression LESS_THAN expression .) ]
  ! DIFF            [ reduce using rule 47 (boolean -> expression LESS_THAN expression .) ]
  ! GREATER_THAN    [ reduce using rule 47 (boolean -> expression LESS_THAN expression .) ]
  ! GREATER_THAN_EQUAL [ reduce using rule 47 (boolean -> expression LESS_THAN expression .) ]
  ! LESS_THAN       [ reduce using rule 47 (boolean -> expression LESS_THAN expression .) ]
  ! LESS_THAN_EQUAL [ reduce using rule 47 (boolean -> expression LESS_THAN expression .) ]
  ! AND             [ reduce using rule 47 (boolean -> expression LESS_THAN expression .) ]
  ! OR              [ reduce using rule 47 (boolean -> expression LESS_THAN expression .) ]


state 85

    (48) boolean -> expression LESS_THAN_EQUAL expression .
    (19) expression -> expression . PLUS expression
    (20) expression -> expression . MINUS expression
    (21) expression -> expression . MULT expression
    (22) expression -> expression . DIV expression
    (23) expression -> expression . EXP expression
    (24) expression -> expression . MOD expression
    (25) expression -> expression . BIT_AND expression
    (26) expression -> expression . BIT_OR expression
    (27) expression -> expression . BIT_XOR expression
    (43) boolean -> expression . EQUAL_TO expression
    (44) boolean -> expression . DIFF expression
    (45) boolean -> expression . GREATER_THAN expression
    (46) boolean -> expression . GREATER_THAN_EQUAL expression
    (47) boolean -> expression . LESS_THAN expression
    (48) boolean -> expression . LESS_THAN_EQUAL expression
    (49) boolean -> expression . AND expression
    (50) boolean -> expression . OR expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULT resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for EXP resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for BIT_AND resolved as shift
  ! shift/reduce conflict for BIT_OR resolved as shift
  ! shift/reduce conflict for BIT_XOR resolved as shift
  ! shift/reduce conflict for EQUAL_TO resolved as shift
  ! shift/reduce conflict for DIFF resolved as shift
  ! shift/reduce conflict for GREATER_THAN resolved as shift
  ! shift/reduce conflict for GREATER_THAN_EQUAL resolved as shift
  ! shift/reduce conflict for LESS_THAN resolved as shift
  ! shift/reduce conflict for LESS_THAN_EQUAL resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    BREAK           reduce using rule 48 (boolean -> expression LESS_THAN_EQUAL expression .)
    PRINT           reduce using rule 48 (boolean -> expression LESS_THAN_EQUAL expression .)
    WHILE           reduce using rule 48 (boolean -> expression LESS_THAN_EQUAL expression .)
    FOR             reduce using rule 48 (boolean -> expression LESS_THAN_EQUAL expression .)
    FUNCTION        reduce using rule 48 (boolean -> expression LESS_THAN_EQUAL expression .)
    RETURN          reduce using rule 48 (boolean -> expression LESS_THAN_EQUAL expression .)
    VARIABLE        reduce using rule 48 (boolean -> expression LESS_THAN_EQUAL expression .)
    BIT_NEG         reduce using rule 48 (boolean -> expression LESS_THAN_EQUAL expression .)
    NOT             reduce using rule 48 (boolean -> expression LESS_THAN_EQUAL expression .)
    OPEN_PAREN      reduce using rule 48 (boolean -> expression LESS_THAN_EQUAL expression .)
    STRING          reduce using rule 48 (boolean -> expression LESS_THAN_EQUAL expression .)
    IF              reduce using rule 48 (boolean -> expression LESS_THAN_EQUAL expression .)
    NUM_INT         reduce using rule 48 (boolean -> expression LESS_THAN_EQUAL expression .)
    NUM_FLOAT       reduce using rule 48 (boolean -> expression LESS_THAN_EQUAL expression .)
    TRUE            reduce using rule 48 (boolean -> expression LESS_THAN_EQUAL expression .)
    FALSE           reduce using rule 48 (boolean -> expression LESS_THAN_EQUAL expression .)
    $end            reduce using rule 48 (boolean -> expression LESS_THAN_EQUAL expression .)
    CLOSE_PAREN     reduce using rule 48 (boolean -> expression LESS_THAN_EQUAL expression .)
    SEMICOLON       reduce using rule 48 (boolean -> expression LESS_THAN_EQUAL expression .)
    COMMA           reduce using rule 48 (boolean -> expression LESS_THAN_EQUAL expression .)
    OPEN_KEY        reduce using rule 48 (boolean -> expression LESS_THAN_EQUAL expression .)
    CLOSE_KEY       reduce using rule 48 (boolean -> expression LESS_THAN_EQUAL expression .)
    PLUS            shift and go to state 32
    MINUS           shift and go to state 33
    MULT            shift and go to state 34
    DIV             shift and go to state 35
    EXP             shift and go to state 36
    MOD             shift and go to state 37
    BIT_AND         shift and go to state 38
    BIT_OR          shift and go to state 39
    BIT_XOR         shift and go to state 40
    EQUAL_TO        shift and go to state 41
    DIFF            shift and go to state 42
    GREATER_THAN    shift and go to state 43
    GREATER_THAN_EQUAL shift and go to state 44
    LESS_THAN       shift and go to state 45
    LESS_THAN_EQUAL shift and go to state 46
    AND             shift and go to state 47
    OR              shift and go to state 48

  ! PLUS            [ reduce using rule 48 (boolean -> expression LESS_THAN_EQUAL expression .) ]
  ! MINUS           [ reduce using rule 48 (boolean -> expression LESS_THAN_EQUAL expression .) ]
  ! MULT            [ reduce using rule 48 (boolean -> expression LESS_THAN_EQUAL expression .) ]
  ! DIV             [ reduce using rule 48 (boolean -> expression LESS_THAN_EQUAL expression .) ]
  ! EXP             [ reduce using rule 48 (boolean -> expression LESS_THAN_EQUAL expression .) ]
  ! MOD             [ reduce using rule 48 (boolean -> expression LESS_THAN_EQUAL expression .) ]
  ! BIT_AND         [ reduce using rule 48 (boolean -> expression LESS_THAN_EQUAL expression .) ]
  ! BIT_OR          [ reduce using rule 48 (boolean -> expression LESS_THAN_EQUAL expression .) ]
  ! BIT_XOR         [ reduce using rule 48 (boolean -> expression LESS_THAN_EQUAL expression .) ]
  ! EQUAL_TO        [ reduce using rule 48 (boolean -> expression LESS_THAN_EQUAL expression .) ]
  ! DIFF            [ reduce using rule 48 (boolean -> expression LESS_THAN_EQUAL expression .) ]
  ! GREATER_THAN    [ reduce using rule 48 (boolean -> expression LESS_THAN_EQUAL expression .) ]
  ! GREATER_THAN_EQUAL [ reduce using rule 48 (boolean -> expression LESS_THAN_EQUAL expression .) ]
  ! LESS_THAN       [ reduce using rule 48 (boolean -> expression LESS_THAN_EQUAL expression .) ]
  ! LESS_THAN_EQUAL [ reduce using rule 48 (boolean -> expression LESS_THAN_EQUAL expression .) ]
  ! AND             [ reduce using rule 48 (boolean -> expression LESS_THAN_EQUAL expression .) ]
  ! OR              [ reduce using rule 48 (boolean -> expression LESS_THAN_EQUAL expression .) ]


state 86

    (49) boolean -> expression AND expression .
    (19) expression -> expression . PLUS expression
    (20) expression -> expression . MINUS expression
    (21) expression -> expression . MULT expression
    (22) expression -> expression . DIV expression
    (23) expression -> expression . EXP expression
    (24) expression -> expression . MOD expression
    (25) expression -> expression . BIT_AND expression
    (26) expression -> expression . BIT_OR expression
    (27) expression -> expression . BIT_XOR expression
    (43) boolean -> expression . EQUAL_TO expression
    (44) boolean -> expression . DIFF expression
    (45) boolean -> expression . GREATER_THAN expression
    (46) boolean -> expression . GREATER_THAN_EQUAL expression
    (47) boolean -> expression . LESS_THAN expression
    (48) boolean -> expression . LESS_THAN_EQUAL expression
    (49) boolean -> expression . AND expression
    (50) boolean -> expression . OR expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULT resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for EXP resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for BIT_AND resolved as shift
  ! shift/reduce conflict for BIT_OR resolved as shift
  ! shift/reduce conflict for BIT_XOR resolved as shift
  ! shift/reduce conflict for EQUAL_TO resolved as shift
  ! shift/reduce conflict for DIFF resolved as shift
  ! shift/reduce conflict for GREATER_THAN resolved as shift
  ! shift/reduce conflict for GREATER_THAN_EQUAL resolved as shift
  ! shift/reduce conflict for LESS_THAN resolved as shift
  ! shift/reduce conflict for LESS_THAN_EQUAL resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    BREAK           reduce using rule 49 (boolean -> expression AND expression .)
    PRINT           reduce using rule 49 (boolean -> expression AND expression .)
    WHILE           reduce using rule 49 (boolean -> expression AND expression .)
    FOR             reduce using rule 49 (boolean -> expression AND expression .)
    FUNCTION        reduce using rule 49 (boolean -> expression AND expression .)
    RETURN          reduce using rule 49 (boolean -> expression AND expression .)
    VARIABLE        reduce using rule 49 (boolean -> expression AND expression .)
    BIT_NEG         reduce using rule 49 (boolean -> expression AND expression .)
    NOT             reduce using rule 49 (boolean -> expression AND expression .)
    OPEN_PAREN      reduce using rule 49 (boolean -> expression AND expression .)
    STRING          reduce using rule 49 (boolean -> expression AND expression .)
    IF              reduce using rule 49 (boolean -> expression AND expression .)
    NUM_INT         reduce using rule 49 (boolean -> expression AND expression .)
    NUM_FLOAT       reduce using rule 49 (boolean -> expression AND expression .)
    TRUE            reduce using rule 49 (boolean -> expression AND expression .)
    FALSE           reduce using rule 49 (boolean -> expression AND expression .)
    $end            reduce using rule 49 (boolean -> expression AND expression .)
    CLOSE_PAREN     reduce using rule 49 (boolean -> expression AND expression .)
    SEMICOLON       reduce using rule 49 (boolean -> expression AND expression .)
    COMMA           reduce using rule 49 (boolean -> expression AND expression .)
    OPEN_KEY        reduce using rule 49 (boolean -> expression AND expression .)
    CLOSE_KEY       reduce using rule 49 (boolean -> expression AND expression .)
    PLUS            shift and go to state 32
    MINUS           shift and go to state 33
    MULT            shift and go to state 34
    DIV             shift and go to state 35
    EXP             shift and go to state 36
    MOD             shift and go to state 37
    BIT_AND         shift and go to state 38
    BIT_OR          shift and go to state 39
    BIT_XOR         shift and go to state 40
    EQUAL_TO        shift and go to state 41
    DIFF            shift and go to state 42
    GREATER_THAN    shift and go to state 43
    GREATER_THAN_EQUAL shift and go to state 44
    LESS_THAN       shift and go to state 45
    LESS_THAN_EQUAL shift and go to state 46
    AND             shift and go to state 47
    OR              shift and go to state 48

  ! PLUS            [ reduce using rule 49 (boolean -> expression AND expression .) ]
  ! MINUS           [ reduce using rule 49 (boolean -> expression AND expression .) ]
  ! MULT            [ reduce using rule 49 (boolean -> expression AND expression .) ]
  ! DIV             [ reduce using rule 49 (boolean -> expression AND expression .) ]
  ! EXP             [ reduce using rule 49 (boolean -> expression AND expression .) ]
  ! MOD             [ reduce using rule 49 (boolean -> expression AND expression .) ]
  ! BIT_AND         [ reduce using rule 49 (boolean -> expression AND expression .) ]
  ! BIT_OR          [ reduce using rule 49 (boolean -> expression AND expression .) ]
  ! BIT_XOR         [ reduce using rule 49 (boolean -> expression AND expression .) ]
  ! EQUAL_TO        [ reduce using rule 49 (boolean -> expression AND expression .) ]
  ! DIFF            [ reduce using rule 49 (boolean -> expression AND expression .) ]
  ! GREATER_THAN    [ reduce using rule 49 (boolean -> expression AND expression .) ]
  ! GREATER_THAN_EQUAL [ reduce using rule 49 (boolean -> expression AND expression .) ]
  ! LESS_THAN       [ reduce using rule 49 (boolean -> expression AND expression .) ]
  ! LESS_THAN_EQUAL [ reduce using rule 49 (boolean -> expression AND expression .) ]
  ! AND             [ reduce using rule 49 (boolean -> expression AND expression .) ]
  ! OR              [ reduce using rule 49 (boolean -> expression AND expression .) ]


state 87

    (50) boolean -> expression OR expression .
    (19) expression -> expression . PLUS expression
    (20) expression -> expression . MINUS expression
    (21) expression -> expression . MULT expression
    (22) expression -> expression . DIV expression
    (23) expression -> expression . EXP expression
    (24) expression -> expression . MOD expression
    (25) expression -> expression . BIT_AND expression
    (26) expression -> expression . BIT_OR expression
    (27) expression -> expression . BIT_XOR expression
    (43) boolean -> expression . EQUAL_TO expression
    (44) boolean -> expression . DIFF expression
    (45) boolean -> expression . GREATER_THAN expression
    (46) boolean -> expression . GREATER_THAN_EQUAL expression
    (47) boolean -> expression . LESS_THAN expression
    (48) boolean -> expression . LESS_THAN_EQUAL expression
    (49) boolean -> expression . AND expression
    (50) boolean -> expression . OR expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULT resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for EXP resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for BIT_AND resolved as shift
  ! shift/reduce conflict for BIT_OR resolved as shift
  ! shift/reduce conflict for BIT_XOR resolved as shift
  ! shift/reduce conflict for EQUAL_TO resolved as shift
  ! shift/reduce conflict for DIFF resolved as shift
  ! shift/reduce conflict for GREATER_THAN resolved as shift
  ! shift/reduce conflict for GREATER_THAN_EQUAL resolved as shift
  ! shift/reduce conflict for LESS_THAN resolved as shift
  ! shift/reduce conflict for LESS_THAN_EQUAL resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    BREAK           reduce using rule 50 (boolean -> expression OR expression .)
    PRINT           reduce using rule 50 (boolean -> expression OR expression .)
    WHILE           reduce using rule 50 (boolean -> expression OR expression .)
    FOR             reduce using rule 50 (boolean -> expression OR expression .)
    FUNCTION        reduce using rule 50 (boolean -> expression OR expression .)
    RETURN          reduce using rule 50 (boolean -> expression OR expression .)
    VARIABLE        reduce using rule 50 (boolean -> expression OR expression .)
    BIT_NEG         reduce using rule 50 (boolean -> expression OR expression .)
    NOT             reduce using rule 50 (boolean -> expression OR expression .)
    OPEN_PAREN      reduce using rule 50 (boolean -> expression OR expression .)
    STRING          reduce using rule 50 (boolean -> expression OR expression .)
    IF              reduce using rule 50 (boolean -> expression OR expression .)
    NUM_INT         reduce using rule 50 (boolean -> expression OR expression .)
    NUM_FLOAT       reduce using rule 50 (boolean -> expression OR expression .)
    TRUE            reduce using rule 50 (boolean -> expression OR expression .)
    FALSE           reduce using rule 50 (boolean -> expression OR expression .)
    $end            reduce using rule 50 (boolean -> expression OR expression .)
    CLOSE_PAREN     reduce using rule 50 (boolean -> expression OR expression .)
    SEMICOLON       reduce using rule 50 (boolean -> expression OR expression .)
    COMMA           reduce using rule 50 (boolean -> expression OR expression .)
    OPEN_KEY        reduce using rule 50 (boolean -> expression OR expression .)
    CLOSE_KEY       reduce using rule 50 (boolean -> expression OR expression .)
    PLUS            shift and go to state 32
    MINUS           shift and go to state 33
    MULT            shift and go to state 34
    DIV             shift and go to state 35
    EXP             shift and go to state 36
    MOD             shift and go to state 37
    BIT_AND         shift and go to state 38
    BIT_OR          shift and go to state 39
    BIT_XOR         shift and go to state 40
    EQUAL_TO        shift and go to state 41
    DIFF            shift and go to state 42
    GREATER_THAN    shift and go to state 43
    GREATER_THAN_EQUAL shift and go to state 44
    LESS_THAN       shift and go to state 45
    LESS_THAN_EQUAL shift and go to state 46
    AND             shift and go to state 47
    OR              shift and go to state 48

  ! PLUS            [ reduce using rule 50 (boolean -> expression OR expression .) ]
  ! MINUS           [ reduce using rule 50 (boolean -> expression OR expression .) ]
  ! MULT            [ reduce using rule 50 (boolean -> expression OR expression .) ]
  ! DIV             [ reduce using rule 50 (boolean -> expression OR expression .) ]
  ! EXP             [ reduce using rule 50 (boolean -> expression OR expression .) ]
  ! MOD             [ reduce using rule 50 (boolean -> expression OR expression .) ]
  ! BIT_AND         [ reduce using rule 50 (boolean -> expression OR expression .) ]
  ! BIT_OR          [ reduce using rule 50 (boolean -> expression OR expression .) ]
  ! BIT_XOR         [ reduce using rule 50 (boolean -> expression OR expression .) ]
  ! EQUAL_TO        [ reduce using rule 50 (boolean -> expression OR expression .) ]
  ! DIFF            [ reduce using rule 50 (boolean -> expression OR expression .) ]
  ! GREATER_THAN    [ reduce using rule 50 (boolean -> expression OR expression .) ]
  ! GREATER_THAN_EQUAL [ reduce using rule 50 (boolean -> expression OR expression .) ]
  ! LESS_THAN       [ reduce using rule 50 (boolean -> expression OR expression .) ]
  ! LESS_THAN_EQUAL [ reduce using rule 50 (boolean -> expression OR expression .) ]
  ! AND             [ reduce using rule 50 (boolean -> expression OR expression .) ]
  ! OR              [ reduce using rule 50 (boolean -> expression OR expression .) ]


state 88

    (7) statement -> PRINT COLON OPEN_PAREN . arguments CLOSE_PAREN SEMICOLON
    (53) arguments -> . arguments COMMA expression
    (54) arguments -> . expression
    (55) arguments -> .
    (16) expression -> . variable OPEN_PAREN arguments CLOSE_PAREN
    (19) expression -> . expression PLUS expression
    (20) expression -> . expression MINUS expression
    (21) expression -> . expression MULT expression
    (22) expression -> . expression DIV expression
    (23) expression -> . expression EXP expression
    (24) expression -> . expression MOD expression
    (25) expression -> . expression BIT_AND expression
    (26) expression -> . expression BIT_OR expression
    (27) expression -> . expression BIT_XOR expression
    (28) expression -> . PLUS expression
    (29) expression -> . MINUS expression
    (30) expression -> . BIT_NEG expression
    (31) expression -> . NOT expression
    (32) expression -> . OPEN_PAREN expression CLOSE_PAREN
    (33) expression -> . variable ASSIGN assignable SEMICOLON
    (56) expression -> . primitive
    (57) expression -> . STRING
    (58) expression -> . variable
    (18) variable -> . VARIABLE
    (37) primitive -> . NUM_INT
    (38) primitive -> . NUM_FLOAT
    (39) primitive -> . STRING
    (40) primitive -> . boolean
    (41) boolean -> . TRUE
    (42) boolean -> . FALSE
    (43) boolean -> . expression EQUAL_TO expression
    (44) boolean -> . expression DIFF expression
    (45) boolean -> . expression GREATER_THAN expression
    (46) boolean -> . expression GREATER_THAN_EQUAL expression
    (47) boolean -> . expression LESS_THAN expression
    (48) boolean -> . expression LESS_THAN_EQUAL expression
    (49) boolean -> . expression AND expression
    (50) boolean -> . expression OR expression

    CLOSE_PAREN     reduce using rule 55 (arguments -> .)
    COMMA           reduce using rule 55 (arguments -> .)
    PLUS            shift and go to state 14
    MINUS           shift and go to state 15
    BIT_NEG         shift and go to state 16
    NOT             shift and go to state 17
    OPEN_PAREN      shift and go to state 8
    STRING          shift and go to state 19
    VARIABLE        shift and go to state 13
    NUM_INT         shift and go to state 21
    NUM_FLOAT       shift and go to state 22
    TRUE            shift and go to state 24
    FALSE           shift and go to state 25

    arguments                      shift and go to state 103
    expression                     shift and go to state 66
    variable                       shift and go to state 52
    primitive                      shift and go to state 18
    boolean                        shift and go to state 23

state 89

    (32) expression -> OPEN_PAREN expression CLOSE_PAREN .

    PLUS            reduce using rule 32 (expression -> OPEN_PAREN expression CLOSE_PAREN .)
    MINUS           reduce using rule 32 (expression -> OPEN_PAREN expression CLOSE_PAREN .)
    MULT            reduce using rule 32 (expression -> OPEN_PAREN expression CLOSE_PAREN .)
    DIV             reduce using rule 32 (expression -> OPEN_PAREN expression CLOSE_PAREN .)
    EXP             reduce using rule 32 (expression -> OPEN_PAREN expression CLOSE_PAREN .)
    MOD             reduce using rule 32 (expression -> OPEN_PAREN expression CLOSE_PAREN .)
    BIT_AND         reduce using rule 32 (expression -> OPEN_PAREN expression CLOSE_PAREN .)
    BIT_OR          reduce using rule 32 (expression -> OPEN_PAREN expression CLOSE_PAREN .)
    BIT_XOR         reduce using rule 32 (expression -> OPEN_PAREN expression CLOSE_PAREN .)
    EQUAL_TO        reduce using rule 32 (expression -> OPEN_PAREN expression CLOSE_PAREN .)
    DIFF            reduce using rule 32 (expression -> OPEN_PAREN expression CLOSE_PAREN .)
    GREATER_THAN    reduce using rule 32 (expression -> OPEN_PAREN expression CLOSE_PAREN .)
    GREATER_THAN_EQUAL reduce using rule 32 (expression -> OPEN_PAREN expression CLOSE_PAREN .)
    LESS_THAN       reduce using rule 32 (expression -> OPEN_PAREN expression CLOSE_PAREN .)
    LESS_THAN_EQUAL reduce using rule 32 (expression -> OPEN_PAREN expression CLOSE_PAREN .)
    AND             reduce using rule 32 (expression -> OPEN_PAREN expression CLOSE_PAREN .)
    OR              reduce using rule 32 (expression -> OPEN_PAREN expression CLOSE_PAREN .)
    BREAK           reduce using rule 32 (expression -> OPEN_PAREN expression CLOSE_PAREN .)
    PRINT           reduce using rule 32 (expression -> OPEN_PAREN expression CLOSE_PAREN .)
    WHILE           reduce using rule 32 (expression -> OPEN_PAREN expression CLOSE_PAREN .)
    FOR             reduce using rule 32 (expression -> OPEN_PAREN expression CLOSE_PAREN .)
    FUNCTION        reduce using rule 32 (expression -> OPEN_PAREN expression CLOSE_PAREN .)
    RETURN          reduce using rule 32 (expression -> OPEN_PAREN expression CLOSE_PAREN .)
    VARIABLE        reduce using rule 32 (expression -> OPEN_PAREN expression CLOSE_PAREN .)
    BIT_NEG         reduce using rule 32 (expression -> OPEN_PAREN expression CLOSE_PAREN .)
    NOT             reduce using rule 32 (expression -> OPEN_PAREN expression CLOSE_PAREN .)
    OPEN_PAREN      reduce using rule 32 (expression -> OPEN_PAREN expression CLOSE_PAREN .)
    STRING          reduce using rule 32 (expression -> OPEN_PAREN expression CLOSE_PAREN .)
    IF              reduce using rule 32 (expression -> OPEN_PAREN expression CLOSE_PAREN .)
    NUM_INT         reduce using rule 32 (expression -> OPEN_PAREN expression CLOSE_PAREN .)
    NUM_FLOAT       reduce using rule 32 (expression -> OPEN_PAREN expression CLOSE_PAREN .)
    TRUE            reduce using rule 32 (expression -> OPEN_PAREN expression CLOSE_PAREN .)
    FALSE           reduce using rule 32 (expression -> OPEN_PAREN expression CLOSE_PAREN .)
    $end            reduce using rule 32 (expression -> OPEN_PAREN expression CLOSE_PAREN .)
    CLOSE_PAREN     reduce using rule 32 (expression -> OPEN_PAREN expression CLOSE_PAREN .)
    SEMICOLON       reduce using rule 32 (expression -> OPEN_PAREN expression CLOSE_PAREN .)
    COMMA           reduce using rule 32 (expression -> OPEN_PAREN expression CLOSE_PAREN .)
    OPEN_KEY        reduce using rule 32 (expression -> OPEN_PAREN expression CLOSE_PAREN .)
    CLOSE_KEY       reduce using rule 32 (expression -> OPEN_PAREN expression CLOSE_PAREN .)


state 90

    (16) expression -> variable OPEN_PAREN . arguments CLOSE_PAREN
    (53) arguments -> . arguments COMMA expression
    (54) arguments -> . expression
    (55) arguments -> .
    (16) expression -> . variable OPEN_PAREN arguments CLOSE_PAREN
    (19) expression -> . expression PLUS expression
    (20) expression -> . expression MINUS expression
    (21) expression -> . expression MULT expression
    (22) expression -> . expression DIV expression
    (23) expression -> . expression EXP expression
    (24) expression -> . expression MOD expression
    (25) expression -> . expression BIT_AND expression
    (26) expression -> . expression BIT_OR expression
    (27) expression -> . expression BIT_XOR expression
    (28) expression -> . PLUS expression
    (29) expression -> . MINUS expression
    (30) expression -> . BIT_NEG expression
    (31) expression -> . NOT expression
    (32) expression -> . OPEN_PAREN expression CLOSE_PAREN
    (33) expression -> . variable ASSIGN assignable SEMICOLON
    (56) expression -> . primitive
    (57) expression -> . STRING
    (58) expression -> . variable
    (18) variable -> . VARIABLE
    (37) primitive -> . NUM_INT
    (38) primitive -> . NUM_FLOAT
    (39) primitive -> . STRING
    (40) primitive -> . boolean
    (41) boolean -> . TRUE
    (42) boolean -> . FALSE
    (43) boolean -> . expression EQUAL_TO expression
    (44) boolean -> . expression DIFF expression
    (45) boolean -> . expression GREATER_THAN expression
    (46) boolean -> . expression GREATER_THAN_EQUAL expression
    (47) boolean -> . expression LESS_THAN expression
    (48) boolean -> . expression LESS_THAN_EQUAL expression
    (49) boolean -> . expression AND expression
    (50) boolean -> . expression OR expression

    CLOSE_PAREN     reduce using rule 55 (arguments -> .)
    COMMA           reduce using rule 55 (arguments -> .)
    PLUS            shift and go to state 14
    MINUS           shift and go to state 15
    BIT_NEG         shift and go to state 16
    NOT             shift and go to state 17
    OPEN_PAREN      shift and go to state 8
    STRING          shift and go to state 19
    VARIABLE        shift and go to state 13
    NUM_INT         shift and go to state 21
    NUM_FLOAT       shift and go to state 22
    TRUE            shift and go to state 24
    FALSE           shift and go to state 25

    variable                       shift and go to state 52
    arguments                      shift and go to state 104
    expression                     shift and go to state 66
    primitive                      shift and go to state 18
    boolean                        shift and go to state 23

state 91

    (11) statement -> WHILE COLON expression . OPEN_KEY statement_list CLOSE_KEY
    (19) expression -> expression . PLUS expression
    (20) expression -> expression . MINUS expression
    (21) expression -> expression . MULT expression
    (22) expression -> expression . DIV expression
    (23) expression -> expression . EXP expression
    (24) expression -> expression . MOD expression
    (25) expression -> expression . BIT_AND expression
    (26) expression -> expression . BIT_OR expression
    (27) expression -> expression . BIT_XOR expression
    (43) boolean -> expression . EQUAL_TO expression
    (44) boolean -> expression . DIFF expression
    (45) boolean -> expression . GREATER_THAN expression
    (46) boolean -> expression . GREATER_THAN_EQUAL expression
    (47) boolean -> expression . LESS_THAN expression
    (48) boolean -> expression . LESS_THAN_EQUAL expression
    (49) boolean -> expression . AND expression
    (50) boolean -> expression . OR expression

    OPEN_KEY        shift and go to state 105
    PLUS            shift and go to state 32
    MINUS           shift and go to state 33
    MULT            shift and go to state 34
    DIV             shift and go to state 35
    EXP             shift and go to state 36
    MOD             shift and go to state 37
    BIT_AND         shift and go to state 38
    BIT_OR          shift and go to state 39
    BIT_XOR         shift and go to state 40
    EQUAL_TO        shift and go to state 41
    DIFF            shift and go to state 42
    GREATER_THAN    shift and go to state 43
    GREATER_THAN_EQUAL shift and go to state 44
    LESS_THAN       shift and go to state 45
    LESS_THAN_EQUAL shift and go to state 46
    AND             shift and go to state 47
    OR              shift and go to state 48


state 92

    (12) statement -> FOR COLON OPEN_KEY . statement_list CLOSE_KEY
    (1) statement_list -> . statement
    (2) statement_list -> . statement_list statement
    (3) statement -> . variable
    (4) statement -> . expression
    (5) statement -> . if_statement
    (6) statement -> . BREAK SEMICOLON
    (7) statement -> . PRINT COLON OPEN_PAREN arguments CLOSE_PAREN SEMICOLON
    (8) statement -> . variable PLUS_EQ expression SEMICOLON
    (9) statement -> . variable MINUS_EQ expression SEMICOLON
    (10) statement -> . variable MULT_EQ expression SEMICOLON
    (11) statement -> . WHILE COLON expression OPEN_KEY statement_list CLOSE_KEY
    (12) statement -> . FOR COLON OPEN_KEY statement_list CLOSE_KEY
    (13) statement -> . FUNCTION variable OPEN_PAREN arguments CLOSE_PAREN OPEN_KEY statement_list CLOSE_KEY
    (14) statement -> . FUNCTION variable OPEN_KEY statement_list CLOSE_KEY
    (15) statement -> . RETURN expression SEMICOLON
    (17) statement -> . variable OPEN_PAREN arguments CLOSE_PAREN SEMICOLON
    (18) variable -> . VARIABLE
    (16) expression -> . variable OPEN_PAREN arguments CLOSE_PAREN
    (19) expression -> . expression PLUS expression
    (20) expression -> . expression MINUS expression
    (21) expression -> . expression MULT expression
    (22) expression -> . expression DIV expression
    (23) expression -> . expression EXP expression
    (24) expression -> . expression MOD expression
    (25) expression -> . expression BIT_AND expression
    (26) expression -> . expression BIT_OR expression
    (27) expression -> . expression BIT_XOR expression
    (28) expression -> . PLUS expression
    (29) expression -> . MINUS expression
    (30) expression -> . BIT_NEG expression
    (31) expression -> . NOT expression
    (32) expression -> . OPEN_PAREN expression CLOSE_PAREN
    (33) expression -> . variable ASSIGN assignable SEMICOLON
    (56) expression -> . primitive
    (57) expression -> . STRING
    (58) expression -> . variable
    (34) if_statement -> . IF COLON expression OPEN_KEY statement_list CLOSE_KEY
    (35) if_statement -> . IF COLON expression OPEN_KEY statement_list CLOSE_KEY ELSE COLON OPEN_KEY statement_list CLOSE_KEY
    (36) if_statement -> . IF COLON expression OPEN_KEY statement_list CLOSE_KEY ELSE COLON if_statement
    (37) primitive -> . NUM_INT
    (38) primitive -> . NUM_FLOAT
    (39) primitive -> . STRING
    (40) primitive -> . boolean
    (41) boolean -> . TRUE
    (42) boolean -> . FALSE
    (43) boolean -> . expression EQUAL_TO expression
    (44) boolean -> . expression DIFF expression
    (45) boolean -> . expression GREATER_THAN expression
    (46) boolean -> . expression GREATER_THAN_EQUAL expression
    (47) boolean -> . expression LESS_THAN expression
    (48) boolean -> . expression LESS_THAN_EQUAL expression
    (49) boolean -> . expression AND expression
    (50) boolean -> . expression OR expression

    BREAK           shift and go to state 6
    PRINT           shift and go to state 7
    WHILE           shift and go to state 9
    FOR             shift and go to state 10
    FUNCTION        shift and go to state 11
    RETURN          shift and go to state 12
    VARIABLE        shift and go to state 13
    PLUS            shift and go to state 14
    MINUS           shift and go to state 15
    BIT_NEG         shift and go to state 16
    NOT             shift and go to state 17
    OPEN_PAREN      shift and go to state 8
    STRING          shift and go to state 19
    IF              shift and go to state 20
    NUM_INT         shift and go to state 21
    NUM_FLOAT       shift and go to state 22
    TRUE            shift and go to state 24
    FALSE           shift and go to state 25

    statement_list                 shift and go to state 106
    statement                      shift and go to state 2
    variable                       shift and go to state 3
    expression                     shift and go to state 4
    if_statement                   shift and go to state 5
    primitive                      shift and go to state 18
    boolean                        shift and go to state 23

state 93

    (13) statement -> FUNCTION variable OPEN_PAREN . arguments CLOSE_PAREN OPEN_KEY statement_list CLOSE_KEY
    (53) arguments -> . arguments COMMA expression
    (54) arguments -> . expression
    (55) arguments -> .
    (16) expression -> . variable OPEN_PAREN arguments CLOSE_PAREN
    (19) expression -> . expression PLUS expression
    (20) expression -> . expression MINUS expression
    (21) expression -> . expression MULT expression
    (22) expression -> . expression DIV expression
    (23) expression -> . expression EXP expression
    (24) expression -> . expression MOD expression
    (25) expression -> . expression BIT_AND expression
    (26) expression -> . expression BIT_OR expression
    (27) expression -> . expression BIT_XOR expression
    (28) expression -> . PLUS expression
    (29) expression -> . MINUS expression
    (30) expression -> . BIT_NEG expression
    (31) expression -> . NOT expression
    (32) expression -> . OPEN_PAREN expression CLOSE_PAREN
    (33) expression -> . variable ASSIGN assignable SEMICOLON
    (56) expression -> . primitive
    (57) expression -> . STRING
    (58) expression -> . variable
    (18) variable -> . VARIABLE
    (37) primitive -> . NUM_INT
    (38) primitive -> . NUM_FLOAT
    (39) primitive -> . STRING
    (40) primitive -> . boolean
    (41) boolean -> . TRUE
    (42) boolean -> . FALSE
    (43) boolean -> . expression EQUAL_TO expression
    (44) boolean -> . expression DIFF expression
    (45) boolean -> . expression GREATER_THAN expression
    (46) boolean -> . expression GREATER_THAN_EQUAL expression
    (47) boolean -> . expression LESS_THAN expression
    (48) boolean -> . expression LESS_THAN_EQUAL expression
    (49) boolean -> . expression AND expression
    (50) boolean -> . expression OR expression

    CLOSE_PAREN     reduce using rule 55 (arguments -> .)
    COMMA           reduce using rule 55 (arguments -> .)
    PLUS            shift and go to state 14
    MINUS           shift and go to state 15
    BIT_NEG         shift and go to state 16
    NOT             shift and go to state 17
    OPEN_PAREN      shift and go to state 8
    STRING          shift and go to state 19
    VARIABLE        shift and go to state 13
    NUM_INT         shift and go to state 21
    NUM_FLOAT       shift and go to state 22
    TRUE            shift and go to state 24
    FALSE           shift and go to state 25

    variable                       shift and go to state 52
    arguments                      shift and go to state 107
    expression                     shift and go to state 66
    primitive                      shift and go to state 18
    boolean                        shift and go to state 23

state 94

    (14) statement -> FUNCTION variable OPEN_KEY . statement_list CLOSE_KEY
    (1) statement_list -> . statement
    (2) statement_list -> . statement_list statement
    (3) statement -> . variable
    (4) statement -> . expression
    (5) statement -> . if_statement
    (6) statement -> . BREAK SEMICOLON
    (7) statement -> . PRINT COLON OPEN_PAREN arguments CLOSE_PAREN SEMICOLON
    (8) statement -> . variable PLUS_EQ expression SEMICOLON
    (9) statement -> . variable MINUS_EQ expression SEMICOLON
    (10) statement -> . variable MULT_EQ expression SEMICOLON
    (11) statement -> . WHILE COLON expression OPEN_KEY statement_list CLOSE_KEY
    (12) statement -> . FOR COLON OPEN_KEY statement_list CLOSE_KEY
    (13) statement -> . FUNCTION variable OPEN_PAREN arguments CLOSE_PAREN OPEN_KEY statement_list CLOSE_KEY
    (14) statement -> . FUNCTION variable OPEN_KEY statement_list CLOSE_KEY
    (15) statement -> . RETURN expression SEMICOLON
    (17) statement -> . variable OPEN_PAREN arguments CLOSE_PAREN SEMICOLON
    (18) variable -> . VARIABLE
    (16) expression -> . variable OPEN_PAREN arguments CLOSE_PAREN
    (19) expression -> . expression PLUS expression
    (20) expression -> . expression MINUS expression
    (21) expression -> . expression MULT expression
    (22) expression -> . expression DIV expression
    (23) expression -> . expression EXP expression
    (24) expression -> . expression MOD expression
    (25) expression -> . expression BIT_AND expression
    (26) expression -> . expression BIT_OR expression
    (27) expression -> . expression BIT_XOR expression
    (28) expression -> . PLUS expression
    (29) expression -> . MINUS expression
    (30) expression -> . BIT_NEG expression
    (31) expression -> . NOT expression
    (32) expression -> . OPEN_PAREN expression CLOSE_PAREN
    (33) expression -> . variable ASSIGN assignable SEMICOLON
    (56) expression -> . primitive
    (57) expression -> . STRING
    (58) expression -> . variable
    (34) if_statement -> . IF COLON expression OPEN_KEY statement_list CLOSE_KEY
    (35) if_statement -> . IF COLON expression OPEN_KEY statement_list CLOSE_KEY ELSE COLON OPEN_KEY statement_list CLOSE_KEY
    (36) if_statement -> . IF COLON expression OPEN_KEY statement_list CLOSE_KEY ELSE COLON if_statement
    (37) primitive -> . NUM_INT
    (38) primitive -> . NUM_FLOAT
    (39) primitive -> . STRING
    (40) primitive -> . boolean
    (41) boolean -> . TRUE
    (42) boolean -> . FALSE
    (43) boolean -> . expression EQUAL_TO expression
    (44) boolean -> . expression DIFF expression
    (45) boolean -> . expression GREATER_THAN expression
    (46) boolean -> . expression GREATER_THAN_EQUAL expression
    (47) boolean -> . expression LESS_THAN expression
    (48) boolean -> . expression LESS_THAN_EQUAL expression
    (49) boolean -> . expression AND expression
    (50) boolean -> . expression OR expression

    BREAK           shift and go to state 6
    PRINT           shift and go to state 7
    WHILE           shift and go to state 9
    FOR             shift and go to state 10
    FUNCTION        shift and go to state 11
    RETURN          shift and go to state 12
    VARIABLE        shift and go to state 13
    PLUS            shift and go to state 14
    MINUS           shift and go to state 15
    BIT_NEG         shift and go to state 16
    NOT             shift and go to state 17
    OPEN_PAREN      shift and go to state 8
    STRING          shift and go to state 19
    IF              shift and go to state 20
    NUM_INT         shift and go to state 21
    NUM_FLOAT       shift and go to state 22
    TRUE            shift and go to state 24
    FALSE           shift and go to state 25

    variable                       shift and go to state 3
    statement_list                 shift and go to state 108
    statement                      shift and go to state 2
    expression                     shift and go to state 4
    if_statement                   shift and go to state 5
    primitive                      shift and go to state 18
    boolean                        shift and go to state 23

state 95

    (15) statement -> RETURN expression SEMICOLON .

    BREAK           reduce using rule 15 (statement -> RETURN expression SEMICOLON .)
    PRINT           reduce using rule 15 (statement -> RETURN expression SEMICOLON .)
    WHILE           reduce using rule 15 (statement -> RETURN expression SEMICOLON .)
    FOR             reduce using rule 15 (statement -> RETURN expression SEMICOLON .)
    FUNCTION        reduce using rule 15 (statement -> RETURN expression SEMICOLON .)
    RETURN          reduce using rule 15 (statement -> RETURN expression SEMICOLON .)
    VARIABLE        reduce using rule 15 (statement -> RETURN expression SEMICOLON .)
    PLUS            reduce using rule 15 (statement -> RETURN expression SEMICOLON .)
    MINUS           reduce using rule 15 (statement -> RETURN expression SEMICOLON .)
    BIT_NEG         reduce using rule 15 (statement -> RETURN expression SEMICOLON .)
    NOT             reduce using rule 15 (statement -> RETURN expression SEMICOLON .)
    OPEN_PAREN      reduce using rule 15 (statement -> RETURN expression SEMICOLON .)
    STRING          reduce using rule 15 (statement -> RETURN expression SEMICOLON .)
    IF              reduce using rule 15 (statement -> RETURN expression SEMICOLON .)
    NUM_INT         reduce using rule 15 (statement -> RETURN expression SEMICOLON .)
    NUM_FLOAT       reduce using rule 15 (statement -> RETURN expression SEMICOLON .)
    TRUE            reduce using rule 15 (statement -> RETURN expression SEMICOLON .)
    FALSE           reduce using rule 15 (statement -> RETURN expression SEMICOLON .)
    $end            reduce using rule 15 (statement -> RETURN expression SEMICOLON .)
    CLOSE_KEY       reduce using rule 15 (statement -> RETURN expression SEMICOLON .)


state 96

    (34) if_statement -> IF COLON expression . OPEN_KEY statement_list CLOSE_KEY
    (35) if_statement -> IF COLON expression . OPEN_KEY statement_list CLOSE_KEY ELSE COLON OPEN_KEY statement_list CLOSE_KEY
    (36) if_statement -> IF COLON expression . OPEN_KEY statement_list CLOSE_KEY ELSE COLON if_statement
    (19) expression -> expression . PLUS expression
    (20) expression -> expression . MINUS expression
    (21) expression -> expression . MULT expression
    (22) expression -> expression . DIV expression
    (23) expression -> expression . EXP expression
    (24) expression -> expression . MOD expression
    (25) expression -> expression . BIT_AND expression
    (26) expression -> expression . BIT_OR expression
    (27) expression -> expression . BIT_XOR expression
    (43) boolean -> expression . EQUAL_TO expression
    (44) boolean -> expression . DIFF expression
    (45) boolean -> expression . GREATER_THAN expression
    (46) boolean -> expression . GREATER_THAN_EQUAL expression
    (47) boolean -> expression . LESS_THAN expression
    (48) boolean -> expression . LESS_THAN_EQUAL expression
    (49) boolean -> expression . AND expression
    (50) boolean -> expression . OR expression

    OPEN_KEY        shift and go to state 109
    PLUS            shift and go to state 32
    MINUS           shift and go to state 33
    MULT            shift and go to state 34
    DIV             shift and go to state 35
    EXP             shift and go to state 36
    MOD             shift and go to state 37
    BIT_AND         shift and go to state 38
    BIT_OR          shift and go to state 39
    BIT_XOR         shift and go to state 40
    EQUAL_TO        shift and go to state 41
    DIFF            shift and go to state 42
    GREATER_THAN    shift and go to state 43
    GREATER_THAN_EQUAL shift and go to state 44
    LESS_THAN       shift and go to state 45
    LESS_THAN_EQUAL shift and go to state 46
    AND             shift and go to state 47
    OR              shift and go to state 48


state 97

    (8) statement -> variable PLUS_EQ expression SEMICOLON .

    BREAK           reduce using rule 8 (statement -> variable PLUS_EQ expression SEMICOLON .)
    PRINT           reduce using rule 8 (statement -> variable PLUS_EQ expression SEMICOLON .)
    WHILE           reduce using rule 8 (statement -> variable PLUS_EQ expression SEMICOLON .)
    FOR             reduce using rule 8 (statement -> variable PLUS_EQ expression SEMICOLON .)
    FUNCTION        reduce using rule 8 (statement -> variable PLUS_EQ expression SEMICOLON .)
    RETURN          reduce using rule 8 (statement -> variable PLUS_EQ expression SEMICOLON .)
    VARIABLE        reduce using rule 8 (statement -> variable PLUS_EQ expression SEMICOLON .)
    PLUS            reduce using rule 8 (statement -> variable PLUS_EQ expression SEMICOLON .)
    MINUS           reduce using rule 8 (statement -> variable PLUS_EQ expression SEMICOLON .)
    BIT_NEG         reduce using rule 8 (statement -> variable PLUS_EQ expression SEMICOLON .)
    NOT             reduce using rule 8 (statement -> variable PLUS_EQ expression SEMICOLON .)
    OPEN_PAREN      reduce using rule 8 (statement -> variable PLUS_EQ expression SEMICOLON .)
    STRING          reduce using rule 8 (statement -> variable PLUS_EQ expression SEMICOLON .)
    IF              reduce using rule 8 (statement -> variable PLUS_EQ expression SEMICOLON .)
    NUM_INT         reduce using rule 8 (statement -> variable PLUS_EQ expression SEMICOLON .)
    NUM_FLOAT       reduce using rule 8 (statement -> variable PLUS_EQ expression SEMICOLON .)
    TRUE            reduce using rule 8 (statement -> variable PLUS_EQ expression SEMICOLON .)
    FALSE           reduce using rule 8 (statement -> variable PLUS_EQ expression SEMICOLON .)
    $end            reduce using rule 8 (statement -> variable PLUS_EQ expression SEMICOLON .)
    CLOSE_KEY       reduce using rule 8 (statement -> variable PLUS_EQ expression SEMICOLON .)


state 98

    (9) statement -> variable MINUS_EQ expression SEMICOLON .

    BREAK           reduce using rule 9 (statement -> variable MINUS_EQ expression SEMICOLON .)
    PRINT           reduce using rule 9 (statement -> variable MINUS_EQ expression SEMICOLON .)
    WHILE           reduce using rule 9 (statement -> variable MINUS_EQ expression SEMICOLON .)
    FOR             reduce using rule 9 (statement -> variable MINUS_EQ expression SEMICOLON .)
    FUNCTION        reduce using rule 9 (statement -> variable MINUS_EQ expression SEMICOLON .)
    RETURN          reduce using rule 9 (statement -> variable MINUS_EQ expression SEMICOLON .)
    VARIABLE        reduce using rule 9 (statement -> variable MINUS_EQ expression SEMICOLON .)
    PLUS            reduce using rule 9 (statement -> variable MINUS_EQ expression SEMICOLON .)
    MINUS           reduce using rule 9 (statement -> variable MINUS_EQ expression SEMICOLON .)
    BIT_NEG         reduce using rule 9 (statement -> variable MINUS_EQ expression SEMICOLON .)
    NOT             reduce using rule 9 (statement -> variable MINUS_EQ expression SEMICOLON .)
    OPEN_PAREN      reduce using rule 9 (statement -> variable MINUS_EQ expression SEMICOLON .)
    STRING          reduce using rule 9 (statement -> variable MINUS_EQ expression SEMICOLON .)
    IF              reduce using rule 9 (statement -> variable MINUS_EQ expression SEMICOLON .)
    NUM_INT         reduce using rule 9 (statement -> variable MINUS_EQ expression SEMICOLON .)
    NUM_FLOAT       reduce using rule 9 (statement -> variable MINUS_EQ expression SEMICOLON .)
    TRUE            reduce using rule 9 (statement -> variable MINUS_EQ expression SEMICOLON .)
    FALSE           reduce using rule 9 (statement -> variable MINUS_EQ expression SEMICOLON .)
    $end            reduce using rule 9 (statement -> variable MINUS_EQ expression SEMICOLON .)
    CLOSE_KEY       reduce using rule 9 (statement -> variable MINUS_EQ expression SEMICOLON .)


state 99

    (10) statement -> variable MULT_EQ expression SEMICOLON .

    BREAK           reduce using rule 10 (statement -> variable MULT_EQ expression SEMICOLON .)
    PRINT           reduce using rule 10 (statement -> variable MULT_EQ expression SEMICOLON .)
    WHILE           reduce using rule 10 (statement -> variable MULT_EQ expression SEMICOLON .)
    FOR             reduce using rule 10 (statement -> variable MULT_EQ expression SEMICOLON .)
    FUNCTION        reduce using rule 10 (statement -> variable MULT_EQ expression SEMICOLON .)
    RETURN          reduce using rule 10 (statement -> variable MULT_EQ expression SEMICOLON .)
    VARIABLE        reduce using rule 10 (statement -> variable MULT_EQ expression SEMICOLON .)
    PLUS            reduce using rule 10 (statement -> variable MULT_EQ expression SEMICOLON .)
    MINUS           reduce using rule 10 (statement -> variable MULT_EQ expression SEMICOLON .)
    BIT_NEG         reduce using rule 10 (statement -> variable MULT_EQ expression SEMICOLON .)
    NOT             reduce using rule 10 (statement -> variable MULT_EQ expression SEMICOLON .)
    OPEN_PAREN      reduce using rule 10 (statement -> variable MULT_EQ expression SEMICOLON .)
    STRING          reduce using rule 10 (statement -> variable MULT_EQ expression SEMICOLON .)
    IF              reduce using rule 10 (statement -> variable MULT_EQ expression SEMICOLON .)
    NUM_INT         reduce using rule 10 (statement -> variable MULT_EQ expression SEMICOLON .)
    NUM_FLOAT       reduce using rule 10 (statement -> variable MULT_EQ expression SEMICOLON .)
    TRUE            reduce using rule 10 (statement -> variable MULT_EQ expression SEMICOLON .)
    FALSE           reduce using rule 10 (statement -> variable MULT_EQ expression SEMICOLON .)
    $end            reduce using rule 10 (statement -> variable MULT_EQ expression SEMICOLON .)
    CLOSE_KEY       reduce using rule 10 (statement -> variable MULT_EQ expression SEMICOLON .)


state 100

    (17) statement -> variable OPEN_PAREN arguments CLOSE_PAREN . SEMICOLON
    (16) expression -> variable OPEN_PAREN arguments CLOSE_PAREN .

    SEMICOLON       shift and go to state 110
    PLUS            reduce using rule 16 (expression -> variable OPEN_PAREN arguments CLOSE_PAREN .)
    MINUS           reduce using rule 16 (expression -> variable OPEN_PAREN arguments CLOSE_PAREN .)
    MULT            reduce using rule 16 (expression -> variable OPEN_PAREN arguments CLOSE_PAREN .)
    DIV             reduce using rule 16 (expression -> variable OPEN_PAREN arguments CLOSE_PAREN .)
    EXP             reduce using rule 16 (expression -> variable OPEN_PAREN arguments CLOSE_PAREN .)
    MOD             reduce using rule 16 (expression -> variable OPEN_PAREN arguments CLOSE_PAREN .)
    BIT_AND         reduce using rule 16 (expression -> variable OPEN_PAREN arguments CLOSE_PAREN .)
    BIT_OR          reduce using rule 16 (expression -> variable OPEN_PAREN arguments CLOSE_PAREN .)
    BIT_XOR         reduce using rule 16 (expression -> variable OPEN_PAREN arguments CLOSE_PAREN .)
    EQUAL_TO        reduce using rule 16 (expression -> variable OPEN_PAREN arguments CLOSE_PAREN .)
    DIFF            reduce using rule 16 (expression -> variable OPEN_PAREN arguments CLOSE_PAREN .)
    GREATER_THAN    reduce using rule 16 (expression -> variable OPEN_PAREN arguments CLOSE_PAREN .)
    GREATER_THAN_EQUAL reduce using rule 16 (expression -> variable OPEN_PAREN arguments CLOSE_PAREN .)
    LESS_THAN       reduce using rule 16 (expression -> variable OPEN_PAREN arguments CLOSE_PAREN .)
    LESS_THAN_EQUAL reduce using rule 16 (expression -> variable OPEN_PAREN arguments CLOSE_PAREN .)
    AND             reduce using rule 16 (expression -> variable OPEN_PAREN arguments CLOSE_PAREN .)
    OR              reduce using rule 16 (expression -> variable OPEN_PAREN arguments CLOSE_PAREN .)
    BREAK           reduce using rule 16 (expression -> variable OPEN_PAREN arguments CLOSE_PAREN .)
    PRINT           reduce using rule 16 (expression -> variable OPEN_PAREN arguments CLOSE_PAREN .)
    WHILE           reduce using rule 16 (expression -> variable OPEN_PAREN arguments CLOSE_PAREN .)
    FOR             reduce using rule 16 (expression -> variable OPEN_PAREN arguments CLOSE_PAREN .)
    FUNCTION        reduce using rule 16 (expression -> variable OPEN_PAREN arguments CLOSE_PAREN .)
    RETURN          reduce using rule 16 (expression -> variable OPEN_PAREN arguments CLOSE_PAREN .)
    VARIABLE        reduce using rule 16 (expression -> variable OPEN_PAREN arguments CLOSE_PAREN .)
    BIT_NEG         reduce using rule 16 (expression -> variable OPEN_PAREN arguments CLOSE_PAREN .)
    NOT             reduce using rule 16 (expression -> variable OPEN_PAREN arguments CLOSE_PAREN .)
    OPEN_PAREN      reduce using rule 16 (expression -> variable OPEN_PAREN arguments CLOSE_PAREN .)
    STRING          reduce using rule 16 (expression -> variable OPEN_PAREN arguments CLOSE_PAREN .)
    IF              reduce using rule 16 (expression -> variable OPEN_PAREN arguments CLOSE_PAREN .)
    NUM_INT         reduce using rule 16 (expression -> variable OPEN_PAREN arguments CLOSE_PAREN .)
    NUM_FLOAT       reduce using rule 16 (expression -> variable OPEN_PAREN arguments CLOSE_PAREN .)
    TRUE            reduce using rule 16 (expression -> variable OPEN_PAREN arguments CLOSE_PAREN .)
    FALSE           reduce using rule 16 (expression -> variable OPEN_PAREN arguments CLOSE_PAREN .)
    $end            reduce using rule 16 (expression -> variable OPEN_PAREN arguments CLOSE_PAREN .)
    CLOSE_KEY       reduce using rule 16 (expression -> variable OPEN_PAREN arguments CLOSE_PAREN .)


state 101

    (53) arguments -> arguments COMMA . expression
    (16) expression -> . variable OPEN_PAREN arguments CLOSE_PAREN
    (19) expression -> . expression PLUS expression
    (20) expression -> . expression MINUS expression
    (21) expression -> . expression MULT expression
    (22) expression -> . expression DIV expression
    (23) expression -> . expression EXP expression
    (24) expression -> . expression MOD expression
    (25) expression -> . expression BIT_AND expression
    (26) expression -> . expression BIT_OR expression
    (27) expression -> . expression BIT_XOR expression
    (28) expression -> . PLUS expression
    (29) expression -> . MINUS expression
    (30) expression -> . BIT_NEG expression
    (31) expression -> . NOT expression
    (32) expression -> . OPEN_PAREN expression CLOSE_PAREN
    (33) expression -> . variable ASSIGN assignable SEMICOLON
    (56) expression -> . primitive
    (57) expression -> . STRING
    (58) expression -> . variable
    (18) variable -> . VARIABLE
    (37) primitive -> . NUM_INT
    (38) primitive -> . NUM_FLOAT
    (39) primitive -> . STRING
    (40) primitive -> . boolean
    (41) boolean -> . TRUE
    (42) boolean -> . FALSE
    (43) boolean -> . expression EQUAL_TO expression
    (44) boolean -> . expression DIFF expression
    (45) boolean -> . expression GREATER_THAN expression
    (46) boolean -> . expression GREATER_THAN_EQUAL expression
    (47) boolean -> . expression LESS_THAN expression
    (48) boolean -> . expression LESS_THAN_EQUAL expression
    (49) boolean -> . expression AND expression
    (50) boolean -> . expression OR expression

    PLUS            shift and go to state 14
    MINUS           shift and go to state 15
    BIT_NEG         shift and go to state 16
    NOT             shift and go to state 17
    OPEN_PAREN      shift and go to state 8
    STRING          shift and go to state 19
    VARIABLE        shift and go to state 13
    NUM_INT         shift and go to state 21
    NUM_FLOAT       shift and go to state 22
    TRUE            shift and go to state 24
    FALSE           shift and go to state 25

    expression                     shift and go to state 111
    variable                       shift and go to state 52
    primitive                      shift and go to state 18
    boolean                        shift and go to state 23

state 102

    (33) expression -> variable ASSIGN assignable SEMICOLON .

    PLUS            reduce using rule 33 (expression -> variable ASSIGN assignable SEMICOLON .)
    MINUS           reduce using rule 33 (expression -> variable ASSIGN assignable SEMICOLON .)
    MULT            reduce using rule 33 (expression -> variable ASSIGN assignable SEMICOLON .)
    DIV             reduce using rule 33 (expression -> variable ASSIGN assignable SEMICOLON .)
    EXP             reduce using rule 33 (expression -> variable ASSIGN assignable SEMICOLON .)
    MOD             reduce using rule 33 (expression -> variable ASSIGN assignable SEMICOLON .)
    BIT_AND         reduce using rule 33 (expression -> variable ASSIGN assignable SEMICOLON .)
    BIT_OR          reduce using rule 33 (expression -> variable ASSIGN assignable SEMICOLON .)
    BIT_XOR         reduce using rule 33 (expression -> variable ASSIGN assignable SEMICOLON .)
    EQUAL_TO        reduce using rule 33 (expression -> variable ASSIGN assignable SEMICOLON .)
    DIFF            reduce using rule 33 (expression -> variable ASSIGN assignable SEMICOLON .)
    GREATER_THAN    reduce using rule 33 (expression -> variable ASSIGN assignable SEMICOLON .)
    GREATER_THAN_EQUAL reduce using rule 33 (expression -> variable ASSIGN assignable SEMICOLON .)
    LESS_THAN       reduce using rule 33 (expression -> variable ASSIGN assignable SEMICOLON .)
    LESS_THAN_EQUAL reduce using rule 33 (expression -> variable ASSIGN assignable SEMICOLON .)
    AND             reduce using rule 33 (expression -> variable ASSIGN assignable SEMICOLON .)
    OR              reduce using rule 33 (expression -> variable ASSIGN assignable SEMICOLON .)
    BREAK           reduce using rule 33 (expression -> variable ASSIGN assignable SEMICOLON .)
    PRINT           reduce using rule 33 (expression -> variable ASSIGN assignable SEMICOLON .)
    WHILE           reduce using rule 33 (expression -> variable ASSIGN assignable SEMICOLON .)
    FOR             reduce using rule 33 (expression -> variable ASSIGN assignable SEMICOLON .)
    FUNCTION        reduce using rule 33 (expression -> variable ASSIGN assignable SEMICOLON .)
    RETURN          reduce using rule 33 (expression -> variable ASSIGN assignable SEMICOLON .)
    VARIABLE        reduce using rule 33 (expression -> variable ASSIGN assignable SEMICOLON .)
    BIT_NEG         reduce using rule 33 (expression -> variable ASSIGN assignable SEMICOLON .)
    NOT             reduce using rule 33 (expression -> variable ASSIGN assignable SEMICOLON .)
    OPEN_PAREN      reduce using rule 33 (expression -> variable ASSIGN assignable SEMICOLON .)
    STRING          reduce using rule 33 (expression -> variable ASSIGN assignable SEMICOLON .)
    IF              reduce using rule 33 (expression -> variable ASSIGN assignable SEMICOLON .)
    NUM_INT         reduce using rule 33 (expression -> variable ASSIGN assignable SEMICOLON .)
    NUM_FLOAT       reduce using rule 33 (expression -> variable ASSIGN assignable SEMICOLON .)
    TRUE            reduce using rule 33 (expression -> variable ASSIGN assignable SEMICOLON .)
    FALSE           reduce using rule 33 (expression -> variable ASSIGN assignable SEMICOLON .)
    $end            reduce using rule 33 (expression -> variable ASSIGN assignable SEMICOLON .)
    CLOSE_PAREN     reduce using rule 33 (expression -> variable ASSIGN assignable SEMICOLON .)
    SEMICOLON       reduce using rule 33 (expression -> variable ASSIGN assignable SEMICOLON .)
    COMMA           reduce using rule 33 (expression -> variable ASSIGN assignable SEMICOLON .)
    OPEN_KEY        reduce using rule 33 (expression -> variable ASSIGN assignable SEMICOLON .)
    CLOSE_KEY       reduce using rule 33 (expression -> variable ASSIGN assignable SEMICOLON .)


state 103

    (7) statement -> PRINT COLON OPEN_PAREN arguments . CLOSE_PAREN SEMICOLON
    (53) arguments -> arguments . COMMA expression

    CLOSE_PAREN     shift and go to state 112
    COMMA           shift and go to state 101


state 104

    (16) expression -> variable OPEN_PAREN arguments . CLOSE_PAREN
    (53) arguments -> arguments . COMMA expression

    CLOSE_PAREN     shift and go to state 113
    COMMA           shift and go to state 101


state 105

    (11) statement -> WHILE COLON expression OPEN_KEY . statement_list CLOSE_KEY
    (1) statement_list -> . statement
    (2) statement_list -> . statement_list statement
    (3) statement -> . variable
    (4) statement -> . expression
    (5) statement -> . if_statement
    (6) statement -> . BREAK SEMICOLON
    (7) statement -> . PRINT COLON OPEN_PAREN arguments CLOSE_PAREN SEMICOLON
    (8) statement -> . variable PLUS_EQ expression SEMICOLON
    (9) statement -> . variable MINUS_EQ expression SEMICOLON
    (10) statement -> . variable MULT_EQ expression SEMICOLON
    (11) statement -> . WHILE COLON expression OPEN_KEY statement_list CLOSE_KEY
    (12) statement -> . FOR COLON OPEN_KEY statement_list CLOSE_KEY
    (13) statement -> . FUNCTION variable OPEN_PAREN arguments CLOSE_PAREN OPEN_KEY statement_list CLOSE_KEY
    (14) statement -> . FUNCTION variable OPEN_KEY statement_list CLOSE_KEY
    (15) statement -> . RETURN expression SEMICOLON
    (17) statement -> . variable OPEN_PAREN arguments CLOSE_PAREN SEMICOLON
    (18) variable -> . VARIABLE
    (16) expression -> . variable OPEN_PAREN arguments CLOSE_PAREN
    (19) expression -> . expression PLUS expression
    (20) expression -> . expression MINUS expression
    (21) expression -> . expression MULT expression
    (22) expression -> . expression DIV expression
    (23) expression -> . expression EXP expression
    (24) expression -> . expression MOD expression
    (25) expression -> . expression BIT_AND expression
    (26) expression -> . expression BIT_OR expression
    (27) expression -> . expression BIT_XOR expression
    (28) expression -> . PLUS expression
    (29) expression -> . MINUS expression
    (30) expression -> . BIT_NEG expression
    (31) expression -> . NOT expression
    (32) expression -> . OPEN_PAREN expression CLOSE_PAREN
    (33) expression -> . variable ASSIGN assignable SEMICOLON
    (56) expression -> . primitive
    (57) expression -> . STRING
    (58) expression -> . variable
    (34) if_statement -> . IF COLON expression OPEN_KEY statement_list CLOSE_KEY
    (35) if_statement -> . IF COLON expression OPEN_KEY statement_list CLOSE_KEY ELSE COLON OPEN_KEY statement_list CLOSE_KEY
    (36) if_statement -> . IF COLON expression OPEN_KEY statement_list CLOSE_KEY ELSE COLON if_statement
    (37) primitive -> . NUM_INT
    (38) primitive -> . NUM_FLOAT
    (39) primitive -> . STRING
    (40) primitive -> . boolean
    (41) boolean -> . TRUE
    (42) boolean -> . FALSE
    (43) boolean -> . expression EQUAL_TO expression
    (44) boolean -> . expression DIFF expression
    (45) boolean -> . expression GREATER_THAN expression
    (46) boolean -> . expression GREATER_THAN_EQUAL expression
    (47) boolean -> . expression LESS_THAN expression
    (48) boolean -> . expression LESS_THAN_EQUAL expression
    (49) boolean -> . expression AND expression
    (50) boolean -> . expression OR expression

    BREAK           shift and go to state 6
    PRINT           shift and go to state 7
    WHILE           shift and go to state 9
    FOR             shift and go to state 10
    FUNCTION        shift and go to state 11
    RETURN          shift and go to state 12
    VARIABLE        shift and go to state 13
    PLUS            shift and go to state 14
    MINUS           shift and go to state 15
    BIT_NEG         shift and go to state 16
    NOT             shift and go to state 17
    OPEN_PAREN      shift and go to state 8
    STRING          shift and go to state 19
    IF              shift and go to state 20
    NUM_INT         shift and go to state 21
    NUM_FLOAT       shift and go to state 22
    TRUE            shift and go to state 24
    FALSE           shift and go to state 25

    expression                     shift and go to state 4
    statement_list                 shift and go to state 114
    statement                      shift and go to state 2
    variable                       shift and go to state 3
    if_statement                   shift and go to state 5
    primitive                      shift and go to state 18
    boolean                        shift and go to state 23

state 106

    (12) statement -> FOR COLON OPEN_KEY statement_list . CLOSE_KEY
    (2) statement_list -> statement_list . statement
    (3) statement -> . variable
    (4) statement -> . expression
    (5) statement -> . if_statement
    (6) statement -> . BREAK SEMICOLON
    (7) statement -> . PRINT COLON OPEN_PAREN arguments CLOSE_PAREN SEMICOLON
    (8) statement -> . variable PLUS_EQ expression SEMICOLON
    (9) statement -> . variable MINUS_EQ expression SEMICOLON
    (10) statement -> . variable MULT_EQ expression SEMICOLON
    (11) statement -> . WHILE COLON expression OPEN_KEY statement_list CLOSE_KEY
    (12) statement -> . FOR COLON OPEN_KEY statement_list CLOSE_KEY
    (13) statement -> . FUNCTION variable OPEN_PAREN arguments CLOSE_PAREN OPEN_KEY statement_list CLOSE_KEY
    (14) statement -> . FUNCTION variable OPEN_KEY statement_list CLOSE_KEY
    (15) statement -> . RETURN expression SEMICOLON
    (17) statement -> . variable OPEN_PAREN arguments CLOSE_PAREN SEMICOLON
    (18) variable -> . VARIABLE
    (16) expression -> . variable OPEN_PAREN arguments CLOSE_PAREN
    (19) expression -> . expression PLUS expression
    (20) expression -> . expression MINUS expression
    (21) expression -> . expression MULT expression
    (22) expression -> . expression DIV expression
    (23) expression -> . expression EXP expression
    (24) expression -> . expression MOD expression
    (25) expression -> . expression BIT_AND expression
    (26) expression -> . expression BIT_OR expression
    (27) expression -> . expression BIT_XOR expression
    (28) expression -> . PLUS expression
    (29) expression -> . MINUS expression
    (30) expression -> . BIT_NEG expression
    (31) expression -> . NOT expression
    (32) expression -> . OPEN_PAREN expression CLOSE_PAREN
    (33) expression -> . variable ASSIGN assignable SEMICOLON
    (56) expression -> . primitive
    (57) expression -> . STRING
    (58) expression -> . variable
    (34) if_statement -> . IF COLON expression OPEN_KEY statement_list CLOSE_KEY
    (35) if_statement -> . IF COLON expression OPEN_KEY statement_list CLOSE_KEY ELSE COLON OPEN_KEY statement_list CLOSE_KEY
    (36) if_statement -> . IF COLON expression OPEN_KEY statement_list CLOSE_KEY ELSE COLON if_statement
    (37) primitive -> . NUM_INT
    (38) primitive -> . NUM_FLOAT
    (39) primitive -> . STRING
    (40) primitive -> . boolean
    (41) boolean -> . TRUE
    (42) boolean -> . FALSE
    (43) boolean -> . expression EQUAL_TO expression
    (44) boolean -> . expression DIFF expression
    (45) boolean -> . expression GREATER_THAN expression
    (46) boolean -> . expression GREATER_THAN_EQUAL expression
    (47) boolean -> . expression LESS_THAN expression
    (48) boolean -> . expression LESS_THAN_EQUAL expression
    (49) boolean -> . expression AND expression
    (50) boolean -> . expression OR expression

    CLOSE_KEY       shift and go to state 115
    BREAK           shift and go to state 6
    PRINT           shift and go to state 7
    WHILE           shift and go to state 9
    FOR             shift and go to state 10
    FUNCTION        shift and go to state 11
    RETURN          shift and go to state 12
    VARIABLE        shift and go to state 13
    PLUS            shift and go to state 14
    MINUS           shift and go to state 15
    BIT_NEG         shift and go to state 16
    NOT             shift and go to state 17
    OPEN_PAREN      shift and go to state 8
    STRING          shift and go to state 19
    IF              shift and go to state 20
    NUM_INT         shift and go to state 21
    NUM_FLOAT       shift and go to state 22
    TRUE            shift and go to state 24
    FALSE           shift and go to state 25

    statement                      shift and go to state 26
    variable                       shift and go to state 3
    expression                     shift and go to state 4
    if_statement                   shift and go to state 5
    primitive                      shift and go to state 18
    boolean                        shift and go to state 23

state 107

    (13) statement -> FUNCTION variable OPEN_PAREN arguments . CLOSE_PAREN OPEN_KEY statement_list CLOSE_KEY
    (53) arguments -> arguments . COMMA expression

    CLOSE_PAREN     shift and go to state 116
    COMMA           shift and go to state 101


state 108

    (14) statement -> FUNCTION variable OPEN_KEY statement_list . CLOSE_KEY
    (2) statement_list -> statement_list . statement
    (3) statement -> . variable
    (4) statement -> . expression
    (5) statement -> . if_statement
    (6) statement -> . BREAK SEMICOLON
    (7) statement -> . PRINT COLON OPEN_PAREN arguments CLOSE_PAREN SEMICOLON
    (8) statement -> . variable PLUS_EQ expression SEMICOLON
    (9) statement -> . variable MINUS_EQ expression SEMICOLON
    (10) statement -> . variable MULT_EQ expression SEMICOLON
    (11) statement -> . WHILE COLON expression OPEN_KEY statement_list CLOSE_KEY
    (12) statement -> . FOR COLON OPEN_KEY statement_list CLOSE_KEY
    (13) statement -> . FUNCTION variable OPEN_PAREN arguments CLOSE_PAREN OPEN_KEY statement_list CLOSE_KEY
    (14) statement -> . FUNCTION variable OPEN_KEY statement_list CLOSE_KEY
    (15) statement -> . RETURN expression SEMICOLON
    (17) statement -> . variable OPEN_PAREN arguments CLOSE_PAREN SEMICOLON
    (18) variable -> . VARIABLE
    (16) expression -> . variable OPEN_PAREN arguments CLOSE_PAREN
    (19) expression -> . expression PLUS expression
    (20) expression -> . expression MINUS expression
    (21) expression -> . expression MULT expression
    (22) expression -> . expression DIV expression
    (23) expression -> . expression EXP expression
    (24) expression -> . expression MOD expression
    (25) expression -> . expression BIT_AND expression
    (26) expression -> . expression BIT_OR expression
    (27) expression -> . expression BIT_XOR expression
    (28) expression -> . PLUS expression
    (29) expression -> . MINUS expression
    (30) expression -> . BIT_NEG expression
    (31) expression -> . NOT expression
    (32) expression -> . OPEN_PAREN expression CLOSE_PAREN
    (33) expression -> . variable ASSIGN assignable SEMICOLON
    (56) expression -> . primitive
    (57) expression -> . STRING
    (58) expression -> . variable
    (34) if_statement -> . IF COLON expression OPEN_KEY statement_list CLOSE_KEY
    (35) if_statement -> . IF COLON expression OPEN_KEY statement_list CLOSE_KEY ELSE COLON OPEN_KEY statement_list CLOSE_KEY
    (36) if_statement -> . IF COLON expression OPEN_KEY statement_list CLOSE_KEY ELSE COLON if_statement
    (37) primitive -> . NUM_INT
    (38) primitive -> . NUM_FLOAT
    (39) primitive -> . STRING
    (40) primitive -> . boolean
    (41) boolean -> . TRUE
    (42) boolean -> . FALSE
    (43) boolean -> . expression EQUAL_TO expression
    (44) boolean -> . expression DIFF expression
    (45) boolean -> . expression GREATER_THAN expression
    (46) boolean -> . expression GREATER_THAN_EQUAL expression
    (47) boolean -> . expression LESS_THAN expression
    (48) boolean -> . expression LESS_THAN_EQUAL expression
    (49) boolean -> . expression AND expression
    (50) boolean -> . expression OR expression

    CLOSE_KEY       shift and go to state 117
    BREAK           shift and go to state 6
    PRINT           shift and go to state 7
    WHILE           shift and go to state 9
    FOR             shift and go to state 10
    FUNCTION        shift and go to state 11
    RETURN          shift and go to state 12
    VARIABLE        shift and go to state 13
    PLUS            shift and go to state 14
    MINUS           shift and go to state 15
    BIT_NEG         shift and go to state 16
    NOT             shift and go to state 17
    OPEN_PAREN      shift and go to state 8
    STRING          shift and go to state 19
    IF              shift and go to state 20
    NUM_INT         shift and go to state 21
    NUM_FLOAT       shift and go to state 22
    TRUE            shift and go to state 24
    FALSE           shift and go to state 25

    variable                       shift and go to state 3
    statement                      shift and go to state 26
    expression                     shift and go to state 4
    if_statement                   shift and go to state 5
    primitive                      shift and go to state 18
    boolean                        shift and go to state 23

state 109

    (34) if_statement -> IF COLON expression OPEN_KEY . statement_list CLOSE_KEY
    (35) if_statement -> IF COLON expression OPEN_KEY . statement_list CLOSE_KEY ELSE COLON OPEN_KEY statement_list CLOSE_KEY
    (36) if_statement -> IF COLON expression OPEN_KEY . statement_list CLOSE_KEY ELSE COLON if_statement
    (1) statement_list -> . statement
    (2) statement_list -> . statement_list statement
    (3) statement -> . variable
    (4) statement -> . expression
    (5) statement -> . if_statement
    (6) statement -> . BREAK SEMICOLON
    (7) statement -> . PRINT COLON OPEN_PAREN arguments CLOSE_PAREN SEMICOLON
    (8) statement -> . variable PLUS_EQ expression SEMICOLON
    (9) statement -> . variable MINUS_EQ expression SEMICOLON
    (10) statement -> . variable MULT_EQ expression SEMICOLON
    (11) statement -> . WHILE COLON expression OPEN_KEY statement_list CLOSE_KEY
    (12) statement -> . FOR COLON OPEN_KEY statement_list CLOSE_KEY
    (13) statement -> . FUNCTION variable OPEN_PAREN arguments CLOSE_PAREN OPEN_KEY statement_list CLOSE_KEY
    (14) statement -> . FUNCTION variable OPEN_KEY statement_list CLOSE_KEY
    (15) statement -> . RETURN expression SEMICOLON
    (17) statement -> . variable OPEN_PAREN arguments CLOSE_PAREN SEMICOLON
    (18) variable -> . VARIABLE
    (16) expression -> . variable OPEN_PAREN arguments CLOSE_PAREN
    (19) expression -> . expression PLUS expression
    (20) expression -> . expression MINUS expression
    (21) expression -> . expression MULT expression
    (22) expression -> . expression DIV expression
    (23) expression -> . expression EXP expression
    (24) expression -> . expression MOD expression
    (25) expression -> . expression BIT_AND expression
    (26) expression -> . expression BIT_OR expression
    (27) expression -> . expression BIT_XOR expression
    (28) expression -> . PLUS expression
    (29) expression -> . MINUS expression
    (30) expression -> . BIT_NEG expression
    (31) expression -> . NOT expression
    (32) expression -> . OPEN_PAREN expression CLOSE_PAREN
    (33) expression -> . variable ASSIGN assignable SEMICOLON
    (56) expression -> . primitive
    (57) expression -> . STRING
    (58) expression -> . variable
    (34) if_statement -> . IF COLON expression OPEN_KEY statement_list CLOSE_KEY
    (35) if_statement -> . IF COLON expression OPEN_KEY statement_list CLOSE_KEY ELSE COLON OPEN_KEY statement_list CLOSE_KEY
    (36) if_statement -> . IF COLON expression OPEN_KEY statement_list CLOSE_KEY ELSE COLON if_statement
    (37) primitive -> . NUM_INT
    (38) primitive -> . NUM_FLOAT
    (39) primitive -> . STRING
    (40) primitive -> . boolean
    (41) boolean -> . TRUE
    (42) boolean -> . FALSE
    (43) boolean -> . expression EQUAL_TO expression
    (44) boolean -> . expression DIFF expression
    (45) boolean -> . expression GREATER_THAN expression
    (46) boolean -> . expression GREATER_THAN_EQUAL expression
    (47) boolean -> . expression LESS_THAN expression
    (48) boolean -> . expression LESS_THAN_EQUAL expression
    (49) boolean -> . expression AND expression
    (50) boolean -> . expression OR expression

    BREAK           shift and go to state 6
    PRINT           shift and go to state 7
    WHILE           shift and go to state 9
    FOR             shift and go to state 10
    FUNCTION        shift and go to state 11
    RETURN          shift and go to state 12
    VARIABLE        shift and go to state 13
    PLUS            shift and go to state 14
    MINUS           shift and go to state 15
    BIT_NEG         shift and go to state 16
    NOT             shift and go to state 17
    OPEN_PAREN      shift and go to state 8
    STRING          shift and go to state 19
    IF              shift and go to state 20
    NUM_INT         shift and go to state 21
    NUM_FLOAT       shift and go to state 22
    TRUE            shift and go to state 24
    FALSE           shift and go to state 25

    expression                     shift and go to state 4
    statement_list                 shift and go to state 118
    if_statement                   shift and go to state 5
    statement                      shift and go to state 2
    variable                       shift and go to state 3
    primitive                      shift and go to state 18
    boolean                        shift and go to state 23

state 110

    (17) statement -> variable OPEN_PAREN arguments CLOSE_PAREN SEMICOLON .

    BREAK           reduce using rule 17 (statement -> variable OPEN_PAREN arguments CLOSE_PAREN SEMICOLON .)
    PRINT           reduce using rule 17 (statement -> variable OPEN_PAREN arguments CLOSE_PAREN SEMICOLON .)
    WHILE           reduce using rule 17 (statement -> variable OPEN_PAREN arguments CLOSE_PAREN SEMICOLON .)
    FOR             reduce using rule 17 (statement -> variable OPEN_PAREN arguments CLOSE_PAREN SEMICOLON .)
    FUNCTION        reduce using rule 17 (statement -> variable OPEN_PAREN arguments CLOSE_PAREN SEMICOLON .)
    RETURN          reduce using rule 17 (statement -> variable OPEN_PAREN arguments CLOSE_PAREN SEMICOLON .)
    VARIABLE        reduce using rule 17 (statement -> variable OPEN_PAREN arguments CLOSE_PAREN SEMICOLON .)
    PLUS            reduce using rule 17 (statement -> variable OPEN_PAREN arguments CLOSE_PAREN SEMICOLON .)
    MINUS           reduce using rule 17 (statement -> variable OPEN_PAREN arguments CLOSE_PAREN SEMICOLON .)
    BIT_NEG         reduce using rule 17 (statement -> variable OPEN_PAREN arguments CLOSE_PAREN SEMICOLON .)
    NOT             reduce using rule 17 (statement -> variable OPEN_PAREN arguments CLOSE_PAREN SEMICOLON .)
    OPEN_PAREN      reduce using rule 17 (statement -> variable OPEN_PAREN arguments CLOSE_PAREN SEMICOLON .)
    STRING          reduce using rule 17 (statement -> variable OPEN_PAREN arguments CLOSE_PAREN SEMICOLON .)
    IF              reduce using rule 17 (statement -> variable OPEN_PAREN arguments CLOSE_PAREN SEMICOLON .)
    NUM_INT         reduce using rule 17 (statement -> variable OPEN_PAREN arguments CLOSE_PAREN SEMICOLON .)
    NUM_FLOAT       reduce using rule 17 (statement -> variable OPEN_PAREN arguments CLOSE_PAREN SEMICOLON .)
    TRUE            reduce using rule 17 (statement -> variable OPEN_PAREN arguments CLOSE_PAREN SEMICOLON .)
    FALSE           reduce using rule 17 (statement -> variable OPEN_PAREN arguments CLOSE_PAREN SEMICOLON .)
    $end            reduce using rule 17 (statement -> variable OPEN_PAREN arguments CLOSE_PAREN SEMICOLON .)
    CLOSE_KEY       reduce using rule 17 (statement -> variable OPEN_PAREN arguments CLOSE_PAREN SEMICOLON .)


state 111

    (53) arguments -> arguments COMMA expression .
    (19) expression -> expression . PLUS expression
    (20) expression -> expression . MINUS expression
    (21) expression -> expression . MULT expression
    (22) expression -> expression . DIV expression
    (23) expression -> expression . EXP expression
    (24) expression -> expression . MOD expression
    (25) expression -> expression . BIT_AND expression
    (26) expression -> expression . BIT_OR expression
    (27) expression -> expression . BIT_XOR expression
    (43) boolean -> expression . EQUAL_TO expression
    (44) boolean -> expression . DIFF expression
    (45) boolean -> expression . GREATER_THAN expression
    (46) boolean -> expression . GREATER_THAN_EQUAL expression
    (47) boolean -> expression . LESS_THAN expression
    (48) boolean -> expression . LESS_THAN_EQUAL expression
    (49) boolean -> expression . AND expression
    (50) boolean -> expression . OR expression

    CLOSE_PAREN     reduce using rule 53 (arguments -> arguments COMMA expression .)
    COMMA           reduce using rule 53 (arguments -> arguments COMMA expression .)
    PLUS            shift and go to state 32
    MINUS           shift and go to state 33
    MULT            shift and go to state 34
    DIV             shift and go to state 35
    EXP             shift and go to state 36
    MOD             shift and go to state 37
    BIT_AND         shift and go to state 38
    BIT_OR          shift and go to state 39
    BIT_XOR         shift and go to state 40
    EQUAL_TO        shift and go to state 41
    DIFF            shift and go to state 42
    GREATER_THAN    shift and go to state 43
    GREATER_THAN_EQUAL shift and go to state 44
    LESS_THAN       shift and go to state 45
    LESS_THAN_EQUAL shift and go to state 46
    AND             shift and go to state 47
    OR              shift and go to state 48


state 112

    (7) statement -> PRINT COLON OPEN_PAREN arguments CLOSE_PAREN . SEMICOLON

    SEMICOLON       shift and go to state 119


state 113

    (16) expression -> variable OPEN_PAREN arguments CLOSE_PAREN .

    CLOSE_PAREN     reduce using rule 16 (expression -> variable OPEN_PAREN arguments CLOSE_PAREN .)
    PLUS            reduce using rule 16 (expression -> variable OPEN_PAREN arguments CLOSE_PAREN .)
    MINUS           reduce using rule 16 (expression -> variable OPEN_PAREN arguments CLOSE_PAREN .)
    MULT            reduce using rule 16 (expression -> variable OPEN_PAREN arguments CLOSE_PAREN .)
    DIV             reduce using rule 16 (expression -> variable OPEN_PAREN arguments CLOSE_PAREN .)
    EXP             reduce using rule 16 (expression -> variable OPEN_PAREN arguments CLOSE_PAREN .)
    MOD             reduce using rule 16 (expression -> variable OPEN_PAREN arguments CLOSE_PAREN .)
    BIT_AND         reduce using rule 16 (expression -> variable OPEN_PAREN arguments CLOSE_PAREN .)
    BIT_OR          reduce using rule 16 (expression -> variable OPEN_PAREN arguments CLOSE_PAREN .)
    BIT_XOR         reduce using rule 16 (expression -> variable OPEN_PAREN arguments CLOSE_PAREN .)
    EQUAL_TO        reduce using rule 16 (expression -> variable OPEN_PAREN arguments CLOSE_PAREN .)
    DIFF            reduce using rule 16 (expression -> variable OPEN_PAREN arguments CLOSE_PAREN .)
    GREATER_THAN    reduce using rule 16 (expression -> variable OPEN_PAREN arguments CLOSE_PAREN .)
    GREATER_THAN_EQUAL reduce using rule 16 (expression -> variable OPEN_PAREN arguments CLOSE_PAREN .)
    LESS_THAN       reduce using rule 16 (expression -> variable OPEN_PAREN arguments CLOSE_PAREN .)
    LESS_THAN_EQUAL reduce using rule 16 (expression -> variable OPEN_PAREN arguments CLOSE_PAREN .)
    AND             reduce using rule 16 (expression -> variable OPEN_PAREN arguments CLOSE_PAREN .)
    OR              reduce using rule 16 (expression -> variable OPEN_PAREN arguments CLOSE_PAREN .)
    SEMICOLON       reduce using rule 16 (expression -> variable OPEN_PAREN arguments CLOSE_PAREN .)
    BREAK           reduce using rule 16 (expression -> variable OPEN_PAREN arguments CLOSE_PAREN .)
    PRINT           reduce using rule 16 (expression -> variable OPEN_PAREN arguments CLOSE_PAREN .)
    WHILE           reduce using rule 16 (expression -> variable OPEN_PAREN arguments CLOSE_PAREN .)
    FOR             reduce using rule 16 (expression -> variable OPEN_PAREN arguments CLOSE_PAREN .)
    FUNCTION        reduce using rule 16 (expression -> variable OPEN_PAREN arguments CLOSE_PAREN .)
    RETURN          reduce using rule 16 (expression -> variable OPEN_PAREN arguments CLOSE_PAREN .)
    VARIABLE        reduce using rule 16 (expression -> variable OPEN_PAREN arguments CLOSE_PAREN .)
    BIT_NEG         reduce using rule 16 (expression -> variable OPEN_PAREN arguments CLOSE_PAREN .)
    NOT             reduce using rule 16 (expression -> variable OPEN_PAREN arguments CLOSE_PAREN .)
    OPEN_PAREN      reduce using rule 16 (expression -> variable OPEN_PAREN arguments CLOSE_PAREN .)
    STRING          reduce using rule 16 (expression -> variable OPEN_PAREN arguments CLOSE_PAREN .)
    IF              reduce using rule 16 (expression -> variable OPEN_PAREN arguments CLOSE_PAREN .)
    NUM_INT         reduce using rule 16 (expression -> variable OPEN_PAREN arguments CLOSE_PAREN .)
    NUM_FLOAT       reduce using rule 16 (expression -> variable OPEN_PAREN arguments CLOSE_PAREN .)
    TRUE            reduce using rule 16 (expression -> variable OPEN_PAREN arguments CLOSE_PAREN .)
    FALSE           reduce using rule 16 (expression -> variable OPEN_PAREN arguments CLOSE_PAREN .)
    $end            reduce using rule 16 (expression -> variable OPEN_PAREN arguments CLOSE_PAREN .)
    COMMA           reduce using rule 16 (expression -> variable OPEN_PAREN arguments CLOSE_PAREN .)
    OPEN_KEY        reduce using rule 16 (expression -> variable OPEN_PAREN arguments CLOSE_PAREN .)
    CLOSE_KEY       reduce using rule 16 (expression -> variable OPEN_PAREN arguments CLOSE_PAREN .)


state 114

    (11) statement -> WHILE COLON expression OPEN_KEY statement_list . CLOSE_KEY
    (2) statement_list -> statement_list . statement
    (3) statement -> . variable
    (4) statement -> . expression
    (5) statement -> . if_statement
    (6) statement -> . BREAK SEMICOLON
    (7) statement -> . PRINT COLON OPEN_PAREN arguments CLOSE_PAREN SEMICOLON
    (8) statement -> . variable PLUS_EQ expression SEMICOLON
    (9) statement -> . variable MINUS_EQ expression SEMICOLON
    (10) statement -> . variable MULT_EQ expression SEMICOLON
    (11) statement -> . WHILE COLON expression OPEN_KEY statement_list CLOSE_KEY
    (12) statement -> . FOR COLON OPEN_KEY statement_list CLOSE_KEY
    (13) statement -> . FUNCTION variable OPEN_PAREN arguments CLOSE_PAREN OPEN_KEY statement_list CLOSE_KEY
    (14) statement -> . FUNCTION variable OPEN_KEY statement_list CLOSE_KEY
    (15) statement -> . RETURN expression SEMICOLON
    (17) statement -> . variable OPEN_PAREN arguments CLOSE_PAREN SEMICOLON
    (18) variable -> . VARIABLE
    (16) expression -> . variable OPEN_PAREN arguments CLOSE_PAREN
    (19) expression -> . expression PLUS expression
    (20) expression -> . expression MINUS expression
    (21) expression -> . expression MULT expression
    (22) expression -> . expression DIV expression
    (23) expression -> . expression EXP expression
    (24) expression -> . expression MOD expression
    (25) expression -> . expression BIT_AND expression
    (26) expression -> . expression BIT_OR expression
    (27) expression -> . expression BIT_XOR expression
    (28) expression -> . PLUS expression
    (29) expression -> . MINUS expression
    (30) expression -> . BIT_NEG expression
    (31) expression -> . NOT expression
    (32) expression -> . OPEN_PAREN expression CLOSE_PAREN
    (33) expression -> . variable ASSIGN assignable SEMICOLON
    (56) expression -> . primitive
    (57) expression -> . STRING
    (58) expression -> . variable
    (34) if_statement -> . IF COLON expression OPEN_KEY statement_list CLOSE_KEY
    (35) if_statement -> . IF COLON expression OPEN_KEY statement_list CLOSE_KEY ELSE COLON OPEN_KEY statement_list CLOSE_KEY
    (36) if_statement -> . IF COLON expression OPEN_KEY statement_list CLOSE_KEY ELSE COLON if_statement
    (37) primitive -> . NUM_INT
    (38) primitive -> . NUM_FLOAT
    (39) primitive -> . STRING
    (40) primitive -> . boolean
    (41) boolean -> . TRUE
    (42) boolean -> . FALSE
    (43) boolean -> . expression EQUAL_TO expression
    (44) boolean -> . expression DIFF expression
    (45) boolean -> . expression GREATER_THAN expression
    (46) boolean -> . expression GREATER_THAN_EQUAL expression
    (47) boolean -> . expression LESS_THAN expression
    (48) boolean -> . expression LESS_THAN_EQUAL expression
    (49) boolean -> . expression AND expression
    (50) boolean -> . expression OR expression

    CLOSE_KEY       shift and go to state 120
    BREAK           shift and go to state 6
    PRINT           shift and go to state 7
    WHILE           shift and go to state 9
    FOR             shift and go to state 10
    FUNCTION        shift and go to state 11
    RETURN          shift and go to state 12
    VARIABLE        shift and go to state 13
    PLUS            shift and go to state 14
    MINUS           shift and go to state 15
    BIT_NEG         shift and go to state 16
    NOT             shift and go to state 17
    OPEN_PAREN      shift and go to state 8
    STRING          shift and go to state 19
    IF              shift and go to state 20
    NUM_INT         shift and go to state 21
    NUM_FLOAT       shift and go to state 22
    TRUE            shift and go to state 24
    FALSE           shift and go to state 25

    expression                     shift and go to state 4
    statement                      shift and go to state 26
    variable                       shift and go to state 3
    if_statement                   shift and go to state 5
    primitive                      shift and go to state 18
    boolean                        shift and go to state 23

state 115

    (12) statement -> FOR COLON OPEN_KEY statement_list CLOSE_KEY .

    BREAK           reduce using rule 12 (statement -> FOR COLON OPEN_KEY statement_list CLOSE_KEY .)
    PRINT           reduce using rule 12 (statement -> FOR COLON OPEN_KEY statement_list CLOSE_KEY .)
    WHILE           reduce using rule 12 (statement -> FOR COLON OPEN_KEY statement_list CLOSE_KEY .)
    FOR             reduce using rule 12 (statement -> FOR COLON OPEN_KEY statement_list CLOSE_KEY .)
    FUNCTION        reduce using rule 12 (statement -> FOR COLON OPEN_KEY statement_list CLOSE_KEY .)
    RETURN          reduce using rule 12 (statement -> FOR COLON OPEN_KEY statement_list CLOSE_KEY .)
    VARIABLE        reduce using rule 12 (statement -> FOR COLON OPEN_KEY statement_list CLOSE_KEY .)
    PLUS            reduce using rule 12 (statement -> FOR COLON OPEN_KEY statement_list CLOSE_KEY .)
    MINUS           reduce using rule 12 (statement -> FOR COLON OPEN_KEY statement_list CLOSE_KEY .)
    BIT_NEG         reduce using rule 12 (statement -> FOR COLON OPEN_KEY statement_list CLOSE_KEY .)
    NOT             reduce using rule 12 (statement -> FOR COLON OPEN_KEY statement_list CLOSE_KEY .)
    OPEN_PAREN      reduce using rule 12 (statement -> FOR COLON OPEN_KEY statement_list CLOSE_KEY .)
    STRING          reduce using rule 12 (statement -> FOR COLON OPEN_KEY statement_list CLOSE_KEY .)
    IF              reduce using rule 12 (statement -> FOR COLON OPEN_KEY statement_list CLOSE_KEY .)
    NUM_INT         reduce using rule 12 (statement -> FOR COLON OPEN_KEY statement_list CLOSE_KEY .)
    NUM_FLOAT       reduce using rule 12 (statement -> FOR COLON OPEN_KEY statement_list CLOSE_KEY .)
    TRUE            reduce using rule 12 (statement -> FOR COLON OPEN_KEY statement_list CLOSE_KEY .)
    FALSE           reduce using rule 12 (statement -> FOR COLON OPEN_KEY statement_list CLOSE_KEY .)
    $end            reduce using rule 12 (statement -> FOR COLON OPEN_KEY statement_list CLOSE_KEY .)
    CLOSE_KEY       reduce using rule 12 (statement -> FOR COLON OPEN_KEY statement_list CLOSE_KEY .)


state 116

    (13) statement -> FUNCTION variable OPEN_PAREN arguments CLOSE_PAREN . OPEN_KEY statement_list CLOSE_KEY

    OPEN_KEY        shift and go to state 121


state 117

    (14) statement -> FUNCTION variable OPEN_KEY statement_list CLOSE_KEY .

    BREAK           reduce using rule 14 (statement -> FUNCTION variable OPEN_KEY statement_list CLOSE_KEY .)
    PRINT           reduce using rule 14 (statement -> FUNCTION variable OPEN_KEY statement_list CLOSE_KEY .)
    WHILE           reduce using rule 14 (statement -> FUNCTION variable OPEN_KEY statement_list CLOSE_KEY .)
    FOR             reduce using rule 14 (statement -> FUNCTION variable OPEN_KEY statement_list CLOSE_KEY .)
    FUNCTION        reduce using rule 14 (statement -> FUNCTION variable OPEN_KEY statement_list CLOSE_KEY .)
    RETURN          reduce using rule 14 (statement -> FUNCTION variable OPEN_KEY statement_list CLOSE_KEY .)
    VARIABLE        reduce using rule 14 (statement -> FUNCTION variable OPEN_KEY statement_list CLOSE_KEY .)
    PLUS            reduce using rule 14 (statement -> FUNCTION variable OPEN_KEY statement_list CLOSE_KEY .)
    MINUS           reduce using rule 14 (statement -> FUNCTION variable OPEN_KEY statement_list CLOSE_KEY .)
    BIT_NEG         reduce using rule 14 (statement -> FUNCTION variable OPEN_KEY statement_list CLOSE_KEY .)
    NOT             reduce using rule 14 (statement -> FUNCTION variable OPEN_KEY statement_list CLOSE_KEY .)
    OPEN_PAREN      reduce using rule 14 (statement -> FUNCTION variable OPEN_KEY statement_list CLOSE_KEY .)
    STRING          reduce using rule 14 (statement -> FUNCTION variable OPEN_KEY statement_list CLOSE_KEY .)
    IF              reduce using rule 14 (statement -> FUNCTION variable OPEN_KEY statement_list CLOSE_KEY .)
    NUM_INT         reduce using rule 14 (statement -> FUNCTION variable OPEN_KEY statement_list CLOSE_KEY .)
    NUM_FLOAT       reduce using rule 14 (statement -> FUNCTION variable OPEN_KEY statement_list CLOSE_KEY .)
    TRUE            reduce using rule 14 (statement -> FUNCTION variable OPEN_KEY statement_list CLOSE_KEY .)
    FALSE           reduce using rule 14 (statement -> FUNCTION variable OPEN_KEY statement_list CLOSE_KEY .)
    $end            reduce using rule 14 (statement -> FUNCTION variable OPEN_KEY statement_list CLOSE_KEY .)
    CLOSE_KEY       reduce using rule 14 (statement -> FUNCTION variable OPEN_KEY statement_list CLOSE_KEY .)


state 118

    (34) if_statement -> IF COLON expression OPEN_KEY statement_list . CLOSE_KEY
    (35) if_statement -> IF COLON expression OPEN_KEY statement_list . CLOSE_KEY ELSE COLON OPEN_KEY statement_list CLOSE_KEY
    (36) if_statement -> IF COLON expression OPEN_KEY statement_list . CLOSE_KEY ELSE COLON if_statement
    (2) statement_list -> statement_list . statement
    (3) statement -> . variable
    (4) statement -> . expression
    (5) statement -> . if_statement
    (6) statement -> . BREAK SEMICOLON
    (7) statement -> . PRINT COLON OPEN_PAREN arguments CLOSE_PAREN SEMICOLON
    (8) statement -> . variable PLUS_EQ expression SEMICOLON
    (9) statement -> . variable MINUS_EQ expression SEMICOLON
    (10) statement -> . variable MULT_EQ expression SEMICOLON
    (11) statement -> . WHILE COLON expression OPEN_KEY statement_list CLOSE_KEY
    (12) statement -> . FOR COLON OPEN_KEY statement_list CLOSE_KEY
    (13) statement -> . FUNCTION variable OPEN_PAREN arguments CLOSE_PAREN OPEN_KEY statement_list CLOSE_KEY
    (14) statement -> . FUNCTION variable OPEN_KEY statement_list CLOSE_KEY
    (15) statement -> . RETURN expression SEMICOLON
    (17) statement -> . variable OPEN_PAREN arguments CLOSE_PAREN SEMICOLON
    (18) variable -> . VARIABLE
    (16) expression -> . variable OPEN_PAREN arguments CLOSE_PAREN
    (19) expression -> . expression PLUS expression
    (20) expression -> . expression MINUS expression
    (21) expression -> . expression MULT expression
    (22) expression -> . expression DIV expression
    (23) expression -> . expression EXP expression
    (24) expression -> . expression MOD expression
    (25) expression -> . expression BIT_AND expression
    (26) expression -> . expression BIT_OR expression
    (27) expression -> . expression BIT_XOR expression
    (28) expression -> . PLUS expression
    (29) expression -> . MINUS expression
    (30) expression -> . BIT_NEG expression
    (31) expression -> . NOT expression
    (32) expression -> . OPEN_PAREN expression CLOSE_PAREN
    (33) expression -> . variable ASSIGN assignable SEMICOLON
    (56) expression -> . primitive
    (57) expression -> . STRING
    (58) expression -> . variable
    (34) if_statement -> . IF COLON expression OPEN_KEY statement_list CLOSE_KEY
    (35) if_statement -> . IF COLON expression OPEN_KEY statement_list CLOSE_KEY ELSE COLON OPEN_KEY statement_list CLOSE_KEY
    (36) if_statement -> . IF COLON expression OPEN_KEY statement_list CLOSE_KEY ELSE COLON if_statement
    (37) primitive -> . NUM_INT
    (38) primitive -> . NUM_FLOAT
    (39) primitive -> . STRING
    (40) primitive -> . boolean
    (41) boolean -> . TRUE
    (42) boolean -> . FALSE
    (43) boolean -> . expression EQUAL_TO expression
    (44) boolean -> . expression DIFF expression
    (45) boolean -> . expression GREATER_THAN expression
    (46) boolean -> . expression GREATER_THAN_EQUAL expression
    (47) boolean -> . expression LESS_THAN expression
    (48) boolean -> . expression LESS_THAN_EQUAL expression
    (49) boolean -> . expression AND expression
    (50) boolean -> . expression OR expression

    CLOSE_KEY       shift and go to state 122
    BREAK           shift and go to state 6
    PRINT           shift and go to state 7
    WHILE           shift and go to state 9
    FOR             shift and go to state 10
    FUNCTION        shift and go to state 11
    RETURN          shift and go to state 12
    VARIABLE        shift and go to state 13
    PLUS            shift and go to state 14
    MINUS           shift and go to state 15
    BIT_NEG         shift and go to state 16
    NOT             shift and go to state 17
    OPEN_PAREN      shift and go to state 8
    STRING          shift and go to state 19
    IF              shift and go to state 20
    NUM_INT         shift and go to state 21
    NUM_FLOAT       shift and go to state 22
    TRUE            shift and go to state 24
    FALSE           shift and go to state 25

    expression                     shift and go to state 4
    if_statement                   shift and go to state 5
    statement                      shift and go to state 26
    variable                       shift and go to state 3
    primitive                      shift and go to state 18
    boolean                        shift and go to state 23

state 119

    (7) statement -> PRINT COLON OPEN_PAREN arguments CLOSE_PAREN SEMICOLON .

    BREAK           reduce using rule 7 (statement -> PRINT COLON OPEN_PAREN arguments CLOSE_PAREN SEMICOLON .)
    PRINT           reduce using rule 7 (statement -> PRINT COLON OPEN_PAREN arguments CLOSE_PAREN SEMICOLON .)
    WHILE           reduce using rule 7 (statement -> PRINT COLON OPEN_PAREN arguments CLOSE_PAREN SEMICOLON .)
    FOR             reduce using rule 7 (statement -> PRINT COLON OPEN_PAREN arguments CLOSE_PAREN SEMICOLON .)
    FUNCTION        reduce using rule 7 (statement -> PRINT COLON OPEN_PAREN arguments CLOSE_PAREN SEMICOLON .)
    RETURN          reduce using rule 7 (statement -> PRINT COLON OPEN_PAREN arguments CLOSE_PAREN SEMICOLON .)
    VARIABLE        reduce using rule 7 (statement -> PRINT COLON OPEN_PAREN arguments CLOSE_PAREN SEMICOLON .)
    PLUS            reduce using rule 7 (statement -> PRINT COLON OPEN_PAREN arguments CLOSE_PAREN SEMICOLON .)
    MINUS           reduce using rule 7 (statement -> PRINT COLON OPEN_PAREN arguments CLOSE_PAREN SEMICOLON .)
    BIT_NEG         reduce using rule 7 (statement -> PRINT COLON OPEN_PAREN arguments CLOSE_PAREN SEMICOLON .)
    NOT             reduce using rule 7 (statement -> PRINT COLON OPEN_PAREN arguments CLOSE_PAREN SEMICOLON .)
    OPEN_PAREN      reduce using rule 7 (statement -> PRINT COLON OPEN_PAREN arguments CLOSE_PAREN SEMICOLON .)
    STRING          reduce using rule 7 (statement -> PRINT COLON OPEN_PAREN arguments CLOSE_PAREN SEMICOLON .)
    IF              reduce using rule 7 (statement -> PRINT COLON OPEN_PAREN arguments CLOSE_PAREN SEMICOLON .)
    NUM_INT         reduce using rule 7 (statement -> PRINT COLON OPEN_PAREN arguments CLOSE_PAREN SEMICOLON .)
    NUM_FLOAT       reduce using rule 7 (statement -> PRINT COLON OPEN_PAREN arguments CLOSE_PAREN SEMICOLON .)
    TRUE            reduce using rule 7 (statement -> PRINT COLON OPEN_PAREN arguments CLOSE_PAREN SEMICOLON .)
    FALSE           reduce using rule 7 (statement -> PRINT COLON OPEN_PAREN arguments CLOSE_PAREN SEMICOLON .)
    $end            reduce using rule 7 (statement -> PRINT COLON OPEN_PAREN arguments CLOSE_PAREN SEMICOLON .)
    CLOSE_KEY       reduce using rule 7 (statement -> PRINT COLON OPEN_PAREN arguments CLOSE_PAREN SEMICOLON .)


state 120

    (11) statement -> WHILE COLON expression OPEN_KEY statement_list CLOSE_KEY .

    BREAK           reduce using rule 11 (statement -> WHILE COLON expression OPEN_KEY statement_list CLOSE_KEY .)
    PRINT           reduce using rule 11 (statement -> WHILE COLON expression OPEN_KEY statement_list CLOSE_KEY .)
    WHILE           reduce using rule 11 (statement -> WHILE COLON expression OPEN_KEY statement_list CLOSE_KEY .)
    FOR             reduce using rule 11 (statement -> WHILE COLON expression OPEN_KEY statement_list CLOSE_KEY .)
    FUNCTION        reduce using rule 11 (statement -> WHILE COLON expression OPEN_KEY statement_list CLOSE_KEY .)
    RETURN          reduce using rule 11 (statement -> WHILE COLON expression OPEN_KEY statement_list CLOSE_KEY .)
    VARIABLE        reduce using rule 11 (statement -> WHILE COLON expression OPEN_KEY statement_list CLOSE_KEY .)
    PLUS            reduce using rule 11 (statement -> WHILE COLON expression OPEN_KEY statement_list CLOSE_KEY .)
    MINUS           reduce using rule 11 (statement -> WHILE COLON expression OPEN_KEY statement_list CLOSE_KEY .)
    BIT_NEG         reduce using rule 11 (statement -> WHILE COLON expression OPEN_KEY statement_list CLOSE_KEY .)
    NOT             reduce using rule 11 (statement -> WHILE COLON expression OPEN_KEY statement_list CLOSE_KEY .)
    OPEN_PAREN      reduce using rule 11 (statement -> WHILE COLON expression OPEN_KEY statement_list CLOSE_KEY .)
    STRING          reduce using rule 11 (statement -> WHILE COLON expression OPEN_KEY statement_list CLOSE_KEY .)
    IF              reduce using rule 11 (statement -> WHILE COLON expression OPEN_KEY statement_list CLOSE_KEY .)
    NUM_INT         reduce using rule 11 (statement -> WHILE COLON expression OPEN_KEY statement_list CLOSE_KEY .)
    NUM_FLOAT       reduce using rule 11 (statement -> WHILE COLON expression OPEN_KEY statement_list CLOSE_KEY .)
    TRUE            reduce using rule 11 (statement -> WHILE COLON expression OPEN_KEY statement_list CLOSE_KEY .)
    FALSE           reduce using rule 11 (statement -> WHILE COLON expression OPEN_KEY statement_list CLOSE_KEY .)
    $end            reduce using rule 11 (statement -> WHILE COLON expression OPEN_KEY statement_list CLOSE_KEY .)
    CLOSE_KEY       reduce using rule 11 (statement -> WHILE COLON expression OPEN_KEY statement_list CLOSE_KEY .)


state 121

    (13) statement -> FUNCTION variable OPEN_PAREN arguments CLOSE_PAREN OPEN_KEY . statement_list CLOSE_KEY
    (1) statement_list -> . statement
    (2) statement_list -> . statement_list statement
    (3) statement -> . variable
    (4) statement -> . expression
    (5) statement -> . if_statement
    (6) statement -> . BREAK SEMICOLON
    (7) statement -> . PRINT COLON OPEN_PAREN arguments CLOSE_PAREN SEMICOLON
    (8) statement -> . variable PLUS_EQ expression SEMICOLON
    (9) statement -> . variable MINUS_EQ expression SEMICOLON
    (10) statement -> . variable MULT_EQ expression SEMICOLON
    (11) statement -> . WHILE COLON expression OPEN_KEY statement_list CLOSE_KEY
    (12) statement -> . FOR COLON OPEN_KEY statement_list CLOSE_KEY
    (13) statement -> . FUNCTION variable OPEN_PAREN arguments CLOSE_PAREN OPEN_KEY statement_list CLOSE_KEY
    (14) statement -> . FUNCTION variable OPEN_KEY statement_list CLOSE_KEY
    (15) statement -> . RETURN expression SEMICOLON
    (17) statement -> . variable OPEN_PAREN arguments CLOSE_PAREN SEMICOLON
    (18) variable -> . VARIABLE
    (16) expression -> . variable OPEN_PAREN arguments CLOSE_PAREN
    (19) expression -> . expression PLUS expression
    (20) expression -> . expression MINUS expression
    (21) expression -> . expression MULT expression
    (22) expression -> . expression DIV expression
    (23) expression -> . expression EXP expression
    (24) expression -> . expression MOD expression
    (25) expression -> . expression BIT_AND expression
    (26) expression -> . expression BIT_OR expression
    (27) expression -> . expression BIT_XOR expression
    (28) expression -> . PLUS expression
    (29) expression -> . MINUS expression
    (30) expression -> . BIT_NEG expression
    (31) expression -> . NOT expression
    (32) expression -> . OPEN_PAREN expression CLOSE_PAREN
    (33) expression -> . variable ASSIGN assignable SEMICOLON
    (56) expression -> . primitive
    (57) expression -> . STRING
    (58) expression -> . variable
    (34) if_statement -> . IF COLON expression OPEN_KEY statement_list CLOSE_KEY
    (35) if_statement -> . IF COLON expression OPEN_KEY statement_list CLOSE_KEY ELSE COLON OPEN_KEY statement_list CLOSE_KEY
    (36) if_statement -> . IF COLON expression OPEN_KEY statement_list CLOSE_KEY ELSE COLON if_statement
    (37) primitive -> . NUM_INT
    (38) primitive -> . NUM_FLOAT
    (39) primitive -> . STRING
    (40) primitive -> . boolean
    (41) boolean -> . TRUE
    (42) boolean -> . FALSE
    (43) boolean -> . expression EQUAL_TO expression
    (44) boolean -> . expression DIFF expression
    (45) boolean -> . expression GREATER_THAN expression
    (46) boolean -> . expression GREATER_THAN_EQUAL expression
    (47) boolean -> . expression LESS_THAN expression
    (48) boolean -> . expression LESS_THAN_EQUAL expression
    (49) boolean -> . expression AND expression
    (50) boolean -> . expression OR expression

    BREAK           shift and go to state 6
    PRINT           shift and go to state 7
    WHILE           shift and go to state 9
    FOR             shift and go to state 10
    FUNCTION        shift and go to state 11
    RETURN          shift and go to state 12
    VARIABLE        shift and go to state 13
    PLUS            shift and go to state 14
    MINUS           shift and go to state 15
    BIT_NEG         shift and go to state 16
    NOT             shift and go to state 17
    OPEN_PAREN      shift and go to state 8
    STRING          shift and go to state 19
    IF              shift and go to state 20
    NUM_INT         shift and go to state 21
    NUM_FLOAT       shift and go to state 22
    TRUE            shift and go to state 24
    FALSE           shift and go to state 25

    variable                       shift and go to state 3
    statement_list                 shift and go to state 123
    statement                      shift and go to state 2
    expression                     shift and go to state 4
    if_statement                   shift and go to state 5
    primitive                      shift and go to state 18
    boolean                        shift and go to state 23

state 122

    (34) if_statement -> IF COLON expression OPEN_KEY statement_list CLOSE_KEY .
    (35) if_statement -> IF COLON expression OPEN_KEY statement_list CLOSE_KEY . ELSE COLON OPEN_KEY statement_list CLOSE_KEY
    (36) if_statement -> IF COLON expression OPEN_KEY statement_list CLOSE_KEY . ELSE COLON if_statement

    BREAK           reduce using rule 34 (if_statement -> IF COLON expression OPEN_KEY statement_list CLOSE_KEY .)
    PRINT           reduce using rule 34 (if_statement -> IF COLON expression OPEN_KEY statement_list CLOSE_KEY .)
    WHILE           reduce using rule 34 (if_statement -> IF COLON expression OPEN_KEY statement_list CLOSE_KEY .)
    FOR             reduce using rule 34 (if_statement -> IF COLON expression OPEN_KEY statement_list CLOSE_KEY .)
    FUNCTION        reduce using rule 34 (if_statement -> IF COLON expression OPEN_KEY statement_list CLOSE_KEY .)
    RETURN          reduce using rule 34 (if_statement -> IF COLON expression OPEN_KEY statement_list CLOSE_KEY .)
    VARIABLE        reduce using rule 34 (if_statement -> IF COLON expression OPEN_KEY statement_list CLOSE_KEY .)
    PLUS            reduce using rule 34 (if_statement -> IF COLON expression OPEN_KEY statement_list CLOSE_KEY .)
    MINUS           reduce using rule 34 (if_statement -> IF COLON expression OPEN_KEY statement_list CLOSE_KEY .)
    BIT_NEG         reduce using rule 34 (if_statement -> IF COLON expression OPEN_KEY statement_list CLOSE_KEY .)
    NOT             reduce using rule 34 (if_statement -> IF COLON expression OPEN_KEY statement_list CLOSE_KEY .)
    OPEN_PAREN      reduce using rule 34 (if_statement -> IF COLON expression OPEN_KEY statement_list CLOSE_KEY .)
    STRING          reduce using rule 34 (if_statement -> IF COLON expression OPEN_KEY statement_list CLOSE_KEY .)
    IF              reduce using rule 34 (if_statement -> IF COLON expression OPEN_KEY statement_list CLOSE_KEY .)
    NUM_INT         reduce using rule 34 (if_statement -> IF COLON expression OPEN_KEY statement_list CLOSE_KEY .)
    NUM_FLOAT       reduce using rule 34 (if_statement -> IF COLON expression OPEN_KEY statement_list CLOSE_KEY .)
    TRUE            reduce using rule 34 (if_statement -> IF COLON expression OPEN_KEY statement_list CLOSE_KEY .)
    FALSE           reduce using rule 34 (if_statement -> IF COLON expression OPEN_KEY statement_list CLOSE_KEY .)
    $end            reduce using rule 34 (if_statement -> IF COLON expression OPEN_KEY statement_list CLOSE_KEY .)
    CLOSE_KEY       reduce using rule 34 (if_statement -> IF COLON expression OPEN_KEY statement_list CLOSE_KEY .)
    ELSE            shift and go to state 124


state 123

    (13) statement -> FUNCTION variable OPEN_PAREN arguments CLOSE_PAREN OPEN_KEY statement_list . CLOSE_KEY
    (2) statement_list -> statement_list . statement
    (3) statement -> . variable
    (4) statement -> . expression
    (5) statement -> . if_statement
    (6) statement -> . BREAK SEMICOLON
    (7) statement -> . PRINT COLON OPEN_PAREN arguments CLOSE_PAREN SEMICOLON
    (8) statement -> . variable PLUS_EQ expression SEMICOLON
    (9) statement -> . variable MINUS_EQ expression SEMICOLON
    (10) statement -> . variable MULT_EQ expression SEMICOLON
    (11) statement -> . WHILE COLON expression OPEN_KEY statement_list CLOSE_KEY
    (12) statement -> . FOR COLON OPEN_KEY statement_list CLOSE_KEY
    (13) statement -> . FUNCTION variable OPEN_PAREN arguments CLOSE_PAREN OPEN_KEY statement_list CLOSE_KEY
    (14) statement -> . FUNCTION variable OPEN_KEY statement_list CLOSE_KEY
    (15) statement -> . RETURN expression SEMICOLON
    (17) statement -> . variable OPEN_PAREN arguments CLOSE_PAREN SEMICOLON
    (18) variable -> . VARIABLE
    (16) expression -> . variable OPEN_PAREN arguments CLOSE_PAREN
    (19) expression -> . expression PLUS expression
    (20) expression -> . expression MINUS expression
    (21) expression -> . expression MULT expression
    (22) expression -> . expression DIV expression
    (23) expression -> . expression EXP expression
    (24) expression -> . expression MOD expression
    (25) expression -> . expression BIT_AND expression
    (26) expression -> . expression BIT_OR expression
    (27) expression -> . expression BIT_XOR expression
    (28) expression -> . PLUS expression
    (29) expression -> . MINUS expression
    (30) expression -> . BIT_NEG expression
    (31) expression -> . NOT expression
    (32) expression -> . OPEN_PAREN expression CLOSE_PAREN
    (33) expression -> . variable ASSIGN assignable SEMICOLON
    (56) expression -> . primitive
    (57) expression -> . STRING
    (58) expression -> . variable
    (34) if_statement -> . IF COLON expression OPEN_KEY statement_list CLOSE_KEY
    (35) if_statement -> . IF COLON expression OPEN_KEY statement_list CLOSE_KEY ELSE COLON OPEN_KEY statement_list CLOSE_KEY
    (36) if_statement -> . IF COLON expression OPEN_KEY statement_list CLOSE_KEY ELSE COLON if_statement
    (37) primitive -> . NUM_INT
    (38) primitive -> . NUM_FLOAT
    (39) primitive -> . STRING
    (40) primitive -> . boolean
    (41) boolean -> . TRUE
    (42) boolean -> . FALSE
    (43) boolean -> . expression EQUAL_TO expression
    (44) boolean -> . expression DIFF expression
    (45) boolean -> . expression GREATER_THAN expression
    (46) boolean -> . expression GREATER_THAN_EQUAL expression
    (47) boolean -> . expression LESS_THAN expression
    (48) boolean -> . expression LESS_THAN_EQUAL expression
    (49) boolean -> . expression AND expression
    (50) boolean -> . expression OR expression

    CLOSE_KEY       shift and go to state 125
    BREAK           shift and go to state 6
    PRINT           shift and go to state 7
    WHILE           shift and go to state 9
    FOR             shift and go to state 10
    FUNCTION        shift and go to state 11
    RETURN          shift and go to state 12
    VARIABLE        shift and go to state 13
    PLUS            shift and go to state 14
    MINUS           shift and go to state 15
    BIT_NEG         shift and go to state 16
    NOT             shift and go to state 17
    OPEN_PAREN      shift and go to state 8
    STRING          shift and go to state 19
    IF              shift and go to state 20
    NUM_INT         shift and go to state 21
    NUM_FLOAT       shift and go to state 22
    TRUE            shift and go to state 24
    FALSE           shift and go to state 25

    variable                       shift and go to state 3
    statement                      shift and go to state 26
    expression                     shift and go to state 4
    if_statement                   shift and go to state 5
    primitive                      shift and go to state 18
    boolean                        shift and go to state 23

state 124

    (35) if_statement -> IF COLON expression OPEN_KEY statement_list CLOSE_KEY ELSE . COLON OPEN_KEY statement_list CLOSE_KEY
    (36) if_statement -> IF COLON expression OPEN_KEY statement_list CLOSE_KEY ELSE . COLON if_statement

    COLON           shift and go to state 126


state 125

    (13) statement -> FUNCTION variable OPEN_PAREN arguments CLOSE_PAREN OPEN_KEY statement_list CLOSE_KEY .

    BREAK           reduce using rule 13 (statement -> FUNCTION variable OPEN_PAREN arguments CLOSE_PAREN OPEN_KEY statement_list CLOSE_KEY .)
    PRINT           reduce using rule 13 (statement -> FUNCTION variable OPEN_PAREN arguments CLOSE_PAREN OPEN_KEY statement_list CLOSE_KEY .)
    WHILE           reduce using rule 13 (statement -> FUNCTION variable OPEN_PAREN arguments CLOSE_PAREN OPEN_KEY statement_list CLOSE_KEY .)
    FOR             reduce using rule 13 (statement -> FUNCTION variable OPEN_PAREN arguments CLOSE_PAREN OPEN_KEY statement_list CLOSE_KEY .)
    FUNCTION        reduce using rule 13 (statement -> FUNCTION variable OPEN_PAREN arguments CLOSE_PAREN OPEN_KEY statement_list CLOSE_KEY .)
    RETURN          reduce using rule 13 (statement -> FUNCTION variable OPEN_PAREN arguments CLOSE_PAREN OPEN_KEY statement_list CLOSE_KEY .)
    VARIABLE        reduce using rule 13 (statement -> FUNCTION variable OPEN_PAREN arguments CLOSE_PAREN OPEN_KEY statement_list CLOSE_KEY .)
    PLUS            reduce using rule 13 (statement -> FUNCTION variable OPEN_PAREN arguments CLOSE_PAREN OPEN_KEY statement_list CLOSE_KEY .)
    MINUS           reduce using rule 13 (statement -> FUNCTION variable OPEN_PAREN arguments CLOSE_PAREN OPEN_KEY statement_list CLOSE_KEY .)
    BIT_NEG         reduce using rule 13 (statement -> FUNCTION variable OPEN_PAREN arguments CLOSE_PAREN OPEN_KEY statement_list CLOSE_KEY .)
    NOT             reduce using rule 13 (statement -> FUNCTION variable OPEN_PAREN arguments CLOSE_PAREN OPEN_KEY statement_list CLOSE_KEY .)
    OPEN_PAREN      reduce using rule 13 (statement -> FUNCTION variable OPEN_PAREN arguments CLOSE_PAREN OPEN_KEY statement_list CLOSE_KEY .)
    STRING          reduce using rule 13 (statement -> FUNCTION variable OPEN_PAREN arguments CLOSE_PAREN OPEN_KEY statement_list CLOSE_KEY .)
    IF              reduce using rule 13 (statement -> FUNCTION variable OPEN_PAREN arguments CLOSE_PAREN OPEN_KEY statement_list CLOSE_KEY .)
    NUM_INT         reduce using rule 13 (statement -> FUNCTION variable OPEN_PAREN arguments CLOSE_PAREN OPEN_KEY statement_list CLOSE_KEY .)
    NUM_FLOAT       reduce using rule 13 (statement -> FUNCTION variable OPEN_PAREN arguments CLOSE_PAREN OPEN_KEY statement_list CLOSE_KEY .)
    TRUE            reduce using rule 13 (statement -> FUNCTION variable OPEN_PAREN arguments CLOSE_PAREN OPEN_KEY statement_list CLOSE_KEY .)
    FALSE           reduce using rule 13 (statement -> FUNCTION variable OPEN_PAREN arguments CLOSE_PAREN OPEN_KEY statement_list CLOSE_KEY .)
    $end            reduce using rule 13 (statement -> FUNCTION variable OPEN_PAREN arguments CLOSE_PAREN OPEN_KEY statement_list CLOSE_KEY .)
    CLOSE_KEY       reduce using rule 13 (statement -> FUNCTION variable OPEN_PAREN arguments CLOSE_PAREN OPEN_KEY statement_list CLOSE_KEY .)


state 126

    (35) if_statement -> IF COLON expression OPEN_KEY statement_list CLOSE_KEY ELSE COLON . OPEN_KEY statement_list CLOSE_KEY
    (36) if_statement -> IF COLON expression OPEN_KEY statement_list CLOSE_KEY ELSE COLON . if_statement
    (34) if_statement -> . IF COLON expression OPEN_KEY statement_list CLOSE_KEY
    (35) if_statement -> . IF COLON expression OPEN_KEY statement_list CLOSE_KEY ELSE COLON OPEN_KEY statement_list CLOSE_KEY
    (36) if_statement -> . IF COLON expression OPEN_KEY statement_list CLOSE_KEY ELSE COLON if_statement

    OPEN_KEY        shift and go to state 127
    IF              shift and go to state 20

    if_statement                   shift and go to state 128

state 127

    (35) if_statement -> IF COLON expression OPEN_KEY statement_list CLOSE_KEY ELSE COLON OPEN_KEY . statement_list CLOSE_KEY
    (1) statement_list -> . statement
    (2) statement_list -> . statement_list statement
    (3) statement -> . variable
    (4) statement -> . expression
    (5) statement -> . if_statement
    (6) statement -> . BREAK SEMICOLON
    (7) statement -> . PRINT COLON OPEN_PAREN arguments CLOSE_PAREN SEMICOLON
    (8) statement -> . variable PLUS_EQ expression SEMICOLON
    (9) statement -> . variable MINUS_EQ expression SEMICOLON
    (10) statement -> . variable MULT_EQ expression SEMICOLON
    (11) statement -> . WHILE COLON expression OPEN_KEY statement_list CLOSE_KEY
    (12) statement -> . FOR COLON OPEN_KEY statement_list CLOSE_KEY
    (13) statement -> . FUNCTION variable OPEN_PAREN arguments CLOSE_PAREN OPEN_KEY statement_list CLOSE_KEY
    (14) statement -> . FUNCTION variable OPEN_KEY statement_list CLOSE_KEY
    (15) statement -> . RETURN expression SEMICOLON
    (17) statement -> . variable OPEN_PAREN arguments CLOSE_PAREN SEMICOLON
    (18) variable -> . VARIABLE
    (16) expression -> . variable OPEN_PAREN arguments CLOSE_PAREN
    (19) expression -> . expression PLUS expression
    (20) expression -> . expression MINUS expression
    (21) expression -> . expression MULT expression
    (22) expression -> . expression DIV expression
    (23) expression -> . expression EXP expression
    (24) expression -> . expression MOD expression
    (25) expression -> . expression BIT_AND expression
    (26) expression -> . expression BIT_OR expression
    (27) expression -> . expression BIT_XOR expression
    (28) expression -> . PLUS expression
    (29) expression -> . MINUS expression
    (30) expression -> . BIT_NEG expression
    (31) expression -> . NOT expression
    (32) expression -> . OPEN_PAREN expression CLOSE_PAREN
    (33) expression -> . variable ASSIGN assignable SEMICOLON
    (56) expression -> . primitive
    (57) expression -> . STRING
    (58) expression -> . variable
    (34) if_statement -> . IF COLON expression OPEN_KEY statement_list CLOSE_KEY
    (35) if_statement -> . IF COLON expression OPEN_KEY statement_list CLOSE_KEY ELSE COLON OPEN_KEY statement_list CLOSE_KEY
    (36) if_statement -> . IF COLON expression OPEN_KEY statement_list CLOSE_KEY ELSE COLON if_statement
    (37) primitive -> . NUM_INT
    (38) primitive -> . NUM_FLOAT
    (39) primitive -> . STRING
    (40) primitive -> . boolean
    (41) boolean -> . TRUE
    (42) boolean -> . FALSE
    (43) boolean -> . expression EQUAL_TO expression
    (44) boolean -> . expression DIFF expression
    (45) boolean -> . expression GREATER_THAN expression
    (46) boolean -> . expression GREATER_THAN_EQUAL expression
    (47) boolean -> . expression LESS_THAN expression
    (48) boolean -> . expression LESS_THAN_EQUAL expression
    (49) boolean -> . expression AND expression
    (50) boolean -> . expression OR expression

    BREAK           shift and go to state 6
    PRINT           shift and go to state 7
    WHILE           shift and go to state 9
    FOR             shift and go to state 10
    FUNCTION        shift and go to state 11
    RETURN          shift and go to state 12
    VARIABLE        shift and go to state 13
    PLUS            shift and go to state 14
    MINUS           shift and go to state 15
    BIT_NEG         shift and go to state 16
    NOT             shift and go to state 17
    OPEN_PAREN      shift and go to state 8
    STRING          shift and go to state 19
    IF              shift and go to state 20
    NUM_INT         shift and go to state 21
    NUM_FLOAT       shift and go to state 22
    TRUE            shift and go to state 24
    FALSE           shift and go to state 25

    expression                     shift and go to state 4
    statement_list                 shift and go to state 129
    statement                      shift and go to state 2
    variable                       shift and go to state 3
    if_statement                   shift and go to state 5
    primitive                      shift and go to state 18
    boolean                        shift and go to state 23

state 128

    (36) if_statement -> IF COLON expression OPEN_KEY statement_list CLOSE_KEY ELSE COLON if_statement .

    BREAK           reduce using rule 36 (if_statement -> IF COLON expression OPEN_KEY statement_list CLOSE_KEY ELSE COLON if_statement .)
    PRINT           reduce using rule 36 (if_statement -> IF COLON expression OPEN_KEY statement_list CLOSE_KEY ELSE COLON if_statement .)
    WHILE           reduce using rule 36 (if_statement -> IF COLON expression OPEN_KEY statement_list CLOSE_KEY ELSE COLON if_statement .)
    FOR             reduce using rule 36 (if_statement -> IF COLON expression OPEN_KEY statement_list CLOSE_KEY ELSE COLON if_statement .)
    FUNCTION        reduce using rule 36 (if_statement -> IF COLON expression OPEN_KEY statement_list CLOSE_KEY ELSE COLON if_statement .)
    RETURN          reduce using rule 36 (if_statement -> IF COLON expression OPEN_KEY statement_list CLOSE_KEY ELSE COLON if_statement .)
    VARIABLE        reduce using rule 36 (if_statement -> IF COLON expression OPEN_KEY statement_list CLOSE_KEY ELSE COLON if_statement .)
    PLUS            reduce using rule 36 (if_statement -> IF COLON expression OPEN_KEY statement_list CLOSE_KEY ELSE COLON if_statement .)
    MINUS           reduce using rule 36 (if_statement -> IF COLON expression OPEN_KEY statement_list CLOSE_KEY ELSE COLON if_statement .)
    BIT_NEG         reduce using rule 36 (if_statement -> IF COLON expression OPEN_KEY statement_list CLOSE_KEY ELSE COLON if_statement .)
    NOT             reduce using rule 36 (if_statement -> IF COLON expression OPEN_KEY statement_list CLOSE_KEY ELSE COLON if_statement .)
    OPEN_PAREN      reduce using rule 36 (if_statement -> IF COLON expression OPEN_KEY statement_list CLOSE_KEY ELSE COLON if_statement .)
    STRING          reduce using rule 36 (if_statement -> IF COLON expression OPEN_KEY statement_list CLOSE_KEY ELSE COLON if_statement .)
    IF              reduce using rule 36 (if_statement -> IF COLON expression OPEN_KEY statement_list CLOSE_KEY ELSE COLON if_statement .)
    NUM_INT         reduce using rule 36 (if_statement -> IF COLON expression OPEN_KEY statement_list CLOSE_KEY ELSE COLON if_statement .)
    NUM_FLOAT       reduce using rule 36 (if_statement -> IF COLON expression OPEN_KEY statement_list CLOSE_KEY ELSE COLON if_statement .)
    TRUE            reduce using rule 36 (if_statement -> IF COLON expression OPEN_KEY statement_list CLOSE_KEY ELSE COLON if_statement .)
    FALSE           reduce using rule 36 (if_statement -> IF COLON expression OPEN_KEY statement_list CLOSE_KEY ELSE COLON if_statement .)
    $end            reduce using rule 36 (if_statement -> IF COLON expression OPEN_KEY statement_list CLOSE_KEY ELSE COLON if_statement .)
    CLOSE_KEY       reduce using rule 36 (if_statement -> IF COLON expression OPEN_KEY statement_list CLOSE_KEY ELSE COLON if_statement .)


state 129

    (35) if_statement -> IF COLON expression OPEN_KEY statement_list CLOSE_KEY ELSE COLON OPEN_KEY statement_list . CLOSE_KEY
    (2) statement_list -> statement_list . statement
    (3) statement -> . variable
    (4) statement -> . expression
    (5) statement -> . if_statement
    (6) statement -> . BREAK SEMICOLON
    (7) statement -> . PRINT COLON OPEN_PAREN arguments CLOSE_PAREN SEMICOLON
    (8) statement -> . variable PLUS_EQ expression SEMICOLON
    (9) statement -> . variable MINUS_EQ expression SEMICOLON
    (10) statement -> . variable MULT_EQ expression SEMICOLON
    (11) statement -> . WHILE COLON expression OPEN_KEY statement_list CLOSE_KEY
    (12) statement -> . FOR COLON OPEN_KEY statement_list CLOSE_KEY
    (13) statement -> . FUNCTION variable OPEN_PAREN arguments CLOSE_PAREN OPEN_KEY statement_list CLOSE_KEY
    (14) statement -> . FUNCTION variable OPEN_KEY statement_list CLOSE_KEY
    (15) statement -> . RETURN expression SEMICOLON
    (17) statement -> . variable OPEN_PAREN arguments CLOSE_PAREN SEMICOLON
    (18) variable -> . VARIABLE
    (16) expression -> . variable OPEN_PAREN arguments CLOSE_PAREN
    (19) expression -> . expression PLUS expression
    (20) expression -> . expression MINUS expression
    (21) expression -> . expression MULT expression
    (22) expression -> . expression DIV expression
    (23) expression -> . expression EXP expression
    (24) expression -> . expression MOD expression
    (25) expression -> . expression BIT_AND expression
    (26) expression -> . expression BIT_OR expression
    (27) expression -> . expression BIT_XOR expression
    (28) expression -> . PLUS expression
    (29) expression -> . MINUS expression
    (30) expression -> . BIT_NEG expression
    (31) expression -> . NOT expression
    (32) expression -> . OPEN_PAREN expression CLOSE_PAREN
    (33) expression -> . variable ASSIGN assignable SEMICOLON
    (56) expression -> . primitive
    (57) expression -> . STRING
    (58) expression -> . variable
    (34) if_statement -> . IF COLON expression OPEN_KEY statement_list CLOSE_KEY
    (35) if_statement -> . IF COLON expression OPEN_KEY statement_list CLOSE_KEY ELSE COLON OPEN_KEY statement_list CLOSE_KEY
    (36) if_statement -> . IF COLON expression OPEN_KEY statement_list CLOSE_KEY ELSE COLON if_statement
    (37) primitive -> . NUM_INT
    (38) primitive -> . NUM_FLOAT
    (39) primitive -> . STRING
    (40) primitive -> . boolean
    (41) boolean -> . TRUE
    (42) boolean -> . FALSE
    (43) boolean -> . expression EQUAL_TO expression
    (44) boolean -> . expression DIFF expression
    (45) boolean -> . expression GREATER_THAN expression
    (46) boolean -> . expression GREATER_THAN_EQUAL expression
    (47) boolean -> . expression LESS_THAN expression
    (48) boolean -> . expression LESS_THAN_EQUAL expression
    (49) boolean -> . expression AND expression
    (50) boolean -> . expression OR expression

    CLOSE_KEY       shift and go to state 130
    BREAK           shift and go to state 6
    PRINT           shift and go to state 7
    WHILE           shift and go to state 9
    FOR             shift and go to state 10
    FUNCTION        shift and go to state 11
    RETURN          shift and go to state 12
    VARIABLE        shift and go to state 13
    PLUS            shift and go to state 14
    MINUS           shift and go to state 15
    BIT_NEG         shift and go to state 16
    NOT             shift and go to state 17
    OPEN_PAREN      shift and go to state 8
    STRING          shift and go to state 19
    IF              shift and go to state 20
    NUM_INT         shift and go to state 21
    NUM_FLOAT       shift and go to state 22
    TRUE            shift and go to state 24
    FALSE           shift and go to state 25

    expression                     shift and go to state 4
    statement                      shift and go to state 26
    variable                       shift and go to state 3
    if_statement                   shift and go to state 5
    primitive                      shift and go to state 18
    boolean                        shift and go to state 23

state 130

    (35) if_statement -> IF COLON expression OPEN_KEY statement_list CLOSE_KEY ELSE COLON OPEN_KEY statement_list CLOSE_KEY .

    BREAK           reduce using rule 35 (if_statement -> IF COLON expression OPEN_KEY statement_list CLOSE_KEY ELSE COLON OPEN_KEY statement_list CLOSE_KEY .)
    PRINT           reduce using rule 35 (if_statement -> IF COLON expression OPEN_KEY statement_list CLOSE_KEY ELSE COLON OPEN_KEY statement_list CLOSE_KEY .)
    WHILE           reduce using rule 35 (if_statement -> IF COLON expression OPEN_KEY statement_list CLOSE_KEY ELSE COLON OPEN_KEY statement_list CLOSE_KEY .)
    FOR             reduce using rule 35 (if_statement -> IF COLON expression OPEN_KEY statement_list CLOSE_KEY ELSE COLON OPEN_KEY statement_list CLOSE_KEY .)
    FUNCTION        reduce using rule 35 (if_statement -> IF COLON expression OPEN_KEY statement_list CLOSE_KEY ELSE COLON OPEN_KEY statement_list CLOSE_KEY .)
    RETURN          reduce using rule 35 (if_statement -> IF COLON expression OPEN_KEY statement_list CLOSE_KEY ELSE COLON OPEN_KEY statement_list CLOSE_KEY .)
    VARIABLE        reduce using rule 35 (if_statement -> IF COLON expression OPEN_KEY statement_list CLOSE_KEY ELSE COLON OPEN_KEY statement_list CLOSE_KEY .)
    PLUS            reduce using rule 35 (if_statement -> IF COLON expression OPEN_KEY statement_list CLOSE_KEY ELSE COLON OPEN_KEY statement_list CLOSE_KEY .)
    MINUS           reduce using rule 35 (if_statement -> IF COLON expression OPEN_KEY statement_list CLOSE_KEY ELSE COLON OPEN_KEY statement_list CLOSE_KEY .)
    BIT_NEG         reduce using rule 35 (if_statement -> IF COLON expression OPEN_KEY statement_list CLOSE_KEY ELSE COLON OPEN_KEY statement_list CLOSE_KEY .)
    NOT             reduce using rule 35 (if_statement -> IF COLON expression OPEN_KEY statement_list CLOSE_KEY ELSE COLON OPEN_KEY statement_list CLOSE_KEY .)
    OPEN_PAREN      reduce using rule 35 (if_statement -> IF COLON expression OPEN_KEY statement_list CLOSE_KEY ELSE COLON OPEN_KEY statement_list CLOSE_KEY .)
    STRING          reduce using rule 35 (if_statement -> IF COLON expression OPEN_KEY statement_list CLOSE_KEY ELSE COLON OPEN_KEY statement_list CLOSE_KEY .)
    IF              reduce using rule 35 (if_statement -> IF COLON expression OPEN_KEY statement_list CLOSE_KEY ELSE COLON OPEN_KEY statement_list CLOSE_KEY .)
    NUM_INT         reduce using rule 35 (if_statement -> IF COLON expression OPEN_KEY statement_list CLOSE_KEY ELSE COLON OPEN_KEY statement_list CLOSE_KEY .)
    NUM_FLOAT       reduce using rule 35 (if_statement -> IF COLON expression OPEN_KEY statement_list CLOSE_KEY ELSE COLON OPEN_KEY statement_list CLOSE_KEY .)
    TRUE            reduce using rule 35 (if_statement -> IF COLON expression OPEN_KEY statement_list CLOSE_KEY ELSE COLON OPEN_KEY statement_list CLOSE_KEY .)
    FALSE           reduce using rule 35 (if_statement -> IF COLON expression OPEN_KEY statement_list CLOSE_KEY ELSE COLON OPEN_KEY statement_list CLOSE_KEY .)
    $end            reduce using rule 35 (if_statement -> IF COLON expression OPEN_KEY statement_list CLOSE_KEY ELSE COLON OPEN_KEY statement_list CLOSE_KEY .)
    CLOSE_KEY       reduce using rule 35 (if_statement -> IF COLON expression OPEN_KEY statement_list CLOSE_KEY ELSE COLON OPEN_KEY statement_list CLOSE_KEY .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for OPEN_PAREN in state 3 resolved as shift
WARNING: shift/reduce conflict for OPEN_PAREN in state 3 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 4 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 4 resolved as shift
WARNING: shift/reduce conflict for OPEN_PAREN in state 52 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 59 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 59 resolved as shift
WARNING: shift/reduce conflict for MULT in state 59 resolved as shift
WARNING: shift/reduce conflict for DIV in state 59 resolved as shift
WARNING: shift/reduce conflict for EXP in state 59 resolved as shift
WARNING: shift/reduce conflict for MOD in state 59 resolved as shift
WARNING: shift/reduce conflict for BIT_AND in state 59 resolved as shift
WARNING: shift/reduce conflict for BIT_OR in state 59 resolved as shift
WARNING: shift/reduce conflict for BIT_XOR in state 59 resolved as shift
WARNING: shift/reduce conflict for EQUAL_TO in state 59 resolved as shift
WARNING: shift/reduce conflict for DIFF in state 59 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN in state 59 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN_EQUAL in state 59 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN in state 59 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN_EQUAL in state 59 resolved as shift
WARNING: shift/reduce conflict for AND in state 59 resolved as shift
WARNING: shift/reduce conflict for OR in state 59 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 77 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 77 resolved as shift
WARNING: shift/reduce conflict for MULT in state 77 resolved as shift
WARNING: shift/reduce conflict for DIV in state 77 resolved as shift
WARNING: shift/reduce conflict for EXP in state 77 resolved as shift
WARNING: shift/reduce conflict for MOD in state 77 resolved as shift
WARNING: shift/reduce conflict for BIT_AND in state 77 resolved as shift
WARNING: shift/reduce conflict for BIT_OR in state 77 resolved as shift
WARNING: shift/reduce conflict for BIT_XOR in state 77 resolved as shift
WARNING: shift/reduce conflict for EQUAL_TO in state 77 resolved as shift
WARNING: shift/reduce conflict for DIFF in state 77 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN in state 77 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN_EQUAL in state 77 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN in state 77 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN_EQUAL in state 77 resolved as shift
WARNING: shift/reduce conflict for AND in state 77 resolved as shift
WARNING: shift/reduce conflict for OR in state 77 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 78 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 78 resolved as shift
WARNING: shift/reduce conflict for MULT in state 78 resolved as shift
WARNING: shift/reduce conflict for DIV in state 78 resolved as shift
WARNING: shift/reduce conflict for EXP in state 78 resolved as shift
WARNING: shift/reduce conflict for MOD in state 78 resolved as shift
WARNING: shift/reduce conflict for BIT_AND in state 78 resolved as shift
WARNING: shift/reduce conflict for BIT_OR in state 78 resolved as shift
WARNING: shift/reduce conflict for BIT_XOR in state 78 resolved as shift
WARNING: shift/reduce conflict for EQUAL_TO in state 78 resolved as shift
WARNING: shift/reduce conflict for DIFF in state 78 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN in state 78 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN_EQUAL in state 78 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN in state 78 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN_EQUAL in state 78 resolved as shift
WARNING: shift/reduce conflict for AND in state 78 resolved as shift
WARNING: shift/reduce conflict for OR in state 78 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 79 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 79 resolved as shift
WARNING: shift/reduce conflict for MULT in state 79 resolved as shift
WARNING: shift/reduce conflict for DIV in state 79 resolved as shift
WARNING: shift/reduce conflict for EXP in state 79 resolved as shift
WARNING: shift/reduce conflict for MOD in state 79 resolved as shift
WARNING: shift/reduce conflict for BIT_AND in state 79 resolved as shift
WARNING: shift/reduce conflict for BIT_OR in state 79 resolved as shift
WARNING: shift/reduce conflict for BIT_XOR in state 79 resolved as shift
WARNING: shift/reduce conflict for EQUAL_TO in state 79 resolved as shift
WARNING: shift/reduce conflict for DIFF in state 79 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN in state 79 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN_EQUAL in state 79 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN in state 79 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN_EQUAL in state 79 resolved as shift
WARNING: shift/reduce conflict for AND in state 79 resolved as shift
WARNING: shift/reduce conflict for OR in state 79 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 80 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 80 resolved as shift
WARNING: shift/reduce conflict for MULT in state 80 resolved as shift
WARNING: shift/reduce conflict for DIV in state 80 resolved as shift
WARNING: shift/reduce conflict for EXP in state 80 resolved as shift
WARNING: shift/reduce conflict for MOD in state 80 resolved as shift
WARNING: shift/reduce conflict for BIT_AND in state 80 resolved as shift
WARNING: shift/reduce conflict for BIT_OR in state 80 resolved as shift
WARNING: shift/reduce conflict for BIT_XOR in state 80 resolved as shift
WARNING: shift/reduce conflict for EQUAL_TO in state 80 resolved as shift
WARNING: shift/reduce conflict for DIFF in state 80 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN in state 80 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN_EQUAL in state 80 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN in state 80 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN_EQUAL in state 80 resolved as shift
WARNING: shift/reduce conflict for AND in state 80 resolved as shift
WARNING: shift/reduce conflict for OR in state 80 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 81 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 81 resolved as shift
WARNING: shift/reduce conflict for MULT in state 81 resolved as shift
WARNING: shift/reduce conflict for DIV in state 81 resolved as shift
WARNING: shift/reduce conflict for EXP in state 81 resolved as shift
WARNING: shift/reduce conflict for MOD in state 81 resolved as shift
WARNING: shift/reduce conflict for BIT_AND in state 81 resolved as shift
WARNING: shift/reduce conflict for BIT_OR in state 81 resolved as shift
WARNING: shift/reduce conflict for BIT_XOR in state 81 resolved as shift
WARNING: shift/reduce conflict for EQUAL_TO in state 81 resolved as shift
WARNING: shift/reduce conflict for DIFF in state 81 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN in state 81 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN_EQUAL in state 81 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN in state 81 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN_EQUAL in state 81 resolved as shift
WARNING: shift/reduce conflict for AND in state 81 resolved as shift
WARNING: shift/reduce conflict for OR in state 81 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 82 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 82 resolved as shift
WARNING: shift/reduce conflict for MULT in state 82 resolved as shift
WARNING: shift/reduce conflict for DIV in state 82 resolved as shift
WARNING: shift/reduce conflict for EXP in state 82 resolved as shift
WARNING: shift/reduce conflict for MOD in state 82 resolved as shift
WARNING: shift/reduce conflict for BIT_AND in state 82 resolved as shift
WARNING: shift/reduce conflict for BIT_OR in state 82 resolved as shift
WARNING: shift/reduce conflict for BIT_XOR in state 82 resolved as shift
WARNING: shift/reduce conflict for EQUAL_TO in state 82 resolved as shift
WARNING: shift/reduce conflict for DIFF in state 82 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN in state 82 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN_EQUAL in state 82 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN in state 82 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN_EQUAL in state 82 resolved as shift
WARNING: shift/reduce conflict for AND in state 82 resolved as shift
WARNING: shift/reduce conflict for OR in state 82 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 83 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 83 resolved as shift
WARNING: shift/reduce conflict for MULT in state 83 resolved as shift
WARNING: shift/reduce conflict for DIV in state 83 resolved as shift
WARNING: shift/reduce conflict for EXP in state 83 resolved as shift
WARNING: shift/reduce conflict for MOD in state 83 resolved as shift
WARNING: shift/reduce conflict for BIT_AND in state 83 resolved as shift
WARNING: shift/reduce conflict for BIT_OR in state 83 resolved as shift
WARNING: shift/reduce conflict for BIT_XOR in state 83 resolved as shift
WARNING: shift/reduce conflict for EQUAL_TO in state 83 resolved as shift
WARNING: shift/reduce conflict for DIFF in state 83 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN in state 83 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN_EQUAL in state 83 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN in state 83 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN_EQUAL in state 83 resolved as shift
WARNING: shift/reduce conflict for AND in state 83 resolved as shift
WARNING: shift/reduce conflict for OR in state 83 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 84 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 84 resolved as shift
WARNING: shift/reduce conflict for MULT in state 84 resolved as shift
WARNING: shift/reduce conflict for DIV in state 84 resolved as shift
WARNING: shift/reduce conflict for EXP in state 84 resolved as shift
WARNING: shift/reduce conflict for MOD in state 84 resolved as shift
WARNING: shift/reduce conflict for BIT_AND in state 84 resolved as shift
WARNING: shift/reduce conflict for BIT_OR in state 84 resolved as shift
WARNING: shift/reduce conflict for BIT_XOR in state 84 resolved as shift
WARNING: shift/reduce conflict for EQUAL_TO in state 84 resolved as shift
WARNING: shift/reduce conflict for DIFF in state 84 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN in state 84 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN_EQUAL in state 84 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN in state 84 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN_EQUAL in state 84 resolved as shift
WARNING: shift/reduce conflict for AND in state 84 resolved as shift
WARNING: shift/reduce conflict for OR in state 84 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 85 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 85 resolved as shift
WARNING: shift/reduce conflict for MULT in state 85 resolved as shift
WARNING: shift/reduce conflict for DIV in state 85 resolved as shift
WARNING: shift/reduce conflict for EXP in state 85 resolved as shift
WARNING: shift/reduce conflict for MOD in state 85 resolved as shift
WARNING: shift/reduce conflict for BIT_AND in state 85 resolved as shift
WARNING: shift/reduce conflict for BIT_OR in state 85 resolved as shift
WARNING: shift/reduce conflict for BIT_XOR in state 85 resolved as shift
WARNING: shift/reduce conflict for EQUAL_TO in state 85 resolved as shift
WARNING: shift/reduce conflict for DIFF in state 85 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN in state 85 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN_EQUAL in state 85 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN in state 85 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN_EQUAL in state 85 resolved as shift
WARNING: shift/reduce conflict for AND in state 85 resolved as shift
WARNING: shift/reduce conflict for OR in state 85 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 86 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 86 resolved as shift
WARNING: shift/reduce conflict for MULT in state 86 resolved as shift
WARNING: shift/reduce conflict for DIV in state 86 resolved as shift
WARNING: shift/reduce conflict for EXP in state 86 resolved as shift
WARNING: shift/reduce conflict for MOD in state 86 resolved as shift
WARNING: shift/reduce conflict for BIT_AND in state 86 resolved as shift
WARNING: shift/reduce conflict for BIT_OR in state 86 resolved as shift
WARNING: shift/reduce conflict for BIT_XOR in state 86 resolved as shift
WARNING: shift/reduce conflict for EQUAL_TO in state 86 resolved as shift
WARNING: shift/reduce conflict for DIFF in state 86 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN in state 86 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN_EQUAL in state 86 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN in state 86 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN_EQUAL in state 86 resolved as shift
WARNING: shift/reduce conflict for AND in state 86 resolved as shift
WARNING: shift/reduce conflict for OR in state 86 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 87 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 87 resolved as shift
WARNING: shift/reduce conflict for MULT in state 87 resolved as shift
WARNING: shift/reduce conflict for DIV in state 87 resolved as shift
WARNING: shift/reduce conflict for EXP in state 87 resolved as shift
WARNING: shift/reduce conflict for MOD in state 87 resolved as shift
WARNING: shift/reduce conflict for BIT_AND in state 87 resolved as shift
WARNING: shift/reduce conflict for BIT_OR in state 87 resolved as shift
WARNING: shift/reduce conflict for BIT_XOR in state 87 resolved as shift
WARNING: shift/reduce conflict for EQUAL_TO in state 87 resolved as shift
WARNING: shift/reduce conflict for DIFF in state 87 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN in state 87 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN_EQUAL in state 87 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN in state 87 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN_EQUAL in state 87 resolved as shift
WARNING: shift/reduce conflict for AND in state 87 resolved as shift
WARNING: shift/reduce conflict for OR in state 87 resolved as shift
WARNING: reduce/reduce conflict in state 3 resolved using rule (statement -> variable)
WARNING: rejected rule (expression -> variable) in state 3
WARNING: reduce/reduce conflict in state 19 resolved using rule (primitive -> STRING)
WARNING: rejected rule (expression -> STRING) in state 19
WARNING: reduce/reduce conflict in state 68 resolved using rule (assignable -> primitive)
WARNING: rejected rule (expression -> primitive) in state 68
WARNING: reduce/reduce conflict in state 70 resolved using rule (primitive -> STRING)
WARNING: rejected rule (expression -> STRING) in state 70
WARNING: Rule (expression -> STRING) is never reduced
